{%- macro datetime_diff(t1, t2, format='%Y-%m-%d %H:%M:%S') -%}
    {#-
    This macro calculates the difference between two datetimes.

    Parameters:
    - t1: The first datetime.
    - t2: The second datetime.
    - format: The format to use for the output.

    Returns:
    - A string representing the difference between the two datetimes.
    -#}
    {%- set datetime1 = as_datetime(t1)|as_timestamp|timestamp_custom(format, true) -%}
    {%- set parts1 = datetime1.split(' ') -%}
    {%- set date1 = parts1[0].split('-') -%}
    {%- set time1 = parts1[1].split(':') -%}

    {%- set datetime2 = as_datetime(t2)|as_timestamp|timestamp_custom(format, true) -%}
    {%- set parts2 = datetime2.split(' ') -%}
    {%- set date2 = parts2[0].split('-') -%}
    {%- set time2 = parts2[1].split(':') -%}

    {%- set ns = namespace(differing_parts=[]) -%}

    {%- for i in range(date1 | length) -%}
        {%- if date1[i] != date2[i] -%}
            {%- set ns.differing_parts = ns.differing_parts + ['-'.join(date2[i:])] -%}
            {%- break -%}
        {%- endif -%}
    {%- endfor -%}
    
    {%- if ns.differing_parts | length > 0 -%}
        {%- set ns.differing_parts = ns.differing_parts + [':'.join(time2)] -%}
    {%- else -%}
        {%- for i in range(time1 | length) -%}
            {%- if time1[i] != time2[i] -%}
                {%- set ns.differing_parts = ns.differing_parts + [':'.join(time2[i:])] -%}
                {%- break -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}
    {{ ns.differing_parts | join(' ') }}
{%- endmacro -%}

{%- macro timestamp_diff(t1, t2, format='%Y-%m-%d %H:%M:%S', splitter=' ') -%}
    {#- Removes the date part from t2 if it's the same as t1

    Parameters:
    - t1: The first datetime.
    - t2: The second datetime.
    - format: The format to use for the output.
    - splitter: The character to split the datetime string on.
    -#}
    {%- set datetime1 = as_timestamp(t1)|timestamp_custom(format, true) -%}
    {%- set datetime2 = as_timestamp(t2)|timestamp_custom(format, true) -%}
    {%- set parts1 = datetime1.split(splitter) -%}
    {%- set parts2 = datetime2.split(splitter) -%}
    {%- if parts1[0] == parts2[0] -%}
        {{ parts2[1] }}
    {%- else -%}
        {{ datetime2 }}
    {%- endif -%}
{%- endmacro -%}

{%- macro split_seconds(input) -%}
    {%- set value = input|int(0) -%}
    {%- set abs_value = value if value >= 0 else -value -%}
    {%- set days = (abs_value // 86400) -%}
    {%- set hours = (abs_value % 86400) // 3600 -%}
    {%- set minutes = (abs_value % 3600) // 60 -%}
    {%- set seconds = abs_value % 60 -%}
    {{
        {
            'negative': value <= 0,
            'days': days,
            'hours': hours,
            'minutes': minutes,
            'seconds': seconds
        } | to_json
    }}
{%- endmacro -%}

{%- macro format_seconds(input, precision=none, labels={'days': 'd', 'hours': 't', 'minutes': 'm', 'seconds': 's'}) -%}
    {#-
    This macro formats a number of seconds into a human-readable string.

    Parameters:
    - input: The number of seconds to format.
    - precision: The highest unit to include in the output. If not specified, all units will be included.
    - labels: A dictionary of labels to use for each unit. The keys should be 'days', 'hours', 'minutes', and 'seconds'.

    Example:
    {{ 3661 | format_seconds }} -> 1h 1m 1s
    {{ 3661 | format_seconds(precision='minutes') }} -> 1h 1m
    {{ 3661 | format_seconds(labels={'days': ' dag', 'hours': ' tim', 'minutes': ' min', 'seconds': ' sek'}) }} -> 1 tim 1 min 1 sek
    -#}
    {%- set v = split_seconds(input|int(0))|from_json -%}
    {%- set ns = namespace(ret=[],noskip=false) -%}
    {%- for key in labels.keys() -%}
        {%- if ns.noskip or v[key] > 0 -%}
            {%- set ns.noskip = true -%}
            {%- set ns.ret = ns.ret + [v[key] ~ labels[key]] -%}
        {%- endif -%}
        {%- if precision is defined and precision == key -%}
            {%- break -%}
        {%- endif -%}
    {%- endfor -%}
    {%- if ns.ret | length == 0 -%}
        0s
    {%- else -%}
        {{ '-' if v['negative'] else '' }}{{ ns.ret | join(' ') }}
    {%- endif -%}
{%- endmacro -%}

{%- macro relative_start_end_time(start, end, starts_str='Starter ', ends_str='. Slutter ', started_str='Startede ', ended_str='Sluttede ', est='') -%}
    {%- from 'easy_time.jinja' import custom_relative_time -%}
    {%- set startsIn = ((now()|as_timestamp) - (start|as_timestamp)) / (1000 * 60) -%}
    {%- set startsFormatted = custom_relative_time(start, 'day, hour, minute', short=true) -%}
    {%- set endsIn = ((end|as_timestamp) - (now()|as_timestamp)) / (1000 * 60) -%}
    {%- set endsFormatted = custom_relative_time(end, 'day, hour, minute', short=true) -%}
    {%- if (startsIn < 0) -%}
        {{ starts_str }}{{ startsFormatted }}{{ est }}
    {%- elif (endsIn < 0) -%}
        {{ ended_str }}{{ endsFormatted.replace('-','') }}
    {%- else -%}
        {{ started_str }}{{ startsFormatted.replace('-','') }}{{ ends_str }}{{ endsFormatted }}{{ est }}
    {%- endif -%}
{%- endmacro -%}

{%- macro cal_days_since(entity_id) -%}
    {%- if has_value(entity_id) -%}
        {%- set today = as_local(as_datetime(states('sensor.date'))).date() -%}
        {%- set last = as_local(as_datetime(states(entity_id))).date() -%}
        {{ (today - last).days }}
    {%- endif -%}
{%- endmacro -%}