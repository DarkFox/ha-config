{%- macro pad_number(number, dec_digits=2, int_digits=1, separator=',') -%}
    {#-
    This macro pads a number with leading zeros and adds a separator between the integer and decimal parts.
    
    Parameters:
    - number: The number to pad and format.
    - dec_digits: The number of decimal digits to include. Default is 2.
    - int_digits: The minimum number of integer digits to include. Default is 1.
    - separator: The separator character to use between the integer and decimal parts. Default is ','.
    
    Usage: 
    {{ pad_number(123.45, dec_digits=3, int_digits=3, separator='.') }}  # Output: '123.450'
    -#}

    {%- set number = number | float(0.0) | round(dec_digits) | string -%}
    {%- set int_part, dec_part = number.split('.') -%}
    {%- set int_part = int_part | int -%}
    {%- set dec_part = dec_part | int -%}
    {%- set int_part = int_part | string -%}
    {%- set dec_part = dec_part | string -%}
    {%- set int_part = '0' * (int_digits - int_part | length) ~ int_part -%}
    {%- set dec_part = dec_part ~ '0' * (dec_digits - dec_part | length) -%}
    {{ int_part ~ separator ~ dec_part }}
{%- endmacro -%}

{%- macro constrain(x, min_x, max_x) -%}
    {#-
    This macro constrains a value within a specified range.
    
    Parameters:
    - x: The value to constrain.
    - min_x: The minimum value of the range.
    - max_x: The maximum value of the range.
    
    Usage: 
    {{ constrain(10, 0, 100) }}  # Output: 10
    -#}

    {{ min(max((x|float),(min_x|float)), (max_x|float)) }}
{%- endmacro -%}

{%- macro map(x, in_min, in_max, out_min, out_max) -%}
    {#-
    This macro maps a value from one range to another range.
    
    Parameters:
    - x: The value to map.
    - in_min: The minimum value of the input range.
    - in_max: The maximum value of the input range.
    - out_min: The minimum value of the output range.
    - out_max: The maximum value of the output range.
    
    Usage: 
    {{ map(50, 0, 100, 0, 255) }}  # Output: 127.5
    -#}
    {%- set x = x | float -%}
    {%- set in_min = in_min | float -%}
    {%- set in_max = in_max | float -%}
    {%- set out_min = out_min | float -%}
    {%- set out_max = out_max | float -%}

    {{ out_min + (x - in_min) * (out_max - out_min) / (in_max - in_min) }}
{%- endmacro -%}

{%- macro map_clamp(x, in_min, in_max, out_min, out_max) -%}
    {#-
    This macro maps a value from one range to another range and clamps the result within the output range.
    
    Parameters:
    - x: The value to map.
    - in_min: The minimum value of the input range.
    - in_max: The maximum value of the input range.
    - out_min: The minimum value of the output range.
    - out_max: The maximum value of the output range.
    
    Usage: 
    {{ map_clamp(50, 0, 100, 0, 255) }}  # Output: 127.5
    -#}

    {{ constrain(map(x, in_min, in_max, out_min, out_max), out_min, out_max) }}
{%- endmacro -%}

{%- macro map_clamp_input(x, in_min, in_max, out_min, out_max) -%}
    {#-
    This macro maps a value from one range to another range and clamps the input value within the input range.
    
    Parameters:
    - x: The value to map.
    - in_min: The minimum value of the input range.
    - in_max: The maximum value of the input range.
    - out_min: The minimum value of the output range.
    - out_max: The maximum value of the output range.
    
    Usage: 
    {{ map_clamp_input(50, 0, 100, 0, 255) }}  # Output: 127.5
    -#}

    {{ map(constrain(x, in_min, in_max), in_min, in_max, out_min, out_max) }}
{%- endmacro -%}


{%- macro regex_escape(value) -%}
    {{ value.replace('\\', '\\\\').replace('.', '\\.').replace('^', '\\^').replace('$', '\\$')
        .replace('*', '\\*').replace('+', '\\+').replace('?', '\\?').replace('{', '\\{')
        .replace('}', '\\}').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(')
        .replace(')', '\\)').replace('|', '\\|') }}
{%- endmacro -%}

{%- macro slugify(input) -%}
    {#-
    This macro converts a string into a slug by replacing spaces with hyphens and removing special characters.

    Parameters:
    - input: The string to convert into a slug.

    Usage:
    {{ slugify('Hello, World!') }}  # Output: 'hello-world'
    -#}
    {{ input | trim | lower | regex_replace('[^a-z0-9]+', '-') | trim('-') }}
{%- endmacro -%}

{%- macro format_number(value, decimals, pad_dec=false) -%}
    {#-
    This macro formats a number with Danish decimal and thousand separators.

    Parameters:
    - value: The number to format.
    - decimals: The number of decimal places to include.
    - pad_dec: Whether to pad the decimal part with zeros. Default is false.

    Usage:
    {{ format_number(1234567.89, 2) }}  # Output: '1.234.567,89'
    -#}
    {%- set value = value | round(decimals) | string -%}
    {%- set int_part, dec_part = value.split('.') -%}
    {%- set int_part = int_part | int -%}
    {%- set dec_part = dec_part | int -%}
    {%- set int_part = int_part | string -%}
    {%- set dec_part = dec_part | string -%}
    {%- set int_part = int_part | regex_replace('(\d)(?=(\d{3})+(?!\d))', '\\1.') -%}
    {%- if pad_dec -%}
        {%- set dec_part = dec_part ~ '0' * (decimals - dec_part | length) -%}
    {%- endif -%}
    {{ int_part ~ ',' ~ dec_part }}
{%- endmacro -%}

{%- macro sort_list_by_attr(input, attr, values, include_non_matching=False) -%}
    {#-
    This macro sorts a list based on an attribute and a list of values.
    
    Parameters:
    - input: The list to sort.
    - attr: The attribute to sort by.
    - values: The list of values to sort by.
    - include_non_matching: Whether to include items that don't match any of the values (default is False).
    
    Usage: 
    {{ sort_list_by_attr(list, 'name', ['apple', 'banana', 'cherry']) }}
    {{ sort_list_by_attr(list, 'name', ['apple', 'banana', 'cherry'], True) }}
    -#}
    {%- set ns = namespace(sorted_list=[]) -%}
    {%- for value in values -%}
        {%- set ns.sorted_list = ns.sorted_list + (input | selectattr(attr, 'eq', value) | list) -%}
    {%- endfor -%}
    {%- if include_non_matching -%}
        {%- set ns.sorted_list = ns.sorted_list + (input | rejectattr(attr, 'in', values) | list) -%}
    {%- endif -%}
    {{ ns.sorted_list }}
{%- endmacro -%}

{%- macro attr_has_value(entity_id, attribute) -%}
    {#-
    This macro checks if an entity has a specific attribute with a value.

    Parameters:
    - entity_id: The entity ID to check.
    - attribute: The attribute to check.

    Usage:
    {{ attr_has_value('sensor.temperature', 'unit_of_measurement') }}  # Output: true or false
    -#}
    {{ true if states[entity_id] is defined and attribute in states[entity_id].attributes else false }}
{%- endmacro -%}

{%- macro remove_double_spaces(input) -%}
    {#-
    Recursively removes double spaces from a string.

    Parameters:
    - input: The string to remove double spaces from.

    Usage:
    {{ remove_double_spaces('Hello  World!') }}  # Output: 'Hello World!'
    -#}
    {%- set output = input -%}
    {%- set new_output = output | replace('  ', ' ') -%}
    {%- if new_output != output -%}
        {{ remove_double_spaces(new_output) }}
    {%- else -%}
        {{ output }}
    {%- endif -%}
{%- endmacro -%}
