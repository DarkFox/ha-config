script:
  fade_light:
    # Example:
    #     - service: script.fade_light
    #       data:
    #         light: light.kitchen
    #         transition: 15
    #         end_pct: 50
    description: "Fades lights to a desired level over a specified transition period."
    fields:
      light:
        name: Light
        description: Entity_id of light.
        selector:
          entity:
            domain: light
        example: light.kitchen
      end_pct:
        name: End brightness Level
        description: Integer value from 0 to 100 representing the desired final brightness level.
        selector:
          number:
            min: 0
            max: 100
            step: 1
            mode: slider
        default: 50
        example: "50"
      transition:
        name: Transition Time
        description: Transition time for fading in seconds.
        selector:
          number:
            min: 0
            max: 1800
            step: 1
            mode: slider
        default: 10
        example: "10"
    mode: parallel
    sequence:
      - variables:
          start_pct: "{{ ((state_attr(light, 'brightness') | int(0))/255*100) | round(0, default=0) }}"
          end_pct: "{{ end_pct | int(0) | round(0, default=0) }}"
          delay_msec: >-
            {{ ([100, (((transition / (end_pct - start_pct)) | abs) | round(3, default=0) * 1000) | int(0)]|sort)[1] }}
          sign: "{{ 1 if start_pct < end_pct else -1 }}"
          n: "{{ 1000 * transition / delay_msec | int(0) }}"
      - repeat:
          while:
            - condition: template
              value_template: >-
                {{  repeat.index <= n }}
          sequence:
            - delay:
                milliseconds: "{{ delay_msec }}"
            - service: light.turn_on
              target:
                entity_id: "{{ light }}"
              data:
                brightness_pct: "{{ ([0, (start_pct + (repeat.index * sign)), 100]|sort)[1] }}"
