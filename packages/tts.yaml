sensor:
  - platform: template
    sensors:
      tts_greeting:
        value_template: >-
          {%- if now().hour < 4 -%}
            Godnat
          {%- elif now().hour < 10 -%}
            Godmorgen
          {%- elif now().hour < 14 -%}
            Goddag
          {%- elif now().hour < 17 -%}
            God eftermiddag
          {%- elif now().hour < 24 -%}
            Godaften
          {%- endif -%}
      chime_path:
        value_template: >-
          {{ states('input_text.notification_sound').split(': ')[1] }}

command_line:
  - sensor:
      name: Notification Sounds
      command: >-
        find /media/Notifications -type f -name '*.mp3' -print | jq -R -n -c '{"files": [inputs]}'
      json_attributes:
        - files
  - sensor:
      name: Chime TTS Sounds
      command: >-
        find /config/custom_components/chime_tts -type f -name '*.mp3' -print | jq -R -n -c '{"files": [inputs]}'
      json_attributes:
        - files

input_select:
  notification_sound:
    name: Notification Sound
    options:
      - unknown
    icon: mdi:music-note

input_text:
  notification_sound:
    name: Notification Sound
    icon: mdi:music-note

script:
  tts_speak:
    alias: "TTS Speak"
    description: "Speak a message using TTS"
    fields:
      message:
        description: "The message to speak"
        example: "Hello world"
      volume_level:
        description: "The volume level to use (Default 0.5))"
        example: "0.5"
      cache:
        description: "Whether to cache the TTS file (Default false)"
        example: "false"
      entity_id:
        description: "The media player(s) to use"
        example: "media_player.speaker"
    sequence:
      - service: chime_tts.say
        target:
          entity_id: "{{ entity_id }}"
        data:
          message: "{{ message | replace('\n', ' ') }}"
          volume_level: "{{ volume_level or 0.5 }}"
          cache: "{{ cache or 'false' }}"
          tts_platform: "{{ 'cloud' if is_state('binary_sensor.internet', 'on') else 'tts.piper' }}"
          chime_path: "{{ states('sensor.chime_path') }}"
          announce: true

  tts_url:
    alias: "TTS URL"
    description: >
      Generate a TTS sound file and return the URL.
      Returns a chime_tts dict with the URL in the 'url' attribute.
    fields:
      message:
        description: "The message to speak"
        example: "Hello world"
    sequence:
      - service: chime_tts.say_url
        response_variable: chime_tts
        data:
          message: "{{ message | replace('\n', ' ') }}"
          tts_platform: "{{ 'cloud' if is_state('binary_sensor.internet', 'on') else 'tts.piper' }}"
          chime_path: "{{ states('sensor.chime_path') }}"
      - stop: "Return chime_tts"
        response_variable: "chime_tts"

automation:
  - alias: "Set notification sounds options"
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - sensor.chime_tts_sounds
          - sensor.notification_sounds
      - platform: homeassistant
        event: start
    action:
      - variables:
          saved_option: "{{ states('input_text.notification_sound') }}"
      - service: input_select.set_options
        data_template:
          entity_id: input_select.notification_sound
          options: >
            {% set ns = namespace(ret=[]) %}
            {%- for file in state_attr('sensor.chime_tts_sounds', 'files') -%}
              {% set title = (file.replace('/config/custom_components/chime_tts/mp3s/','').replace('.mp3', '').replace('_', ' ')|title) %}
              {% set ns.ret = ns.ret + [title+': '+file] %}
            {%- endfor -%}
            {%- for file in state_attr('sensor.notification_sounds', 'files') -%}
              {% set title = file.replace('/media/Notifications/','').replace('.mp3', '').replace('/', ' - ') %}
              {% set ns.ret = ns.ret + [title+': '+file] %}
            {%- endfor -%}
            {{ ns.ret }}
      - service: input_select.select_option
        data_template:
          entity_id: input_select.notification_sound
          option: "{{ saved_option }}"

  - alias: "Save new notification sound"
    initial_state: true
    trigger:
      platform: state
      entity_id: input_select.notification_sound
      for:
        seconds: 1
    condition:
      - condition: state
        entity_id: binary_sensor.home_assistant_loaded
        state: "on"
    action:
      - service: input_text.set_value
        data_template:
          entity_id: input_text.notification_sound
          value: "{{ states('input_select.notification_sound') }}"

  - alias: "Announce notification sound changed"
    initial_state: true
    trigger:
      platform: state
      entity_id: input_text.notification_sound
    action:
      - service: script.voice_broadcast
        data:
          message: "Notifikationslyd Ã¦ndret"
