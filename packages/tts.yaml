sensor:
  - platform: template
    sensors:
      tts_greeting:
        value_template: >-
          {%- if now().hour < 4 -%}
            Godnat
          {%- elif now().hour < 10 -%}
            Godmorgen
          {%- elif now().hour < 14 -%}
            Goddag
          {%- elif now().hour < 17 -%}
            God eftermiddag
          {%- elif now().hour < 24 -%}
            Godaften
          {%- endif -%}
      chime_path:
        value_template: >-
          {{ states('input_text.notification_sound').split(': ')[1] }}

command_line:
  - sensor:
      name: Notification Sounds
      command: >-
        find /media/Notifications -type f -name '*.mp3' -print | jq -R -n -c '{"files": [inputs]}'
      value_template: "{{ value_json.files | length }}"
      json_attributes:
        - files
  - sensor:
      name: Chime TTS Sounds
      command: >-
        find /config/custom_components/chime_tts -type f -name '*.mp3' -print | jq -R -n -c '{"files": [inputs]}'
      value_template: "{{ value_json.files | length }}"
      json_attributes:
        - files

input_select:
  notification_sound:
    name: Notification Sound
    options:
      - unknown
    icon: mdi:music-note

input_text:
  notification_sound:
    name: Notification Sound
    icon: mdi:music-note

script:
  tts_speak:
    alias: "TTS Speak"
    description: "Speak a message using TTS"
    mode: parallel
    fields:
      message:
        description: "The message to speak. Can be a chime_tts segments list."
        example: "Hello world"
      volume_level:
        description: "The volume level to use (Default 0.5))"
        example: "0.5"
      cache:
        description: "Whether to cache the TTS file (Default false)"
        example: "false"
      entity_id:
        description: "The media player(s) to use"
        example: "media_player.stue"
      chime_path:
        description: "The path to the chime TTS files"
        example: "/media/Notifications/Pixel Sounds/Chime.mp3"
      offset:
        description: "The offset in milliseconds between the chime and the TTS"
        example: "-200"
    sequence:
      - variables:
          offset: "{{ offset|int if offset is defined and (offset|replace('-','')).isdigit() else -500 }}"
          is_segments: "{{ message is list and message[0] is mapping and message | selectattr('tts', 'defined') | list | length > 0 }}"
          chime_path: >-
            {% if chime_path is string and '/' in chime_path and '.' in chime_path %}
              {{ chime_path }}
            {% elif has_value('sensor.chime_path') %}
              {{ states('sensor.chime_path') }}
            {% else %}
              bells
            {% endif %}
      - action: chime_tts.say
        target:
          entity_id: "{{ entity_id }}"
        data:
          message: "{{ [dict(message[0], offset=offset)] + message[1:] if is_segments else message }}"
          volume_level: "{{ volume_level if (volume_level|replace('-','')).isdigit() else 0.5 }}"
          cache: "{{ bool(cache) if cache is defined else false }}"
          tts_platform: "{{ 'cloud' if is_state('binary_sensor.internet', 'on') else 'tts.piper' }}"
          chime_path: "{{ chime_path }}"
          offset: "{{ offset }}"
          announce: true

  tts_url:
    alias: "TTS URL"
    description: >
      Generate a TTS sound file and return the URL.
      Returns a chime_tts dict with the URL in the 'url' attribute.
    mode: parallel
    fields:
      message:
        description: "The message to speak. Can be a chime_tts segments list."
        example: "Hello world"
      cache:
        description: "Whether to cache the TTS file (Default false)"
        example: "false"
      chime_path:
        description: "The path to the chime TTS files"
        example: "/media/Notifications/Pixel Sounds/Chime.mp3"
      offset:
        description: "The offset in milliseconds between the chime and the TTS"
        example: "-200"
    sequence:
      - variables:
          offset: "{{ offset|int if (offset|replace('-','')).isdigit() else -500 }}"
          is_segments: "{{ message is list and message[0] is mapping and message | selectattr('tts', 'defined') | list | length > 0 }}"
          chime_path: >-
            {% if chime_path is string and '/' in chime_path and '.' in chime_path %}
              {{ chime_path }}
            {% elif has_value('sensor.chime_path') %}
              {{ states('sensor.chime_path') }}
            {% else %}
              bells
            {% endif %}
      - action: chime_tts.say_url
        response_variable: chime_tts
        data:
          message: "{{ [dict(message[0], offset=offset)] + message[1:] if is_segments else message }}"
          cache: "{{ true if cache else false }}"
          tts_platform: "{{ 'cloud' if is_state('binary_sensor.internet', 'on') else 'tts.piper' }}"
          chime_path: "{{ chime_path }}"
          offset: "{{ offset }}"
      - stop: "Return chime_tts"
        response_variable: "chime_tts"

  ai_language_detection:
    alias: "AI Language Detection"
    description: "Detect the language of a text using AI"
    mode: parallel
    fields:
      text:
        description: "The text to detect the language of"
        example: "Hello world"
    variables:
      prompt: |
        I have a task where I need to identify which parts of a given sentence are in Danish and which are in English.
        Additionally, I need the output to be in JSON format, where each segment of the sentence is categorized by language.
        Segments that are in the same language and are contiguous should be merged into a single segment.
        A segment is not necessarily bounded by punctuation, but by a change in language, and can be a single word like a proper noun.
        Any punctuation and spaces in the input text should be preserved.
        Opening and closing quotes should be kept within the same segment if possible, but does not necessarily mark the start or end of the segment.
        The JSON format should be a list of dictionaries, each containing the attributes "language" and "segment".
        Language should be an IETF language and region tag.

        Here is an example sentence:
        ```
        "Maybe," svarede Peter, "let's see how the weather holds up." Han tog en slurk af sin kaffe og strakte sig. Fuglene sang, og der var en let brise i luften.
        ```

        The output should look like this:
        [
          {"language": "en-US", "segment": "\"Maybe,\""},
          {"language": "da-DK", "segment": "svarede Peter,"},
          {"language": "en-US", "segment": "\"let's see how the weather holds up.\""},
          {"language": "da-DK", "segment": "Han tog en slurk af sin kaffe og strakte sig. Fuglene sang, og der var en let brise i luften."}
        ]

        Another example:
        ```
        Næste GDQ spil: Super "Sonic Saves the World" World, starter om 29 minutter
        ```

        The output should look like this:
        [
          {"language": "da-DK", "segment": "Næste GDQ spil: "},
          {"language": "en-US", "segment": "Super \"Sonic Saves the World\" World, "},
          {"language": "da-DK", "segment": "starter om 29 minutter"}
        ]

        Only provide the json formatted output, do not add any comments, greetings, or explanations.

        Please provide the solution for the following text:
        ```
        {{ text }}
        ```
    sequence:
      - action: conversation.process
        data:
          text: "{{ prompt }}"
          language: EN
          agent_id: 4e0a875b09f8a19a405e1bf3e5c4adac
        response_variable: agent
      - variables:
          response:
            # Some times the ai wraps the response in ```json ``` so we need to remove it.
            # Remove empty segments
            segments: >-
              {{
                agent.response.speech.plain.speech
                | regex_replace('```json\n', '')
                | regex_replace('```', '')
                | from_json
                | selectattr('segment', 'ne', '')
              }}
      - stop: "Return response"
        response_variable: "response"

  ai_tts_language_segments:
    alias: "AI TTS Language Segments"
    description: "Generate TTS segments for a message using AI"
    mode: parallel
    fields:
      message:
        description: "The message to speak"
        example: "Hello world"
    sequence:
      - action: script.ai_language_detection
        response_variable: response
        data:
          text: "{{ message }}"
      - variables:
          return:
            segments: >-
              {% set ns = namespace(ret=[]) %}

              {% for segment in response.segments %}
                {% set output = {
                  "tts": segment.segment,
                  "language": segment.language
                } %}
                {% set output = dict(output, **({"voice": "SteffanNeural"} if segment.language == 'en-US' else {})) %}
                {% set output = dict(output, **({"offset": -900} if not loop.first else {})) %}
                {% set ns.ret = ns.ret + [output] %}
              {% endfor %}

              {{ ns.ret }}

      - stop: "Return segments"
        response_variable: "return"

automation:
  - alias: "Set notification sounds options"
    initial_state: true
    triggers:
      - trigger: state
        entity_id:
          - sensor.chime_tts_sounds
          - sensor.notification_sounds
      - trigger: homeassistant
        event: start
    actions:
      - variables:
          saved_option: "{{ states('input_text.notification_sound') }}"
      - action: input_select.set_options
        data_template:
          entity_id: input_select.notification_sound
          options: >
            {% set ns = namespace(ret=[]) %}
            {%- for file in state_attr('sensor.chime_tts_sounds', 'files') -%}
              {% set title = (file.replace('/config/custom_components/chime_tts/mp3s/','').replace('.mp3', '').replace('_', ' ')|title) %}
              {% set ns.ret = ns.ret + [title+': '+file] %}
            {%- endfor -%}
            {%- for file in state_attr('sensor.notification_sounds', 'files') -%}
              {% set title = file.replace('/media/Notifications/','').replace('.mp3', '').replace('/', ' - ') %}
              {% set ns.ret = ns.ret + [title+': '+file] %}
            {%- endfor -%}
            {{ ns.ret }}
      - action: input_select.select_option
        data_template:
          entity_id: input_select.notification_sound
          option: "{{ saved_option }}"

  - alias: "Save new notification sound"
    initial_state: true
    triggers:
      trigger: state
      entity_id: input_select.notification_sound
      for:
        seconds: 1
    conditions:
      - condition: state
        entity_id: binary_sensor.home_assistant_loaded
        state: "on"
    actions:
      - action: input_text.set_value
        data_template:
          entity_id: input_text.notification_sound
          value: "{{ states('input_select.notification_sound') }}"

  - alias: "Announce notification sound changed"
    initial_state: true
    triggers:
      trigger: state
      entity_id: sensor.chime_path
      not_from:
        - "unknown"
        - "unavailable"
    actions:
      - action: script.voice_broadcast
        data:
          message: "Notifikationslyd ændret"
