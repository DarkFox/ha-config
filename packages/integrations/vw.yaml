homeassistant:
  customize:
    climate.id_3_pro_start_stop_climatization:
      optimistic: true

script:
  id_3_pro_send_destinations:
    alias: ID.3 Pro Send Destinations
    fields:
      destinations:
        name: Destinations
        description: List of destinations to send to the car.
        required: true
        example: |
          - name: VW Museum
            geoCoordinate:
              latitude: 52.4278793
              longitude: 10.8077433
          - name: Autostadt
            geoCoordinate:
              latitude: 52.429380
              longitude: 10.791520
            address:
              country: Germany
              street: StadtbrÃ¼cke
              zipCode: 38440
              city: Wolfsburg
        selector:
          object:
    sequence:
      - delay:
          seconds: 1
      # ---- Send destinations feature not yet ported to carconnectivity ----
      # - variables:
      #     destinations: "{{ destinations if destinations is list else [destinations] }}"
      # - action: volkswagen_we_connect_id.volkswagen_id_send_destinations
      #   data:
      #     vin: !secret vw_vin
      #     destinations: "{{ destinations }}"
      # - event: id_3_pro_destinations_sent
      #   event_data:
      #     destinations: "{{ destinations }}"

switch:
  - platform: template
    switches:
      id_3_pro_climatisation:
        friendly_name: ID.3 Pro Climatisation
        unique_id: 89f42f3d-9563-474f-ac2e-933c3076723f
        value_template: "{{ is_state('climate.id_3_pro_start_stop_climatization', 'on') }}"
        icon_template: "{{ 'mdi:hvac' if is_state('climate.id_3_pro_start_stop_climatization', 'auto') else 'mdi:hvac-off' }}"
        turn_on:
          action: climate.set_hvac_mode
          target:
            entity_id: climate.id_3_pro_start_stop_climatization
          data:
            hvac_mode: auto
        turn_off:
          action: climate.set_hvac_mode
          target:
            entity_id: climate.id_3_pro_start_stop_climatization
          data:
            hvac_mode: "off"

template:
  - trigger:
      - trigger: event
        event_type: call_service
        event_data:
          domain: climate
          service: set_hvac_mode
          service_data:
            entity_id: climate.id_3_pro_start_stop_climatization
      - trigger: state
        entity_id:
          - climate.id_3_pro_start_stop_climatization
          - binary_sensor.id_3_pro_connection_available
    binary_sensor:
      - name: "ID.3 Pro Climatisation Change Requested"
        unique_id: d439488a-a255-462b-9859-fdc1232679ed
        device_class: running
        state: >-
          {% if trigger.event is defined
                and is_state('binary_sensor.id_3_pro_connection_available', 'on') %}
            {{ not is_state('climate.id_3_pro_start_stop_climatization', trigger.event.data.get('hvac_mode')) }}
          {% else %}
            false
          {% endif %}

  - trigger:
      - trigger: event
        event_type: call_service
        event_data:
          domain: switch
          service_data:
            entity_id: switch.id_3_pro_start_stop_charging
      - trigger: state
        entity_id:
          - switch.id_3_pro_start_stop_charging
          - sensor.id_3_pro_charging_connector_state
          - binary_sensor.id_3_pro_connection_available
    binary_sensor:
      - name: "ID.3 Pro Charging Change Requested"
        unique_id: 0c1f8b2d-4a5e-4f6b-9c7d-8f1e2c3d4e5f
        device_class: running
        state: >-
          {% if trigger.event is defined
                and trigger.event.data.service in ['turn_on', 'turn_off']
                and is_state('binary_sensor.id_3_pro_connection_available', 'on')
                and is_state('sensor.id_3_pro_charging_connector_state', 'connected') %}
            {{ not is_state('switch.id_3_pro_start_stop_charging', trigger.event.data.service|replace('turn_', '')) }}
          {% else %}
            false
          {% endif %}

  - binary_sensor:
      - name: "ID.3 Pro Connection Available"
        unique_id: 447b80f0-fe0d-4ebd-ac53-d8a2f3f019cb
        device_class: connectivity
        state: "{{ states('sensor.id_3_pro_connection_state') in ['online', 'reachable'] }}"

      - name: "ID.3 Pro Klimatisering"
        unique_id: 3d153849-757e-4062-96b8-54aba1bfa44d
        state: "{{ is_state('climate.id_3_pro_start_stop_climatization', 'auto') }}"
        attributes:
          icon: "{{ 'mdi:hvac' if is_state('climate.id_3_pro_start_stop_climatization', 'auto') else 'mdi:hvac-off' }}"

      - name: ID.3 Pro Is Charging
        unique_id: e06d2312-821d-4bb9-8f66-78efa1bd6164
        state: "{{ is_state('sensor.id_3_pro_charging_state', 'charging') }}"
        attributes:
          icon: "{{ 'mdi:battery-charging' if not is_state('sensor.id_3_pro_charging_state', 'charging') else 'mdi:battery' }}"

  - sensor:
      - name: "ID.3 Pro Remaining Climatisation Time"
        unique_id: 0f4fbe08-72d5-4944-b00b-cf0e67e3ccf4
        icon: mdi:clock-end
        unit_of_measurement: "min"
        device_class: duration
        state: >-
          {%- set time = states('sensor.time') -%}
          {%- set remaining = states('sensor.id_3_pro_climatization_estimated_date_reached') | as_timestamp | int - as_timestamp(now()) | int -%}
          {{ (remaining / 60)|int if remaining > 0 else 0 }}

      - name: "ID.3 Pro Charging Time Remaining"
        unique_id: e9a7814e-c7d9-4fac-a56d-70b73b895dde
        icon: mdi:clock-end
        unit_of_measurement: "min"
        device_class: duration
        state: >-
          {%- set time = states('sensor.time') -%}
          {% set est_chrg = states('sensor.id_3_pro_charging_estimated_date_reached')|as_timestamp %}
          {% set now = now()|as_timestamp %}
          {% set remaining = (est_chrg - now)|int %}
          {{ (remaining / 60)|int if remaining > 0 else 0 }}

  - trigger:
      - trigger: event
        event_type: id_3_pro_destinations_sent
    sensor:
      - name: "ID.3 Pro Last Destinations Sent"
        unique_id: d10d7e15-db1c-423e-9c7f-b74e938282ba
        state: "{{ now() }}"
        device_class: timestamp
        attributes:
          destinations: "{{ trigger.event.data.get('destinations', []) }}"
          final_destination: "{{ trigger.event.data.get('destinations', [])|last }}"

automation:
  - alias: Force VW data update on phone notification
    id: 748368fc-75e1-4931-b0a4-63bb9f0e15e5
    initial_state: true
    mode: single
    triggers:
      - trigger: state
        entity_id: sensor.darkphone_last_notification_post_time
    conditions:
      - condition: state
        entity_id: sensor.darkphone_last_notification
        state: "com.volkswagen.weconnect"
    actions:
      - action: button.press
        target:
          entity_id: button.id_3_pro_wakeup

  - alias: "ID.3 Force Update During Climatisation Request"
    id: 6045309c-38ec-4bd9-828b-c812ff88b32e
    initial_state: false
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - binary_sensor.id_3_pro_climatisation_change_requested
          - binary_sensor.id_3_pro_charging_change_requested
        to: "on"
    conditions:
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.id_3_pro_climatisation_change_requested
            state: "on"
          - condition: state
            entity_id: binary_sensor.id_3_pro_charging_change_requested
            state: "on"
    action:
      - delay:
          seconds: 10
      - action: button.press
        target:
          entity_id: button.id_3_pro_wakeup

  - alias: "ID.3 Pro Notify destinations sent"
    id: 5b33950a-780e-4708-94b5-9276239e4a80
    initial_state: true
    triggers:
      - trigger: event
        event_type: id_3_pro_destinations_sent
    variables:
      destinations: "{{ trigger.event.data.get('destinations', []) }}"
      parts: "{{ destinations|length }}"
      final: "{{ destinations|last }}"
    actions:
      - action: notify.telegram_darkfox
        data:
          message: |
            {{ parts }} destination{{ 'er' if parts > 1 }} sendt til bilen:
            {% for d in destinations %}
              {%- set address = d.get('address') -%}
              - {{ d.get('name', 'Destination') }}{{ ': '~address.values()|reverse|list|join(', ') if address }}
            {% endfor %}
      - delay: 0.5
      - action: notify.telegram_darkfox
        data:
          message: "Destination"
          data:
            location:
              latitude: "{{ final.get('geoCoordinate', {}).get('latitude') }}"
              longitude: "{{ final.get('geoCoordinate', {}).get('longitude')}}"
