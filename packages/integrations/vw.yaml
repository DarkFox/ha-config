switch:
  - platform: template
    switches:
      id3_charging:
        friendly_name: ID3 Charging
        value_template: "{{ not is_state('sensor.id3_charging_mode', 'off') }}"
        icon_template: "{{ 'mdi:battery-charging' if not is_state('sensor.id3_charging_mode', 'off') else 'mdi:battery' }}"
        turn_on:
          service: volkswagen_we_connect_id.volkswagen_id_start_stop_charging
          data:
            vin: !secret vw_vin
            start_stop: "start"
        turn_off:
          service: volkswagen_we_connect_id.volkswagen_id_start_stop_charging
          data:
            vin: !secret vw_vin
            start_stop: "stop"

      id3_climatisation:
        friendly_name: ID3 Climatisation
        value_template: "{{ is_state('binary_sensor.id3_climatising', 'on') }}"
        icon_template: "{{ 'mdi:hvac' if is_state('binary_sensor.id3_climatising', 'on') else 'mdi:hvac-off' }}"
        turn_on:
          service: volkswagen_we_connect_id.volkswagen_id_set_climatisation
          data:
            vin: !secret vw_vin
            start_stop: "start"
        turn_off:
          service: volkswagen_we_connect_id.volkswagen_id_set_climatisation
          data:
            vin: !secret vw_vin
            start_stop: "stop"

      id3_reduced_ac_charging_speed:
        friendly_name: ID3 Reduced AC Charging Speed
        value_template: "{{ is_state('sensor.id3_max_charge_current_ac', 'reduced') }}"
        icon_template: mdi:flash
        turn_on:
          service: volkswagen_we_connect_id.volkswagen_id_set_ac_charge_speed
          data:
            vin: !secret vw_vin
            maximum_reduced: "reduced"
        turn_off:
          service: volkswagen_we_connect_id.volkswagen_id_set_ac_charge_speed
          data:
            vin: !secret vw_vin
            maximum_reduced: "maximum"

binary_sensor:
  - platform: template
    sensors:
      id3_climatising:
        friendly_name: "ID3 Klimatisering"
        value_template: "{{ states('sensor.id3_remaining_climatisation_time') | int > 0 }}"
        icon_template: "{{ 'mdi:hvac' if is_state('binary_sensor.id3_climatising', 'on') else 'mdi:hvac-off' }}"
      id3_charging:
        friendly_name: ID3 Is Charging
        value_template: "{{ is_state('sensor.id3_charging_state', 'charging') }}"
        icon_template: "{{ 'mdi:battery-charging' if not is_state('sensor.id3_charging', 'off') else 'mdi:battery' }}"

sensor:
  - platform: template
    sensors:
      id3_remaining_charging_time_to_complete:
        friendly_name: "ID3 Charging Time Remaining"
        value_template: "{{ (timedelta(minutes=states('sensor.id3_remaining_charging_time')|int)|string)[:-3] }}"
        icon_template: mdi:clock-end
      id3_charging_complete_at:
        friendly_name: ID3 Charging Complete At
        value_template: >-
          {%- if is_state('binary_sensor.id3_charging', 'on') -%}
            {%- set end_time = (states('sensor.id3_remaining_charging_time')|int*60) + (as_timestamp(now())|int) -%}
            {{ end_time | timestamp_custom('%Y-%m-%d %H:%M') }}
          {%- else -%}
            unknown
          {%- endif -%}
        icon_template: mdi:clock-end

rest_command:
  update_abrp:
    method: POST
    headers:
      authorization: !secret abrp_api_key
    content_type: "charset=utf-8; application/x-www-form-urlencoded"
    url: >
      {% set tlm = {
        "utc": int(as_timestamp(utcnow())),
        "soc": int(states('sensor.id3_state_of_charge')),
        "est_battery_range": float(states('sensor.id3_range')),
        "power": float(states('sensor.id3_charge_power')),
        "is_charging": bool(states('binary_sensor.id3_charging')),
        "is_dcfc": bool(is_state('sensor.id3_charge_type', 'dc'))
      } -%}
      https://api.iternio.com/1/tlm/send?token={{token}}&tlm={{tlm|to_json|urlencode}}

automation:
  - alias: Push car to ABRP
    initial_state: false
    mode: queued
    trigger:
      - platform: state
        entity_id:
          - sensor.id3_state_of_charge
          - sensor.id3_range
          - binary_sensor.id3_charging
          - sensor.id3_charge_type
      - platform: time_pattern
        minutes: "/8"
    action:
      - service: rest_command.update_abrp
        data:
          token: !secret abrp_token
