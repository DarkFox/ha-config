calendar:
  - platform: custom_caldav
    username: !secret caldav_user
    password: !secret caldav_pass
    url: !secret caldav_url
    days: 15
    calendars:
      - Personlig
      - Helligdage
      - Arbejdskalender
    custom_calendars:
      # - name: Vagt
      #   calendar: Vagtplan
      #   search: '((\d{2})R(\d{2})|R([W]?)) - .+'
      # - name: Arbejde
      #   calendar: Vagtplan
      #   search: '^(.*)(\d+)-(\d+).+'
      # - name: Fri
      #   calendar: Vagtplan
      #   search: &fri_regex "^(FRI|Afspadsering|Ferie|Andet fravær|Sygdom).+"
      # - name: Ferie
      #   calendar: Vagtplan
      #   search: "^(Ferie).+"
      - calendar: Arbejdskalender
        name: Vagt
        search: &vagt_regex "Vagt"
      - calendar: Arbejdskalender
        name: On-site
        search: &on_site_regex "(På RSH|På RSR)"
      - calendar: Arbejdskalender
        name: RSR
        search: &rsr_regex "På RSR"
      - calendar: Arbejdskalender
        name: RSH
        search: &rsh_regex "På RSH"
      - calendar: Arbejdskalender
        name: Off-site
        search: &off_site_regex "(Ude af huset|Kursus)"
      - calendar: Arbejdskalender
        name: Bil
        search: &work_bil_regex "(På RSH|På RSR|Kursus|Ude af huset)"
      - calendar: Arbejdskalender
        name: WFH
        search: &wfh_regex "(WFH|Arbejder hjemmefra)"
      - calendar: Arbejdskalender
        name: Vagtskema
        search: &vagtskema_regex "(På RSH|På RSR|Vagt|WFH|Arbejder hjemmefra|Kursus|Ude af huset)"
      - calendar: Arbejdskalender
        name: Ferie
        search: &ferie_regex "^(Ferie).+"
      - calendar: Personlig
        name: Bil
        search: &personlig_bil_regex >-
          \b(?:bil)\b|(?:[#([](?:bil)[)\]])
      - calendar: Personlig
        name: Transit
        search: &transit_regex >-
          \b(?:tog|rail|bus)\b|(?:[#([](?:tog|rail|bus)[)\]])

ics_calendar:
  calendars:
    # TODO: Switch to ics_calendar for external calendars.
    # Filter events in agenda sensors, instead of using filters feature and retreiving the same feed multiple times
    # Make the sensors emulate calendar entities, so they can be used the same way
    - name: "Arbejdskalender ICS"
      url: !secret work_calendar_url
      days: 7

    - name: "Vagtplan"
      url: !secret optima_ics_url
      days: 7

    - name: "TripIt"
      url: !secret tripit_calendar_url
      days: 31

template:
  - sensor:
      - name: Calendar Regexes
        state: "OK"
        attributes:
          ferie: *ferie_regex
          vagt: *vagt_regex
          on_site: *on_site_regex
          rsr: *rsr_regex
          rsh: *rsh_regex
          off_site: *off_site_regex
          wfh: *wfh_regex
          vagtskema: *vagtskema_regex
          work_bil: *work_bil_regex
          bil: *personlig_bil_regex
          transit: *transit_regex

      - name: Agenda
        state: >-
          {{ states('sensor.vagtplan_agenda')|int(0)
            + states('sensor.arbejde_agenda')|int(0)
            + states('sensor.personlig_agenda')|int(0)
            + states('sensor.tripit_agenda')|int(0) }}
        attributes:
          events: >-
            {% if has_value('sensor.vagtplan_agenda') and 'agenda' in states.sensor.vagtplan_agenda.attributes
              and has_value('sensor.arbejde_agenda') and 'agenda' in states.sensor.arbejde_agenda.attributes
              and has_value('sensor.personlig_agenda') and 'agenda' in states.sensor.personlig_agenda.attributes
              and has_value('sensor.tripit_agenda') and 'agenda' in states.sensor.tripit_agenda.attributes %}
              {{ (state_attr('sensor.vagtplan_agenda', 'agenda')
                + state_attr('sensor.arbejde_agenda', 'agenda')
                + state_attr('sensor.personlig_agenda', 'agenda')
                + state_attr('sensor.tripit_agenda', 'agenda'))|sort(attribute='start') | list }}
            {% else %}
              []
            {% endif %}

      - name: Agenda Tomorrow
        state: >-
          {% if has_value('sensor.vagtplan_agenda') and 'tomorrow' in states.sensor.vagtplan_agenda.attributes
            and has_value('sensor.arbejde_agenda') and 'tomorrow' in states.sensor.arbejde_agenda.attributes
            and has_value('sensor.personlig_agenda') and 'tomorrow' in states.sensor.personlig_agenda.attributes
            and has_value('sensor.tripit_agenda') and 'tomorrow' in states.sensor.tripit_agenda.attributes %}
              {{ state_attr('sensor.vagtplan_agenda', 'tomorrow')|length
                + state_attr('sensor.arbejde_agenda', 'tomorrow')|length
                + state_attr('sensor.personlig_agenda', 'tomorrow')|length
                + state_attr('sensor.tripit_agenda', 'tomorrow')|length }}
            {% else %}
              0
            {% endif %}
        attributes:
          events: >-
            {% if has_value('sensor.vagtplan_agenda') and 'tomorrow' in states.sensor.vagtplan_agenda.attributes
              and has_value('sensor.arbejde_agenda') and 'tomorrow' in states.sensor.arbejde_agenda.attributes
              and has_value('sensor.personlig_agenda') and 'tomorrow' in states.sensor.personlig_agenda.attributes
              and has_value('sensor.tripit_agenda') and 'tomorrow' in states.sensor.tripit_agenda.attributes %}
              {{ (state_attr('sensor.vagtplan_agenda', 'tomorrow')
                + state_attr('sensor.arbejde_agenda', 'tomorrow')
                + state_attr('sensor.personlig_agenda', 'tomorrow')
                + state_attr('sensor.tripit_agenda', 'tomorrow'))|sort(attribute='start') | list }}
            {% else %}
              []
            {% endif %}

      - name: Full Agenda
        state: >-
          {{ states('sensor.agenda')|int(0)
            + states('sensor.agenda_tomorrow')|int(0) }}
        attributes:
          events: >-
            {% set agendas = [state_attr('sensor.agenda', 'events'),
                              state_attr('sensor.agenda_tomorrow', 'events')] %}
            {% if (agendas | select('!=', None) | list | length) > 0 %}
              {{ (state_attr('sensor.agenda', 'events')
                + state_attr('sensor.agenda_tomorrow', 'events'))|sort(attribute='start') | list }}
            {% else %}
              []
            {% endif %}

      - name: Current Event
        state: >-
          {% set event = state_attr('sensor.current_event', 'event') or {} %}
          {{ event.get('summary', 'Ingen') }}
        attributes:
          event: >-
            {% set now = now()|as_timestamp|timestamp_custom('%Y-%M-%d %H:%m:%S') %}
            {% set event = state_attr('sensor.full_agenda', 'events')|selectattr('start', 'le', now)|selectattr('end', 'ge', now)|list|first %}
            {{ event if event is defined else None }}
          calendar: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('calendar', None) }}
          start: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('start', None) }}
          end: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('end', None) }}
          location: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('location', None) }}
          description: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('description', None) }}
          travel: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('travel', None) }}
          bil: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('bil', None) }}
          wake: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('wake', None) }}
          summary: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('summary', None) }}

      - name: Upcoming Events
        state: >-
          {% set start = now().strftime('%Y-%m-%d %H:%M:%S') %}
          {% set end = (now() + timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S') %}
          {{ state_attr('sensor.full_agenda', 'events')|selectattr('start', 'ge', start)|selectattr('start', 'lt', end)|list|length }}
        attributes:
          events: >-
            {% set start = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {% set end = (now() + timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S') %}
            {{ state_attr('sensor.full_agenda', 'events')|selectattr('start', 'ge', start)|selectattr('start', 'lt', end)|list }}

      - name: Next personal event start clock
        unique_id: a001219d-0724-46b4-9af9-a5f13532a397
        state: >-
          {% if has_value('calendar.personlig') and 'start_time' in states.calendar.personlig.attributes %}
            {{ state_attr('calendar.personlig', 'start_time').split(' ')[1][:-3] }}
          {% else %}
            unknown
          {% endif %}

      - name: Days to next personal event
        state: >-
          {% from 'easy_time.jinja' import count_the_days %}
          {% if has_value('calendar.personlig') and 'start_time' in states.calendar.personlig.attributes %}
            {% set start_time = state_attr('calendar.personlig', 'start_time') | as_datetime | as_local %}
            {{ count_the_days(start_time) }}
          {% else %}
            unknown
          {% endif %}

      - name: Next Work Event
        state: >-
          {% set event = state_attr('sensor.arbejde_agenda', 'agenda')|selectattr('end', 'ge', (now()|string))|list|first %}
          {{ event.summary if event is defined else 'Ingen' }}
        attributes:
          event: >-
            {% set event = state_attr('sensor.arbejde_agenda', 'agenda')|selectattr('end', 'ge', (now()|string))|list|first %}
            {{ event if event is defined else None }}
          start_time: >-
            {% set event = state_attr('sensor.arbejde_agenda', 'agenda')|selectattr('end', 'ge', (now()|string))|list|first %}
            {{ event.start.split(' ')[1][:-3] if event is defined else None }}

mqtt:
  sensor:
    - name: Vagtplan Agenda
      state_topic: virtual/agenda/vagtplan/state
      json_attributes_topic: virtual/agenda/vagtplan/events
      unit_of_measurement: "events"
    - name: Arbejde Agenda
      state_topic: virtual/agenda/arbejde/state
      json_attributes_topic: virtual/agenda/arbejde/events
      unit_of_measurement: "events"
    - name: Personlig Agenda
      state_topic: virtual/agenda/personlig/state
      json_attributes_topic: virtual/agenda/personlig/events
      unit_of_measurement: "events"
    - name: Tripit Agenda
      state_topic: virtual/agenda/tripit/state
      json_attributes_topic: virtual/agenda/tripit/events
      unit_of_measurement: "events"

automation:
  - id: update_vagtplan_agenda
    alias: Update Vagtplan Agenda
    initial_state: true
    trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "/30"
        seconds: "0"
      - platform: state
        entity_id:
          - calendar.arbejdskalender_vagtskema
          - calendar.arbejdskalender
      - platform: state
        entity_id: binary_sensor.home_assistant_loaded
        to: "on"
    action:
      - service: calendar.get_events
        data:
          start_date_time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          end_date_time: "{{ (now() + timedelta(days=1)).strftime('%Y-%m-%d') }} 23:59:59"
        target:
          entity_id: calendar.arbejdskalender_vagtskema
        response_variable: all_events
      - variables:
          split_time: "{{ ((now().strftime('%Y-%m-%d') + ' 23:59:59')|as_datetime|as_local).isoformat() }}"
          agenda: "{{ all_events['calendar.arbejdskalender_vagtskema'].events | selectattr('start', 'lt', split_time) | list }}"
          tomorrow: "{{ all_events['calendar.arbejdskalender_vagtskema'].events | selectattr('start', 'ge', split_time) | list }}"
      - wait_template: "{{ is_state('sensor.calendar_regexes', 'OK') }}"
        timeout:
          seconds: 30
      - service: mqtt.publish
        data:
          topic: virtual/agenda/vagtplan/events
          retain: true
          payload: >
            {% from 'agenda.jinja' import agenda_event %}
            {%- set regexes = states.sensor.calendar_regexes.attributes -%}
            {%- set bool_attrs = {
              'travel': [regexes.transit, regexes.work_bil, regexes.bil],
              'bil': [regexes.work_bil, regexes.bil],
              'wake': [regexes.work_bil, regexes.bil, regexes.wfh],
            } -%}
            {
              "agenda": [
                {% for event in agenda|sort(attribute='start') | list -%}
                  {{ agenda_event("Vagtplan", event, regexes, bool_attrs) }}{%- if not loop.last %},{% endif %}
                {%- endfor -%}
              ],
              "tomorrow": [
                {% for event in tomorrow|sort(attribute='start') | list -%}
                  {{ agenda_event("Vagtplan", event, regexes, bool_attrs) }}{%- if not loop.last %},{% endif %}
                {%- endfor -%}
              ]
            }

  - id: update_vagtplan_agenda_state
    alias: Update Vagtplan Agenda State
    initial_state: true
    trigger:
      - platform: mqtt
        topic: virtual/agenda/vagtplan/events
    action:
      - service: mqtt.publish
        data:
          topic: virtual/agenda/vagtplan/state
          retain: true
          payload: "{{ trigger.payload_json.agenda | length }}"

  - id: update_arbejde_agenda
    alias: Update Arbejde Agenda
    initial_state: true
    trigger:
      - platform: mqtt
        topic: virtual/agenda/vagtplan/events
    action:
      - delay:
          seconds: 5
      - variables:
          vagtplan: "{{ (state_attr('sensor.vagtplan_agenda', 'agenda') or []) + (state_attr('sensor.vagtplan_agenda', 'tomorrow') or []) }}"
          next_shift: "{{ vagtplan[0] if vagtplan else none }}"
      - service: calendar.get_events
        data:
          start_date_time: "{{ next_shift['start'] if next_shift else '1970-01-01 00:00:00' }}"
          end_date_time: "{{ next_shift['end'] if next_shift else '1970-01-01 00:00:00' }}"
        target:
          entity_id: calendar.arbejdskalender
        response_variable: all_events
      - variables:
          split_time: "{{ ((now().strftime('%Y-%m-%d') + ' 23:59:59')|as_datetime|as_local).isoformat() }}"
          agenda: "{{ all_events['calendar.arbejdskalender'].events | selectattr('start', 'lt', split_time) | list }}"
          tomorrow: "{{ all_events['calendar.arbejdskalender'].events | selectattr('start', 'ge', split_time) | list }}"
      - wait_template: "{{ is_state('sensor.calendar_regexes', 'OK') }}"
        timeout:
          seconds: 30
      - service: mqtt.publish
        data:
          topic: virtual/agenda/arbejde/events
          retain: true
          payload: >
            {% from 'agenda.jinja' import agenda_event %}
            {%- set regexes = states.sensor.calendar_regexes.attributes -%}
            {%- set bool_attrs = {
              'travel': [regexes.transit, regexes.work_bil, regexes.bil],
              'bil': [regexes.work_bil, regexes.bil],
              'wake': [regexes.work_bil, regexes.bil, regexes.wfh],
            } -%}
            {%- set ns = namespace(events=[],tomorrow=[]) -%}
            {%- for event in agenda|sort(attribute='start') | list -%}
                {%- if not (event.summary|regex_match('På (RSR|RSH)|Frokost|Aftensmad|Vagt|Fri|Opstartstid')) -%}
                  {%- set ns.events = ns.events + [event] -%}
                {%- endif -%}
            {%- endfor -%}
            {%- for event in tomorrow|sort(attribute='start') | list -%}
                {%- if not (event.summary|regex_match('På (RSR|RSH)|Frokost|Aftensmad|Vagt|Fri|Opstartstid')) -%}
                  {%- set ns.tomorrow = ns.tomorrow + [event] -%}
                {%- endif -%}
            {%- endfor -%}
            {
              "agenda": [
                {% for event in ns.events %}
                  {{ agenda_event("Arbejdskalender", event, regexes, bool_attrs) }}{%- if not loop.last %},{% endif %}
                {% endfor %}
              ],
              "tomorrow": [
                {% for event in ns.tomorrow %}
                  {{ agenda_event("Arbejdskalender", event, regexes, bool_attrs) }}{%- if not loop.last %},{% endif %}
                {% endfor %}
              ]
            }

  - id: update_arbejde_agenda_state
    alias: Update Arbejde Agenda State
    initial_state: true
    trigger:
      - platform: mqtt
        topic: virtual/agenda/arbejde/events
    action:
      - service: mqtt.publish
        data:
          topic: virtual/agenda/arbejde/state
          retain: true
          payload: "{{ trigger.payload_json.agenda | length }}"

  - id: update_personlig_agenda
    alias: Update Personlig Agenda
    initial_state: true
    trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "/30"
        seconds: "0"
      - platform: state
        entity_id: caldndar.personlig
      - platform: state
        entity_id: binary_sensor.home_assistant_loaded
        to: "on"
    action:
      - service: calendar.get_events
        data:
          start_date_time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          end_date_time: "{{ (now() + timedelta(days=1)).strftime('%Y-%m-%d') }} 23:59:59"
        target:
          entity_id: calendar.personlig
        response_variable: all_events
      - variables:
          split_time: "{{ ((now().strftime('%Y-%m-%d') + ' 23:59:59')|as_datetime|as_local).isoformat() }}"
          agenda: "{{ all_events['calendar.personlig'].events | selectattr('start', 'lt', split_time) | list }}"
          tomorrow: "{{ all_events['calendar.personlig'].events | selectattr('start', 'ge', split_time) | list }}"
      - wait_template: "{{ is_state('sensor.calendar_regexes', 'OK') }}"
        timeout:
          seconds: 30
      - service: mqtt.publish
        data:
          topic: virtual/agenda/personlig/events
          retain: true
          payload: >
            {% from 'agenda.jinja' import agenda_event %}
            {%- set regexes = states.sensor.calendar_regexes.attributes -%}
            {%- set bool_attrs = {
              'travel': [regexes.transit, regexes.bil],
              'bil': [regexes.bil],
              'transit': [regexes.transit],
              'wake': [{
                'negate': true,
                'regex': '.*(#nowake).*'
              }],
            } -%}
            {
              "agenda": [
                {% for event in agenda|sort(attribute='start') | list -%}
                  {{ agenda_event("Personlig kalender", event, regexes, bool_attrs) }}{%- if not loop.last %},{% endif %}
                {%- endfor -%}
              ],
              "tomorrow": [
                {% for event in tomorrow|sort(attribute='start') | list -%}
                  {{ agenda_event("Personlig kalender", event, regexes, bool_attrs) }}{%- if not loop.last %},{% endif %}
                {%- endfor -%}
              ]
            }

  - id: update_personlig_agenda_state
    alias: Update Personlig Agenda State
    initial_state: true
    trigger:
      - platform: mqtt
        topic: virtual/agenda/personlig/events
    action:
      - service: mqtt.publish
        data:
          topic: virtual/agenda/personlig/state
          retain: true
          payload: "{{ trigger.payload_json.agenda | length }}"

  - id: update_tripit_agenda
    alias: Update Tripit Agenda
    initial_state: true
    trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "/30"
        seconds: "0"
      - platform: state
        entity_id: calendar.tripit
      - platform: state
        entity_id: binary_sensor.home_assistant_loaded
        to: "on"
    action:
      - service: calendar.get_events
        data:
          start_date_time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          end_date_time: "{{ (now() + timedelta(days=1)).strftime('%Y-%m-%d') }} 23:59:59"
        target:
          entity_id: calendar.tripit
        response_variable: all_events
      - variables:
          split_time: "{{ ((now().strftime('%Y-%m-%d') + ' 23:59:59')|as_datetime|as_local).isoformat() }}"
          agenda: "{{ all_events['calendar.tripit'].events | selectattr('start', 'lt', split_time) | list }}"
          tomorrow: "{{ all_events['calendar.tripit'].events | selectattr('start', 'ge', split_time) | list }}"
      - wait_template: "{{ is_state('sensor.calendar_regexes', 'OK') }}"
        timeout:
          seconds: 30
      - service: mqtt.publish
        data:
          topic: virtual/agenda/tripit/events
          retain: true
          payload: >
            {% from 'agenda.jinja' import agenda_event %}
            {%- set regexes = states.sensor.calendar_regexes.attributes -%}
            {%- set bool_attrs = {
              'travel': [regexes.transit, regexes.bil],
              'bil': [regexes.bil],
              'transit': [regexes.transit],
              'flight': ['.*(Flight).*'],
              'wake': [{
                'negate': true,
                'regex': '.*( Eberhardt is in ).*'
              }]
            } -%}
            {%- set attrs = {
              'type': '\[(.+)\](?: (?:.+) -)* (?:.+) to (?:.+)',
              'carrier': '\[(?:.+)\](?: (.+) -)* (?:.+) to (?:.+)',
              'from': '\[(?:.+)\](?: (?:.+) -)* (.+) to (?:.+)',
              'to': '\[(?:.+)\](?: (?:.+) -)* (?:.+) to (.+)'
            } -%}
            {
              "agenda": [
                {% for event in agenda|sort(attribute='start') | list -%}
                  {%- if ((event.get('end') | as_timestamp) - (event.get('start') | as_timestamp))/60/60 > 47 -%}
                    {%- continue -%}
                  {%- endif -%}
                  {{ agenda_event("Tripit Kalender", event, regexes, bool_attrs, attrs) }}{%- if not loop.last %},{% endif %}
                {%- endfor -%}
              ],
              "tomorrow": [
                {% for event in tomorrow|sort(attribute='start') | list -%}
                  {%- if ((event.get('end') | as_timestamp) - (event.get('start') | as_timestamp))/60/60 > 47 -%}
                    {%- continue -%}
                  {%- endif -%}
                  {{ agenda_event("Tripit Kalender", event, regexes, bool_attrs, attrs) }}{%- if not loop.last %},{% endif %}
                {%- endfor -%}
              ]
            }

  - id: update_tripit_agenda_state
    alias: Update Tripit Agenda State
    initial_state: true
    trigger:
      - platform: mqtt
        topic: virtual/agenda/tripit/events
    action:
      - service: mqtt.publish
        data:
          topic: virtual/agenda/tripit/state
          retain: true
          payload: "{{ trigger.payload_json.agenda | length }}"
