calendar:
  - platform: custom_caldav
    username: !secret caldav_user
    password: !secret caldav_pass
    url: !secret caldav_url
    days: 15
    calendars:
      - Personlig
      - Helligdage
      - Arbejdskalender
    custom_calendars:
      # - name: Vagt
      #   calendar: Vagtplan
      #   search: '((\d{2})R(\d{2})|R([W]?)) - .+'
      # - name: Arbejde
      #   calendar: Vagtplan
      #   search: '^(.*)(\d+)-(\d+).+'
      # - name: Fri
      #   calendar: Vagtplan
      #   search: &fri_regex "^(FRI|Afspadsering|Ferie|Andet fravær|Sygdom).+"
      # - name: Ferie
      #   calendar: Vagtplan
      #   search: "^(Ferie).+"
      - calendar: Arbejdskalender
        name: Vagt
        search: &vagt_regex "Vagt"
      - calendar: Arbejdskalender
        name: On-site
        search: &on_site_regex "(På RSH|På RSR)"
      - calendar: Arbejdskalender
        name: RSR
        search: &rsr_regex "På RSR"
      - calendar: Arbejdskalender
        name: RSH
        search: &rsh_regex "På RSH"
      - calendar: Arbejdskalender
        name: Off-site
        search: &off_site_regex "(Ude af huset|Kursus)"
      - calendar: Arbejdskalender
        name: Bil
        search: &work_bil_regex "(På RSH|På RSR|Kursus|Ude af huset)"
      - calendar: Arbejdskalender
        name: WFH
        search: &wfh_regex "(WFH|Arbejder hjemmefra)"
      - calendar: Arbejdskalender
        name: Vagtskema
        search: &vagtskema_regex "(På RSH|På RSR|Vagt|WFH|Arbejder hjemmefra|Kursus|Ude af huset)"
      - calendar: Arbejdskalender
        name: Ferie
        search: &ferie_regex "^(Ferie).+"
      - calendar: Personlig
        name: Bil
        search: &personlig_bil_regex >-
          \b(?:bil)\b|(?:[#([](?:bil)[)\]])
      - calendar: Personlig
        name: Transit
        search: &transit_regex >-
          \b(?:tog|rail|bus)\b|(?:[#([](?:tog|rail|bus)[)\]])

ics_calendar:
  calendars:
    # TODO: Switch to ics_calendar for external calendars.
    # Filter events in agenda sensors, instead of using filters feature and retreiving the same feed multiple times
    # Make the sensors emulate calendar entities, so they can be used the same way
    - name: "Arbejdskalender ICS"
      url: !secret work_calendar_url
      days: 7

    - name: "Vagtplan"
      url: !secret optima_ics_url
      days: 7

    - name: "Tripit"
      url: !secret tripit_calendar_url
      days: 31

template:
  - trigger:
      platform: event
      event_type: calendar_updated
      event_data:
        calendar: Personlig Kalender
    binary_sensor:
      - name: Personlig Kalender
        unique_id: ccc9b0d0-6f0c-4248-abed-96fe280f4199
        state: >-
          {%- from 'agenda.jinja' import current_events -%}
          {%- set events = trigger.event.data.get('events', [])  -%}
          {%- set time = trigger.event.data.get('time') -%}
          {{ 
            'on' if current_events(events, time) | from_json
            else 'off'
          }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          current: >-
            {%- from 'agenda.jinja' import current_events -%}
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {{ current_events(events, time) | from_json }}
          coming: >-
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {% from 'agenda.jinja' import coming_events %}
            {{ coming_events(events, time) | from_json }}
          next: >-
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {% from 'agenda.jinja' import coming_events %}
            {{ coming_events(events, time) | from_json | first }}
          agenda: >-
            {% from 'agenda.jinja' import agenda %}
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {{ agenda(events, time) | from_json }}

  - trigger:
      platform: event
      event_type: calendar_updated
      event_data:
        calendar: Arbejdskalender
    binary_sensor:
      - name: Arbejdskalender
        unique_id: 44f4d46e-d205-4197-b4e7-3bd74fe863d7
        state: >-
          {%- from 'agenda.jinja' import current_events -%}
          {%- set events = trigger.event.data.get('events', [])  -%}
          {%- set time = trigger.event.data.get('time') -%}
          {{ 
            'on' if current_events(events, time, 'vagtskema', 'false') | from_json
            else 'off'
          }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          current: >-
            {%- from 'agenda.jinja' import current_events -%}
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {{ current_events(events, time, 'vagtskema', 'false') | from_json }}
          coming: >-
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {% from 'agenda.jinja' import coming_events %}
            {{ coming_events(events, time, 'vagtskema', 'false') | from_json }}
          next: >-
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {% from 'agenda.jinja' import coming_events %}
            {{ coming_events(events, time, 'vagtskema', 'false') | from_json | first }}
          agenda: >-
            {% from 'agenda.jinja' import agenda %}
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {{ agenda(events, time, 'vagtskema', 'false') | from_json }}

      - name: Vagtskema
        unique_id: 4358bb80-df4c-46cc-91f3-4d16696afcfe
        state: >-
          {%- from 'agenda.jinja' import current_events -%}
          {%- set events = trigger.event.data.get('events', [])  -%}
          {%- set time = trigger.event.data.get('time') -%}
          {{ 
            'on' if current_events(events, time, 'vagtskema') | from_json
            else 'off'
          }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          current: >-
            {%- from 'agenda.jinja' import current_events -%}
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {{ current_events(events, time, 'vagtskema') | from_json }}
          coming: >-
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {% from 'agenda.jinja' import coming_events %}
            {{ coming_events(events, time, 'vagtskema') | from_json }}
          next: >-
            {% from 'agenda.jinja' import coming_events %}
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {{ coming_events(events, time, 'vagtskema') | from_json | first }}
          agenda: >-
            {% from 'agenda.jinja' import agenda %}
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {{ agenda(events, time, 'vagtskema') | from_json }}

  - trigger:
      platform: event
      event_type: calendar_updated
      event_data:
        calendar: Tripit Kalender
    binary_sensor:
      - name: Tripit Kalender
        unique_id: 21278853-7e27-4cf4-a0d5-4cb8276b7c51
        state: >-
          {%- from 'agenda.jinja' import current_events -%}
          {%- set events = trigger.event.data.get('events', [])  -%}
          {%- set time = trigger.event.data.get('time') -%}
          {{ 
            'on' if current_events(events, time) | from_json
            else 'off'
          }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          current: >-
            {%- from 'agenda.jinja' import current_events -%}
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {{ current_events(events, time) | from_json }}
          coming: >-
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {% from 'agenda.jinja' import coming_events %}
            {{ coming_events(events, time) | from_json }}
          next: >-
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {% from 'agenda.jinja' import coming_events %}
            {{ coming_events(events, time) | from_json | first }}
          agenda: >-
            {% from 'agenda.jinja' import agenda %}
            {%- set events = trigger.event.data.get('events', [])  -%}
            {%- set time = trigger.event.data.get('time') -%}
            {{ agenda(events, time) | from_json }}

  - sensor:
      - name: Calendar Regexes
        unique_id: 27781f7b-68e2-4792-b662-12e48fb6ae62
        state: "OK"
        attributes:
          ferie: *ferie_regex
          vagt: *vagt_regex
          on_site: *on_site_regex
          rsr: *rsr_regex
          rsh: *rsh_regex
          off_site: *off_site_regex
          wfh: *wfh_regex
          vagtskema: *vagtskema_regex
          work_bil: *work_bil_regex
          bil: *personlig_bil_regex
          transit: *transit_regex

      - name: Full Agenda
        unique_id: 8abe262f-996a-46c0-bcba-c531dfa3580b
        state: >-
          {%- from 'utils.jinja' import attr_has_value -%}
          {%- if attr_has_value('sensor.full_agenda', 'events') == 'True' -%}
            {{ state_attr('sensor.full_agenda', 'events') | length }}
          {%- else -%}
            unknown
          {%- endif %}
        attributes:
          events: >-
            {%- from 'agenda.jinja' import gather_events -%}
            {%- set calendars = [
              'binary_sensor.personlig_kalender',
              'binary_sensor.arbejdskalender',
              'binary_sensor.vagtskema',
              'binary_sensor.tripit_kalender'
            ] -%}
            {{ gather_events(calendars) }}

      - name: Upcoming Events
        unique_id: d67348e6-f91d-4bb0-9efd-b9b7f9be5c52
        state: >-
          {%- from 'utils.jinja' import attr_has_value -%}
          {%- if attr_has_value('sensor.upcoming_events', 'events') == 'True' -%}
            {{ state_attr('sensor.upcoming_events', 'events') | length }}
          {%- else -%}
            unknown
          {%- endif %}
        attributes:
          events: >-
            {%- from 'agenda.jinja' import gather_events -%}
            {%- set calendars = [
              'binary_sensor.personlig_kalender',
              'binary_sensor.arbejdskalender',
              'binary_sensor.vagtskema',
              'binary_sensor.tripit_kalender'
            ] -%}
            {{ gather_events(calendars, 'coming') }}

      - name: Agenda
        unique_id: 8bc46f96-116a-4a6a-b2a0-ca29839a6b0f
        state: >-
          {%- from 'utils.jinja' import attr_has_value -%}
          {%- if attr_has_value('sensor.agenda', 'events') == 'True' -%}
            {{ state_attr('sensor.agenda', 'events') | length }}
          {%- else -%}
            unknown
          {%- endif %}
        attributes:
          events: >-
            {% set end = now().strftime('%Y-%m-%d') + " 23:59:59" %}
            {% if has_value('sensor.full_agenda') and 'events' in states.sensor.full_agenda.attributes %}
              {{
                state_attr('sensor.full_agenda', 'events')
                  | selectattr('start', 'le', end)
                  | sort(attribute='start') | list
              }}
            {% else %}
              []
            {% endif %}

      - name: Agenda Tomorrow
        unique_id: 19ec5fa1-2339-49c4-870d-4ce02ebd5c2a
        state: >-
          {%- from 'utils.jinja' import attr_has_value -%}
          {%- if attr_has_value('sensor.agenda_tomorrow', 'events') == 'True' -%}
            {{ state_attr('sensor.agenda_tomorrow', 'events') | length }}
          {%- else -%}
            unknown
          {%- endif %}
        attributes:
          events: >-
            {% set start = (now()+timedelta(days=1)).strftime('%Y-%m-%d') + " 00:00:00" %}
            {% set end = (now()+timedelta(days=1)).strftime('%Y-%m-%d') + " 23:59:59" %}
            {% if has_value('sensor.full_agenda') and 'events' in states.sensor.full_agenda.attributes %}
              {{
                state_attr('sensor.full_agenda', 'events')
                  | selectattr('end', 'ge', start)
                  | selectattr('start', 'le', end)
                  | sort(attribute='start') | list
              }}
            {% else %}
              []
            {% endif %}

      - name: Current Event
        unique_id: d50945ac-45ff-46e2-8d75-f84d5c51a1b5
        state: >-
          {% set event = state_attr('sensor.current_event', 'event') or {} %}
          {{ event.get('summary', 'Ingen') }}
        attributes:
          event: >-
            {% set now = now()|as_timestamp|timestamp_custom('%Y-%M-%d %H:%m:%S') %}
            {% set event = state_attr('sensor.full_agenda', 'events')
                            | selectattr('start', 'le', now)
                            | selectattr('end', 'ge', now)
                            | sort(attribute='duration')
                            | list
                            | first %}
            {{ event if event is defined else None }}
          calendar: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('calendar', None) }}
          start: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('start', None) }}
          end: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('end', None) }}
          location: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('location', None) }}
          description: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('description', None) }}
          travel: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('travel', None) }}
          bil: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('bil', None) }}
          wake: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('wake', None) }}
          summary: >-
            {% set event = state_attr('sensor.current_event', 'event') or {} %}
            {{ event.get('summary', None) }}

      - name: Next Work Event
        unique_id: 5ce01854-aa4a-48a3-870d-2a25cf23a5bb
        state: >-
          {% set event = state_attr('binary_sensor.arbejdskalender', 'next')| list | first %}
          {{ event.summary if event is defined else 'Ingen' }}
        attributes:
          event: >-
            {% set event = state_attr('binary_sensor.arbejdskalender', 'next')| list | first %}
            {{ event if event is defined else None }}
          start_time: >-
            {% set event = state_attr('binary_sensor.arbejdskalender', 'next')| list | first %}
            {{ event.start.split(' ')[1][:-3] if event is defined else None }}

automation:
  - alias: Update Personal Calendar
    id: 16e9122a-c1c4-4966-9040-1dc133e2e009
    initial_state: true
    mode: restart
    trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "/15"
        seconds: "0"
      - platform: state
        entity_id: calendar.personlig
      - platform: state
        entity_id: binary_sensor.home_assistant_loaded
        to: "on"
        for:
          seconds: 10
      - platform: state
        entity_id: sensor.calendar_regexes
    variables:
      calendar_entity: calendar.personlig
      calendar_name: "Personlig Kalender"
      regexes: "{{ states.sensor.calendar_regexes.attributes }}"
      bool_attrs:
        travel: "{{ [regexes.transit, regexes.bil] }}"
        bil: "{{ [regexes.bil] }}"
        transit: "{{ [regexes.transit] }}"
        wake: "{{ [{'negate': true, 'regex': '.*(#nowake).*'}] }}"
    action:
      - service: calendar.get_events
        data:
          start_date_time: "{{ (now() + timedelta(days=-1)).strftime('%Y-%m-%d') }} 00:00:00"
          end_date_time: "{{ (now() + timedelta(days=1)).strftime('%Y-%m-%d') }} 23:59:59"
        target:
          entity_id: "{{ calendar_entity}}"
        response_variable: all_events
      - variables:
          agenda_events: >-
            {% from 'agenda.jinja' import agenda_event %}
            {% set ns = namespace(ret=[]) %}
            {% for event in all_events[calendar_entity].events | sort(attribute='start') | list -%}
              {% set ns.ret = ns.ret + [agenda_event(calendar_name, dict(event, location=none), regexes, bool_attrs)|from_json] %}
            {%- endfor -%}
            {{ ns.ret }}
      - event: "calendar_updated"
        event_data:
          calendar: "{{ calendar_name }}"
          time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          events: "{{ agenda_events }}"

  - alias: Update Work Calendar
    id: ada86b2e-be99-4b82-b53f-da58547a0b3c
    initial_state: true
    mode: restart
    trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "/15"
        seconds: "0"
      - platform: state
        entity_id: calendar.arbejdskalender_ics
      - platform: state
        entity_id: binary_sensor.home_assistant_loaded
        to: "on"
        for:
          seconds: 10
      - platform: state
        entity_id: sensor.calendar_regexes
    variables:
      calendar_entity: calendar.arbejdskalender_ics
      calendar_name: "Arbejdskalender"
      regexes: "{{ states.sensor.calendar_regexes.attributes }}"
      bool_attrs:
        travel: "{{ [regexes.transit, regexes.work_bil, regexes.bil] }}"
        bil: "{{ [regexes.work_bil, regexes.bil] }}"
        wake: "{{ [regexes.work_bil, regexes.bil, regexes.wfh] }}"
        vagtskema: "{{ [regexes.vagtskema] }}"
        vagt: "{{ [regexes.vagt] }}"
        on_site: "{{ [regexes.on_site] }}"
        off_site: "{{ [regexes.off_site] }}"
        rsr: "{{ [regexes.rsr] }}"
        rsh: "{{ [regexes.rsh] }}"
        wfh: "{{ [regexes.wfh] }}"
        ferie: "{{ [regexes.ferie] }}"
    action:
      - service: calendar.get_events
        data:
          start_date_time: "{{ (now() + timedelta(days=-1)).strftime('%Y-%m-%d') }} 00:00:00"
          end_date_time: "{{ (now() + timedelta(days=1)).strftime('%Y-%m-%d') }} 23:59:59"
        target:
          entity_id: "{{ calendar_entity}}"
        response_variable: all_events
      - variables:
          agenda_events: >-
            {% from 'agenda.jinja' import agenda_event %}
            {% set ns = namespace(ret=[]) %}
            {% for event in all_events[calendar_entity].events | sort(attribute='start') | list -%}
              {% set ns.ret = ns.ret + [agenda_event(calendar_name, dict(event, location=none), regexes, bool_attrs)|from_json] %}
            {%- endfor -%}
            {{ ns.ret }}
      - event: "calendar_updated"
        event_data:
          calendar: "{{ calendar_name }}"
          time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          events: "{{ agenda_events }}"

  - alias: Update Tripit Calendar
    id: fdab31ae-dbd7-4808-a671-6fa05e331a59
    initial_state: true
    trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "/15"
        seconds: "0"
      - platform: state
        entity_id: calendar.tripit
      - platform: state
        entity_id: binary_sensor.home_assistant_loaded
        to: "on"
        for:
          seconds: 10
      - platform: state
        entity_id: sensor.calendar_regexes
    variables:
      calendar_entity: calendar.tripit
      calendar_name: "Tripit Kalender"
      regexes: "{{ states.sensor.calendar_regexes.attributes }}"
      bool_attrs:
        travel: "{{ [regexes.transit, regexes.bil] }}"
        bil: "{{ [regexes.bil] }}"
        transit: "{{ [regexes.transit] }}"
        wake: "{{ [{'negate': true, 'regex': '.*( Eberhardt is in ).*'}] }}"
      attrs:
        type: '\[(.+)\](?: (?:.+) -)* (?:.+) to (?:.+)'
        carrier: '\[(?:.+)\](?: (.+) -)* (?:.+) to (?:.+)'
        from: '\[(?:.+)\](?: (?:.+) -)* (.+) to (?:.+)'
        to: '\[(?:.+)\](?: (?:.+) -)* (?:.+) to (.+)'
    action:
      - service: calendar.get_events
        data:
          start_date_time: "{{ now().strftime('%Y-%m-%d') }} 00:00:00"
          end_date_time: "{{ (now() + timedelta(days=1)).strftime('%Y-%m-%d') }} 23:59:59"
        target:
          entity_id: "{{ calendar_entity}}"
        response_variable: all_events
      - variables:
          agenda_events: >-
            {% from 'agenda.jinja' import agenda_event %}
            {% set ns = namespace(ret=[]) %}
            {% for event in all_events[calendar_entity].events | sort(attribute='start') | list -%}
              {% set ns.ret = ns.ret + [agenda_event(calendar_name, dict(event, location=none), regexes, bool_attrs, attrs)|from_json] %}
            {%- endfor -%}
            {{ ns.ret }}
      - event: "calendar_updated"
        event_data:
          calendar: "{{ calendar_name }}"
          time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          events: "{{ agenda_events }}"
