script:
  assistant_broadcast_if_home:
    sequence:
      - condition: state
        entity_id: binary_sensor.martin_presence_delayed
        state: 'on'
      - service: rest_command.assistant_broadcast
        data_template:
          message: "{{ message }}"

rest_command:
  assistant_broadcast:
    url: !secret assistant_relay_url
    method: POST
    content_type: 'application/json'
    payload: '{"command":"{{ message }}", "user":"Home Assistant", "broadcast":true}'
    
  assistant_converse:
    url: !secret assistant_relay_url
    method: POST
    content_type: 'application/json'
    payload: '{"command":"{{ message }}", "user":"Home Assistant", "converse":true}'

  assistant_relay:
    url: !secret assistant_relay_url
    method: POST
    content_type: 'application/json'
    payload: '{"command":"{{ command }}", "user":"Home Assistant"}'

sensor:
  - platform: rest
    name: Assistant Relay Response
    resource: !secret assistant_relay_responses_url
    method: POST
    headers:
      Content-Type: application/json
    payload: '{}'
    value_template: '{{ value_json.responses[0].response }}'
    json_attributes:
      - responses

# Enables Home Assistant Cloud
cloud:
intent_script:
  DimLightsIntent:
    action:
      service: input_select.select_next
      entity_id: input_select.light_profile
    speech:
      text: >
        Dimming the lights.

  BrightenLightsIntent:
    action:
      service: input_select.select_previous
      entity_id: input_select.light_profile
    speech:
      text: >
        Brightening the lights.

  PlayLastTwitchStreamIntent:
    action:
      service: media_extractor.play_media
      data_template:
        entity_id: "media_player.{{ Device | lower | replace(' ', '_') }}"
        media_content_id: "{{ states('sensor.twitch_stream') }}"
        media_content_type: TVSHOW
    speech:
      type: plaintext
      text: >
        Sending {{ states.sensor.twitch_stream.attributes.stream_name }} to {{ Device }}
