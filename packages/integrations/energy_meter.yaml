homeassistant:
  customize:
    sensor.energy_hourly:
      friendly_name: Elforbrug Denne Time
    sensor.energy_daily:
      friendly_name: Elforbrug I Dag
    sensor.energy_monthly:
      friendly_name: Elforbrug Denne Måned
    sensor.energy_quarterly:
      friendly_name: Elforbrug Dette Kvartal
    sensor.energy_last_hour:
      icon: mdi:counter
    sensor.energy_last_day:
      icon: mdi:counter
    sensor.energy_last_month:
      icon: mdi:counter
    sensor.energy_last_quarter:
      icon: mdi:counter

mqtt:
  sensor:
    # - name: "Raw Electricity Price"
    #   state_topic: "kamstrup/prices"
    #   value_template: "{{ value_json.prices['0'] }}"
    #   json_attributes_topic: "kamstrup/prices"

    - name: "Pow K Uptime"
      state_topic: "kamstrup/uptime"

    - name: "Pow K VCC"
      state_topic: "kamstrup/vcc"
      unit_of_measurement: V
      device_class: voltage

    - name: "Pow K RSSI"
      state_topic: "kamstrup/rssi"
      unit_of_measurement: dBm
      device_class: signal_strength

    - name: Pow K Temperature
      state_topic: kamstrup/temperature
      unit_of_measurement: °C
      device_class: temperature

    - name: Pow K Power Factor
      state_topic: kamstrup/meter/powerfactor
      value_template: "{{ ((value|float) * 100.0)|round(1) }}"
      device_class: power_factor
      unit_of_measurement: "%"

    - name: Pow K Import Reactive Accumulated
      state_topic: kamstrup/meter/import/reactive/accumulated
      state_class: total_increasing
      unit_of_measurement: kWh
      device_class: energy

    - name: Pow K Import Active Accumulated
      state_topic: kamstrup/meter/import/active/accumulated
      state_class: total_increasing
      unit_of_measurement: kWh
      device_class: energy

    - name: Pow K Export Reactive Accumulated
      state_topic: kamstrup/meter/export/reactive/accumulated
      state_class: total_increasing
      unit_of_measurement: kWh
      device_class: energy

    - name: Pow K Export Active Accumulated
      state_topic: kamstrup/meter/export/active/accumulated
      state_class: total_increasing
      unit_of_measurement: kWh
      device_class: energy

    - name: Pow K L1 Current
      state_topic: kamstrup/meter/l1/current
      unit_of_measurement: A
      device_class: current

    - name: Pow K L1 Voltage
      state_topic: kamstrup/meter/l1/voltage
      unit_of_measurement: V
      device_class: voltage

    - name: Pow K L1 Power Factor
      state_topic: kamstrup/meter/l1/powerfactor
      value_template: "{{ ((value|float) * 100.0)|round(1) }}"
      device_class: power_factor
      unit_of_measurement: "%"

    - name: Pow K L2 Current
      state_topic: kamstrup/meter/l2/current
      unit_of_measurement: A
      device_class: current

    - name: Pow K L2 Voltage
      state_topic: kamstrup/meter/l2/voltage
      unit_of_measurement: V
      device_class: voltage

    - name: Pow K L2 Power Factor
      state_topic: kamstrup/meter/l2/powerfactor
      value_template: "{{ ((value|float) * 100.0)|round(1) }}"
      device_class: power_factor
      unit_of_measurement: "%"

    - name: Pow K L3 Current
      state_topic: kamstrup/meter/l3/current
      unit_of_measurement: A
      device_class: current

    - name: Pow K L3 Voltage
      state_topic: kamstrup/meter/l3/voltage
      unit_of_measurement: V
      device_class: voltage

    - name: Pow K L3 Power Factor
      state_topic: kamstrup/meter/l3/powerfactor
      value_template: "{{ ((value|float) * 100.0)|round(1) }}"
      device_class: power_factor
      unit_of_measurement: "%"

    - name: Pow K Export Reactive
      state_topic: kamstrup/meter/export/reactive
      state_class: measurement
      unit_of_measurement: W
      device_class: power

    - name: Pow K Export Active
      state_topic: kamstrup/meter/export/active
      state_class: measurement
      unit_of_measurement: W
      device_class: power

    - name: Pow K Import Reactive
      state_topic: kamstrup/meter/import/reactive
      state_class: measurement
      unit_of_measurement: W
      device_class: power

    - name: Pow K Import Active
      state_topic: kamstrup/meter/import/active
      state_class: measurement
      unit_of_measurement: W
      device_class: power

    - name: Pow K Import Hour
      state_topic: kamstrup/realtime/import/hour

    - name: Pow K Import Day
      state_topic: kamstrup/realtime/import/day

    - name: Pow K Import Threshold
      state_topic: kamstrup/realtime/import/threshold

    - name: Pow K Import Monthmax
      state_topic: kamstrup/realtime/import/monthmax

utility_meter:
  energy_hourly:
    source: sensor.pow_k_import_active_accumulated
    cycle: hourly
  energy_daily:
    source: sensor.pow_k_import_active_accumulated
    cycle: daily
  energy_monthly:
    source: sensor.pow_k_import_active_accumulated
    cycle: monthly
  energy_quarterly:
    source: sensor.pow_k_import_active_accumulated
    cycle: quarterly

input_number:
  energy_cost:
    name: Energy Cost
    mode: box
    min: 0
    max: 100000
    step: 0.001
    unit_of_measurement: kr

automation:
  - alias: Get Carnot Prices
    id: get_carnot_prices
    initial_state: true
    trigger:
      platform: homeassistant
      event: start
    action:
      - delay:
          seconds: 5
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.carnot_spotpris_dk2

  - alias: Update Energy Cost
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.energy_cost_this_hour
    condition:
      - condition: template
        value_template: "{{ (trigger.from_state.state|float) > (trigger.to_state.state|float) }}"
    action:
      - service: input_number.set_value
        data:
          entity_id: input_number.energy_cost
          value: "{{ (state('input_number.energy_cost')|float) + (trigger.from_state.state|float) }}"

template:
  - sensor:
      - name: Pow K L1 Power
        state: >-
          {{
            (states('sensor.pow_k_l1_voltage')|float) *
            (states('sensor.pow_k_l1_current')|float) *
            (states('sensor.pow_k_l1_power_factor')|float/100.0)
          }}
        device_class: power
        unit_of_measurement: W
      - name: Pow K L2 Power
        state: >-
          {{
            (states('sensor.pow_k_l2_voltage')|float) *
            (states('sensor.pow_k_l2_current')|float) *
            (states('sensor.pow_k_l2_power_factor')|float/100.0)
          }}
        device_class: power
        unit_of_measurement: W
      - name: Pow K L3 Power
        state: >-
          {{
            (states('sensor.pow_k_l3_voltage')|float) *
            (states('sensor.pow_k_l3_current')|float) *
            (states('sensor.pow_k_l3_power_factor')|float/100.0)
          }}
        device_class: power
        unit_of_measurement: W

      - name: "El Priser"
        device_class: monetary
        unit_of_measurement: "DKK/kWh"
        state: >-
          {%- set p = state_attr('sensor.el_priser', 'prices') -%}
          {%- if p == None -%}
            unknown
          {%- else -%}
            {% for price in p %}
              {% if (price['start']|as_datetime) <= now() and (price['end']|as_datetime) > now() %}
                {{ price["value"] }}
              {% endif %}
            {% endfor %}
          {%- endif -%}
        attributes:
          prices: >-
            [
            {%- set prices = state_attr('sensor.carnot_spotpris_dk2', 'predictions') -%}
            {%- for k in prices -%}
              {%- set price = k -%}
              {%- set s = {
                "abonnement": 0.03,
                "elafgift_2022_10": 0.688,
                "elafgift_2023_01": 0.080,
                "systemydelse": 0.0,
                "transport_lavlast_2022": 0.3003,
                "transport_spidslast_2022": 0.7651,
                "transport_vinter_2023": {
                  "lavlast": 0.2127,
                  "hoejlast": 0.6379,
                  "spidslast": 1.9135
                },
                "transport_sommer_2023": {
                  "lavlast": 0.2127,
                  "hoejlast": 0.3189,
                  "spidslast": 0.8292
                }
              } -%}
              {%- set cdt = (price['dktime'].split('+')[0] | as_datetime | as_local) -%}
              {%- if cdt > as_datetime("2023-10-01 00:00:00.00+02:00") -%}
                {%- set transport_lavlast = s.transport_vinter_2023.lavlast -%}
                {%- set transport_hoejlast = s.transport_vinter_2023.hoejlast -%}
                {%- set transport_spidslast = s.transport_vinter_2023.spidslast -%}
              {%- elif cdt > as_datetime("2023-04-01 00:00:00.00+02:00") -%}
                {%- set transport_lavlast = s.transport_sommer_2023.lavlast -%}
                {%- set transport_hoejlast = s.transport_sommer_2023.hoejlast -%}
                {%- set transport_spidslast = s.transport_sommer_2023.spidslast -%}
              {%- elif cdt > as_datetime("2023-01-01 00:00:00.00+02:00") -%}
                {%- set transport_lavlast = s.transport_vinter_2023.lavlast -%}
                {%- set transport_hoejlast = s.transport_vinter_2023.hoejlast -%}
                {%- set transport_spidslast = s.transport_vinter_2023.spidslast -%}
              {%- else -%}
                {%- set transport_lavlast = s.transport_lavlast_2022 -%}
                {%- set transport_spidslast = s.transport_spidslast_2022 -%}
              {%- endif -%}

              {%- if cdt > as_datetime("2023-01-01 00:00:00.00+02:00") -%}
                {%- set elafgift = s.elafgift_2023_01 -%}
              {%- else -%}
                {%- set elafgift = s.elafgift_2022_10 -%}
              {%- endif -%}

              {%- set afgiftsum = s.abonnement + elafgift + s.systemydelse -%}
              {
              "start": "{{ cdt }}",
              "end": "{{ cdt + timedelta( hours = 1) }}",
              {%- if cdt > as_datetime("2023-01-01 00:00:00.00+02:00") -%}
                  {%- if cdt.hour >= 18 and cdt.hour <= 21 -%}
                    "value": {{ (((price['prediction']|float/1000.0) + transport_spidslast + afgiftsum) * 1.25) | round(4) }}
                  {%- elif (cdt.hour >= 7 and cdt.hour <= 17) or (cdt.hour >= 22 and cdt.hour <= 23) -%}
                    "value": {{ (((price['prediction']|float/1000.0) + transport_hoejlast + afgiftsum) * 1.25) | round(4) }}
                  {%- else -%}
                    "value": {{ (((price['prediction']|float/1000.0) + transport_lavlast + afgiftsum) * 1.25) | round(4) }}
                  {%- endif -%}
              {%- else -%}
                {%- if cdt.month >= 10 or cdt.month < 4 -%}
                  {%- if cdt.hour >= 17 and cdt.hour < 20 -%}
                    "value": {{ (((price['prediction']|float/1000.0) + transport_spidslast + afgiftsum) * 1.25) | round(4) }}
                  {%- else -%}
                    "value": {{ (((price['prediction']|float/1000.0) + transport_lavlast + afgiftsum) * 1.25) | round(4) }}
                  {%- endif -%}
                {%- else -%}
                  "value": {{ (((price['prediction']|float/1000.0) + transport_lavlast + afgiftsum) * 1.25) | round(4) }}
                {%- endif -%}
              {%- endif -%}
              },
            {%- endfor -%}
            ]
          just_prices: >-
            {%- set p = state_attr('sensor.el_priser', 'prices') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
              [{% for x in (p|list) %}{{ x.value }},{% endfor %}]
            {%- endif -%}

      - name: "El Priser Min"
        device_class: monetary
        unit_of_measurement: "DKK/kWh"
        state: >-
          {%- set p = state_attr('sensor.el_priser', 'just_prices') -%}
          {{ 'unknown' if p == None else p|max }}

      - name: "El Priser Max"
        device_class: monetary
        unit_of_measurement: "DKK/kWh"
        state: >-
          {%- set p = state_attr('sensor.el_priser', 'just_prices') -%}
          {{ 'unknown' if p == None else p|min }}

      - name: "El Billigste 1 Time"
        device_class: timestamp
        state: >-
          {%- set p = state_attr('sensor.el_billigste_1_time', 'cheapest_1_hr') -%}
          {{ 'unknown' if p == None else p['start'] }}
        attributes:
          icon: mdi:clock-time-one
          cheapest_1_hr: >-
            {%- set p = state_attr('sensor.el_priser', 'just_prices') -%}
            {{ 'unknown' if p == None else state_attr('sensor.el_priser', 'prices')[p.index(p|min)] }}
          start: >-
            {%- set p = state_attr('sensor.el_billigste_1_time', 'cheapest_1_hr') -%}
            {{ 'unknown' if p == None else p['start'] }}
          end: >-
            {%- set p = state_attr('sensor.el_billigste_1_time', 'cheapest_1_hr') -%}
            {{ 'unknown' if p == None else p['end'] }}
          value: >-
            {%- set p = state_attr('sensor.el_billigste_1_time', 'cheapest_1_hr') -%}
            {{ 'unknown' if p == None else p['value'] }}

      - name: "El Billigste 3 Timer"
        device_class: timestamp
        state: >-
          {%- set p = state_attr('sensor.el_billigste_3_timer', 'cheapest_3_hr') -%}
          {{ 'unknown' if p == None else p['start'] }}
        attributes:
          icon: mdi:clock-time-three
          three_hour_seg: >-
            {%- set p = state_attr('sensor.el_priser', 'prices') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
            [
              {%- for i in range(p|length-2) -%}
                {
                  "start": "{{ p[i]["start"] }}",
                  "end": "{{ p[i+2]["end"] }}",
                  "value": {{
                    ((p[i]['value']
                    + p[i+1]['value']
                    + p[i+2]['value'])/3.0) | round(4)
                  }}
                },
              {%- endfor -%}
            ]
            {% endif %}
          three_hour_seg_prices: >-
            {%- set p = state_attr('sensor.el_billigste_3_timer', 'three_hour_seg') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
              [{% for x in (p|list) %}{{ x.value }},{% endfor %}]
            {%- endif -%}
          cheapest_3_hr: >-
            {%- set p = state_attr('sensor.el_billigste_3_timer', 'three_hour_seg_prices') -%}
            {{ 'unknown' if p == None else state_attr('sensor.el_priser', 'prices')[p.index(p|min)] }}
          start: >-
            {%- set p = state_attr('sensor.el_billigste_3_timer', 'cheapest_3_hr') -%}
            {{ 'unknown' if p == None else p['start'] }}
          end: >-
            {%- set p = state_attr('sensor.el_billigste_3_timer', 'cheapest_3_hr') -%}
            {{ 'unknown' if p == None else p['end'] }}
          value: >-
            {%- set p = state_attr('sensor.el_billigste_3_timer', 'cheapest_3_hr') -%}
            {{ 'unknown' if p == None else p['value'] }}

      - name: "El Billigste 6 Timer"
        device_class: timestamp
        state: >-
          {%- set p = state_attr('sensor.el_billigste_6_timer', 'cheapest_6_hr') -%}
          {{ 'unknown' if p == None else p['start'] }}
        attributes:
          icon: mdi:clock-time-six
          six_hour_seg: >-
            {%- set p = state_attr('sensor.el_priser', 'prices') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
            [
              {%- for i in range(p|length-5) -%}
                {
                  "start": "{{ p[i]["start"] }}",
                  "end": "{{ p[i+5]["end"] }}",
                  "value": {{
                    ((p[i]['value']
                    + p[i+1]['value']
                    + p[i+2]['value']
                    + p[i+3]['value']
                    + p[i+4]['value']
                    + p[i+5]['value'])/6.0) | round(4)
                  }}
                },
              {%- endfor -%}
            ]
            {% endif %}
          six_hour_seg_prices: >-
            {%- set p = state_attr('sensor.el_billigste_6_timer', 'six_hour_seg') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
              [{% for x in (p|list) %}{{ x.value }},{% endfor %}]
            {%- endif -%}
          cheapest_6_hr: >-
            {%- set p = state_attr('sensor.el_billigste_6_timer', 'six_hour_seg_prices') -%}
            {{ 'unknown' if p == None else state_attr('sensor.el_priser', 'prices')[p.index(p|min)] }}
          start: >-
            {%- set p = state_attr('sensor.el_billigste_6_timer', 'cheapest_6_hr') -%}
            {{ 'unknown' if p == None else p['start'] }}
          end: >-
            {%- set p = state_attr('sensor.el_billigste_6_timer', 'cheapest_6_hr') -%}
            {{ 'unknown' if p == None else p['end'] }}
          value: >-
            {%- set p = state_attr('sensor.el_billigste_6_timer', 'cheapest_6_hr') -%}
            {{ 'unknown' if p == None else p['value'] }}

      - name: "El Næste Billige 1 Time"
        device_class: timestamp
        state: >-
          {%- set p = state_attr('sensor.el_naeste_billige_1_time', 'next_local_minimum') -%}
          {{ 'unknown' if p == None else p['start'] }}
        attributes:
          icon: mdi:clock-time-one
          local_minima: >-
            {%- set p = state_attr('sensor.el_priser', 'prices') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
              [
              {%- for price in p -%}
                {%-
                  if not loop.first and not loop.last
                  and (price['start']|as_datetime) >= (now()-timedelta(hours=1))
                  and p[loop.index0-1]['value'] >= price['value']
                  and p[loop.index0+1]['value'] >= price['value']
                -%}
                  {
                    'start': '{{ price["start"] }}',
                    'end': '{{ price["end"] }}',
                    'value': '{{ price["value"] }}'
                  },
                {%- endif -%}
              {%- endfor -%}
              ]
            {%- endif -%}
          next_local_minimum: >-
            {%- set p = state_attr('sensor.el_naeste_billige_1_time', 'local_minima') -%}
            {{ 'unknown' if p == None else p[0] }}
          start: >-
            {%- set p = state_attr('sensor.el_naeste_billige_1_time', 'next_local_minimum') -%}
            {{ 'unknown' if p == None else p['start'] }}
          end: >-
            {%- set p = state_attr('sensor.el_naeste_billige_1_time', 'next_local_minimum') -%}
            {{ 'unknown' if p == None else p['end'] }}
          value: >-
            {%- set p = state_attr('sensor.el_naeste_billige_1_time', 'next_local_minimum') -%}
            {{ 'unknown' if p == None else p['value'] }}

      - name: "El Næste Billige 3 Timer"
        device_class: timestamp
        state: >-
          {%- set p = state_attr('sensor.el_naeste_billige_3_timer', 'next_local_minimum') -%}
          {{ 'unknown' if p == None else p['start'] }}
        attributes:
          icon: mdi:clock-time-three
          local_minima: >-
            {%- set p = state_attr('sensor.el_billigste_3_timer', 'three_hour_seg') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
              [
              {%- for price in p -%}
                {%-
                  if not loop.first and not loop.last
                  and p[loop.index0-1]['value'] >= price['value']
                  and p[loop.index0+1]['value'] >= price['value']
                -%}
                  {
                    'start': '{{ price["start"] }}',
                    'end': '{{ price["end"] }}',
                    'value': '{{ price["value"] }}'
                  },
                {%- endif -%}
              {%- endfor -%}
              ]
            {%- endif -%}
          next_local_minimum: >-
            {%- set p = state_attr('sensor.el_naeste_billige_3_timer', 'local_minima') -%}
            {{ 'unknown' if p == None else p[0] }}
          start: >-
            {%- set p = state_attr('sensor.el_naeste_billige_3_timer', 'next_local_minimum') -%}
            {{ 'unknown' if p == None else p['start'] }}
          end: >-
            {%- set p = state_attr('sensor.el_naeste_billige_3_timer', 'next_local_minimum') -%}
            {{ 'unknown' if p == None else p['end'] }}
          value: >-
            {%- set p = state_attr('sensor.el_naeste_billige_3_timer', 'next_local_minimum') -%}
            {{ 'unknown' if p == None else p['value'] }}

      - name: "El Næste Billige 6 Timer"
        device_class: timestamp
        state: >-
          {%- set p = state_attr('sensor.el_naeste_billige_3_timer', 'next_local_minimum') -%}
          {{ 'unknown' if p == None else p['start'] }}
        attributes:
          icon: mdi:clock-time-six
          local_minima_6hr: >-
            {%- set p = state_attr('sensor.el_billigste_3_timer', 'six_hour_seg') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
              [
              {%- for price in p -%}
                {%-
                  if not loop.first and not loop.last
                  and p[loop.index0-1]['value'] >= price['value']
                  and p[loop.index0+1]['value'] >= price['value']
                -%}
                  {
                    'start': '{{ price["start"] }}',
                    'end': '{{ price["end"] }}',
                    'value': '{{ price["value"] }}'
                  },
                {%- endif -%}
              {%- endfor -%}
              ]
            {%- endif -%}
          next_local_minimum: >-
            {%- set p = state_attr('sensor.el_naeste_billige_6_timer', 'local_minima') -%}
            {{ 'unknown' if p == None else p[0] }}
          start: >-
            {%- set p = state_attr('sensor.el_naeste_billige_6_timer', 'next_local_minimum') -%}
            {{ 'unknown' if p == None else p['start'] }}
          end: >-
            {%- set p = state_attr('sensor.el_naeste_billige_6_timer', 'next_local_minimum') -%}
            {{ 'unknown' if p == None else p['end'] }}
          value: >-
            {%- set p = state_attr('sensor.el_naeste_billige_6_timer', 'next_local_minimum') -%}
            {{ 'unknown' if p == None else p['value'] }}

      - name: "El Næste Dyre 1 Time"
        device_class: timestamp
        state: >-
          {%- set p = state_attr('sensor.el_naeste_dyre_1_time', 'next_local_maximum') -%}
          {{ 'unknown' if p == None else p['start'] }}
        attributes:
          icon: mdi:clock-time-one
          local_maxima: >-
            {%- set p = state_attr('sensor.el_priser', 'prices') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
              [
              {%- for price in p -%}
                {%-
                  if not loop.first and not loop.last
                  and (price['start']|as_datetime) >= (now()-timedelta(hours=1))
                  and p[loop.index0-1]['value'] <= price['value']
                  and p[loop.index0+1]['value'] <= price['value']
                -%}
                  {
                    'start': '{{ price["start"] }}',
                    'end': '{{ price["end"] }}',
                    'value': '{{ price["value"] }}'
                  },
                {%- endif -%}
              {%- endfor -%}
              ]
            {%- endif -%}
          next_local_maximum: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_1_time', 'local_maxima') -%}
            {{ 'unknown' if p == None else p[0] }}
          start: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_1_time', 'next_local_maximum') -%}
            {{ 'unknown' if p == None else p['start'] }}
          end: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_1_time', 'next_local_maximum') -%}
            {{ 'unknown' if p == None else p['end'] }}
          value: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_1_time', 'next_local_maximum') -%}
            {{ 'unknown' if p == None else p['value'] }}

      - name: "El Næste Dyre 3 Timer"
        device_class: timestamp
        state: >-
          {%- set p = state_attr('sensor.el_naeste_dyre_3_timer', 'next_local_maximum') -%}
          {{ 'unknown' if p == None else p['start'] }}
        attributes:
          icon: mdi:clock-time-three
          local_maxima: >-
            {%- set p = state_attr('sensor.el_billigste_3_timer', 'three_hour_seg') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
              [
              {%- for price in p -%}
                {%-
                  if not loop.first and not loop.last
                  and p[loop.index0-1]['value'] <= price['value']
                  and p[loop.index0+1]['value'] <= price['value']
                -%}
                  {
                    'start': '{{ price["start"] }}',
                    'end': '{{ price["end"] }}',
                    'value': '{{ price["value"] }}'
                  },
                {%- endif -%}
              {%- endfor -%}
              ]
            {%- endif -%}
          next_local_maximum: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_3_timer', 'local_maxima') -%}
            {{ 'unknown' if p == None else p[0] }}
          start: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_3_timer', 'next_local_maximum') -%}
            {{ 'unknown' if p == None else p['start'] }}
          end: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_3_timer', 'next_local_maximum') -%}
            {{ 'unknown' if p == None else p['end'] }}
          value: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_3_timer', 'next_local_maximum') -%}
            {{ 'unknown' if p == None else p['value'] }}

      - name: "El Næste Dyre 6 Timer"
        device_class: timestamp
        state: >-
          {%- set p = state_attr('sensor.el_naeste_dyre_6_timer', 'next_local_maximum') -%}
          {{ 'unknown' if p == None else p['start'] }}
        attributes:
          icon: mdi:clock-time-six
          local_maxima: >-
            {%- set p = state_attr('sensor.el_billigste_6_timer', 'six_hour_seg') -%}
            {%- if p == None -%}
              unknown
            {%- else -%}
              [
              {%- for price in p -%}
                {%-
                  if not loop.first and not loop.last
                  and p[loop.index0-1]['value'] <= price['value']
                  and p[loop.index0+1]['value'] <= price['value']
                -%}
                  {
                    'start': '{{ price["start"] }}',
                    'end': '{{ price["end"] }}',
                    'value': '{{ price["value"] }}'
                  },
                {%- endif -%}
              {%- endfor -%}
              ]
            {%- endif -%}
          next_local_maximum: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_6_timer', 'local_maxima') -%}
            {{ 'unknown' if p == None else p[0] }}
          start: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_6_timer', 'next_local_maximum') -%}
            {{ 'unknown' if p == None else p['start'] }}
          end: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_6_timer', 'next_local_maximum') -%}
            {{ 'unknown' if p == None else p['end'] }}
          value: >-
            {%- set p = state_attr('sensor.el_naeste_dyre_6_timer', 'next_local_maximum') -%}
            {{ 'unknown' if p == None else p['value'] }}

sensor:
  - platform: integration
    source: sensor.pow_k_l1_power
    name: Pow K L1 Power Accumulated
    unit_prefix: k
    round: 3
    method: left
  - platform: integration
    source: sensor.pow_k_l2_power
    name: Pow K L2 Power Accumulated
    unit_prefix: k
    round: 3
    method: left
  - platform: integration
    source: sensor.pow_k_l3_power
    name: Pow K L3 Power Accumulated
    unit_prefix: k
    round: 3
    method: left

  - platform: command_line
    name: Carnot spotpris DK2
    command: >-
      curl
      --request GET "https://whale-app-dquqw.ondigitalocean.app/openapi/get_predict?energysource=spotprice&region=dk2&daysahead=7"
      --header "accept: application/json"
      --header "apikey: {{ states('sensor.carnot_api_key') }}"
      --header "username: {{ states('sensor.carnot_username') }}"
    scan_interval:
      hours: 1
    value_template: '{% if value_json is not none %}OK - {{value_json["predictions"][0]["addedtime"]}}{% else %}Unavailable{% endif %}'
    json_attributes:
      - predictions

  - platform: template
    sensors:
      carnot_api_key:
        value_template: !secret carnot_api_key
      carnot_username:
        value_template: !secret carnot_username
      energy_cost_hourly:
        friendly_name: "Elomkostning"
        value_template: "{{ (((states('sensor.pow_k_import_active')|float)/1000) * (states('sensor.el_priser')|float)) | round(3) }}"
        unit_of_measurement: kr/t
        device_class: monetary

      energy_cost_this_hour:
        friendly_name: "Elomkostning Denne Time"
        value_template: "{{ ((states('sensor.energy_hourly')|float) * (states('sensor.el_priser')|float)) | round(3) }}"
        unit_of_measurement: kr
        device_class: monetary

      energy_last_hour:
        friendly_name: "Elforbrug Sidste Time"
        value_template: "{{ state_attr('sensor.energy_hourly', 'last_period') }}"
        unit_of_measurement: kWh
        device_class: energy
      energy_last_day:
        friendly_name: "Elforbrug I Går"
        value_template: "{{ state_attr('sensor.energy_daily', 'last_period') }}"
        unit_of_measurement: kWh
        device_class: energy
      energy_last_month:
        friendly_name: "Elforbrug Sidste Måned"
        value_template: "{{ state_attr('sensor.energy_monthly', 'last_period') }}"
        unit_of_measurement: kWh
        device_class: energy
      energy_last_quarter:
        friendly_name: "Elforbrug Sidste Kvartal"
        value_template: "{{ state_attr('sensor.energy_quarterly', 'last_period') }}"
        unit_of_measurement: kWh
        device_class: energy

      # energy_cost_daily:
      #   friendly_name: "Elomkostning I Dag"
      #   value_template: "{{ ((states('sensor.energy_daily')|float) * (states('sensor.nordpool_kwh_dk2_dkk')|float)) | round(2) }}"
      #   unit_of_measurement: kr
      #   device_class: monetary
      # energy_cost_monthly:
      #   friendly_name: "Elomkostning Denne Måned"
      #   value_template: "{{ ((states('sensor.energy_monthly')|float) * (states('sensor.nordpool_kwh_dk2_dkk')|float)) | round(2) }}"
      #   unit_of_measurement: kr
      #   device_class: monetary
      # energy_cost_quarterly:
      #   friendly_name: "Elomkostning Dette Kvartal"
      #   value_template: "{{ ((states('sensor.energy_quarterly')|float) * (states('sensor.nordpool_kwh_dk2_dkk')|float)) | round(2) }}"
      #   unit_of_measurement: kr
      #   device_class: monetary
      # energy_cost_last_hour:
      #   friendly_name: "Elomkostning Sidste Time"
      #   value_template: "{{ ((states('sensor.energy_last_hour')|float) * (states('sensor.nordpool_kwh_dk2_dkk')|float)) | round(2) }}"
      #   unit_of_measurement: kr
      #   device_class: monetary
      # energy_cost_last_day:
      #   friendly_name: "Elomkostning I Går"
      #   value_template: "{{ ((states('sensor.energy_last_day')|float) * (states('sensor.nordpool_kwh_dk2_dkk')|float)) | round(2) }}"
      #   unit_of_measurement: kr
      #   device_class: monetary
      # energy_cost_last_month:
      #   friendly_name: "Elomkostning Sidste Måned"
      #   value_template: "{{ ((states('sensor.energy_last_month')|float) * (states('sensor.nordpool_kwh_dk2_dkk')|float)) | round(2) }}"
      #   unit_of_measurement: kr
      #   device_class: monetary
      # energy_cost_last_quarter:
      #   friendly_name: "Elomkostning Sidste Kvartal"
      #   value_template: "{{ ((states('sensor.energy_last_quarter')|float) * (states('sensor.nordpool_kwh_dk2_dkk')|float)) | round(2) }}"
      #   unit_of_measurement: kr
      #   device_class: monetary
