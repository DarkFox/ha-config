homeassistant:
  customize:
    script.dim_light_profile:
      icon: mdi:brightness-5

    script.brighten_light_profile:
      icon: mdi:brightness-7

input_boolean:
  auto_light_profile:
    name: Auto
    icon: mdi:brightness-auto

input_number:
  scene_transition_time:
    name: Scene Transition Time
    initial: 0.5
    min: 0.0
    max: 1800
    step: 0.1

input_select:
  light_profile:
    name: Light Profile
    options:
      - Bright
      - Default
      - Dimmed
      - Ambient
      - Night
      - "Off"

  theme:
    name: Theme
    options:
      - Tron
      - Vaporwave
      - Ocean
      - Halloween
      - Christmas
      - Little
      - Portal
      - Portal Inverted
      - Dragon
      - Demon
      - Red and Blue
      - Yellow and Green
      - Gold and Pink
      - Screaming Pink
      - Red
      - Green
      - Blue
      - Yellow
      - Purple
      - Orange
      - Spring Blossom
      - Slava Ukraini
      - Party
      - New Years

mqtt:
  light:
    - schema: json
      name: apartment light level
      command_topic: "virtual/apartment-light-level/set"
      brightness: true
      retain: true

light:
  - platform: template
    lights:
      light_profile_bright:
        friendly_name: Lyst
        icon_template: "mdi:brightness-7"
        value_template: "{{ is_state('input_select.light_profile', 'Bright') }}"
        turn_on:
          event: set_light_profile
          event_data:
            profile: Bright
        turn_off:
          event: light_profile_off_null

      light_profile_default:
        friendly_name: Normal
        icon_template: "mdi:brightness-5"
        value_template: "{{ is_state('input_select.light_profile', 'Default') }}"
        turn_on:
          event: set_light_profile
          event_data:
            profile: Default
        turn_off:
          event: light_profile_off_null

      light_profile_dimmed:
        friendly_name: DÃ¦mpet
        icon_template: "mdi:brightness-6"
        value_template: "{{ is_state('input_select.light_profile', 'Dimmed') }}"
        turn_on:
          event: set_light_profile
          event_data:
            profile: Dimmed
        turn_off:
          event: light_profile_off_null

      light_profile_ambient:
        friendly_name: Baggrund
        icon_template: "mdi:brightness-4"
        value_template: "{{ is_state('input_select.light_profile', 'Ambient') }}"
        turn_on:
          event: set_light_profile
          event_data:
            profile: Ambient
        turn_off:
          event: light_profile_off_null

      light_profile_night:
        friendly_name: Nat
        icon_template: "mdi:brightness-3"
        value_template: "{{ is_state('input_select.light_profile', 'Night') }}"
        turn_on:
          event: set_light_profile
          event_data:
            profile: Night
        turn_off:
          event: light_profile_off_null

      light_profile_off:
        friendly_name: "Slukket"
        icon_template: "mdi:power"
        value_template: "{{ is_state('input_select.light_profile', 'Off') }}"
        turn_on:
          event: set_light_profile
          event_data:
            profile: "Off"
        turn_off:
          event: light_profile_off_null

template:
  - sensor:
      - name: Theme
        unique_id: theme
        state: "{{ states('input_select.theme') }}"
        attributes:
          primary_color: >
            {%- set theme = states('input_select.theme') -%}
            {% if state_attr('sensor.theme', 'themes') and theme in state_attr('sensor.theme', 'themes') %}
              {{ state_attr('sensor.theme', 'themes')[theme]['primary'] }}
            {% else %}
              0,100
            {% endif %}
          primary_color_12v: >
            {%- set theme = states('input_select.theme') -%}
            {% if state_attr('sensor.theme', 'themes') and theme in state_attr('sensor.theme', 'themes') %}
              {{ state_attr('sensor.theme', 'themes')[theme]['primary_12v'] }}
            {% else %}
              0,100
            {% endif %}
          primary_color_eglo: >
            {%- set theme = states('input_select.theme') -%}
            {% if state_attr('sensor.theme', 'themes') and theme in state_attr('sensor.theme', 'themes') %}
              {{ state_attr('sensor.theme', 'themes')[theme]['primary_eglo'] }}
            {% else %}
              0,100
            {% endif %}
          primary_color_hue: >
            {%- set theme = states('input_select.theme') -%}
            {% if state_attr('sensor.theme', 'themes') and theme in state_attr('sensor.theme', 'themes') %}
              {{ state_attr('sensor.theme', 'themes')[theme]['primary_hue'] }}
            {% else %}
              0,100
            {% endif %}
          secondary_color: >
            {%- set theme = states('input_select.theme') -%}
            {% if state_attr('sensor.theme', 'themes') and theme in state_attr('sensor.theme', 'themes') %}
              {{ state_attr('sensor.theme', 'themes')[theme]['secondary'] }}
            {% else %}
              0,100
            {% endif %}
          secondary_color_hue: >
            {%- set theme = states('input_select.theme') -%}
            {% if state_attr('sensor.theme', 'themes') and theme in state_attr('sensor.theme', 'themes') %}
              {{ state_attr('sensor.theme', 'themes')[theme]['secondary_hue'] }}
            {% else %}
              0,100
            {% endif %}
          themes: >-
            {{ {
              "Tron": {
                "primary": [53, 100],
                "primary_12v": [53, 100],
                "primary_eglo": [53, 20],
                "primary_hue": [45, 100],
                "secondary": [179, 100],
                "secondary_hue": [199, 100]
              },
              "Vaporwave": {
                "primary": [315, 100],
                "primary_12v": [315, 100],
                "primary_eglo": [315, 20],
                "primary_hue": [320, 100],
                "secondary": [170, 100],
                "secondary_hue": [180, 100]
              },
              "Ocean": {
                "primary": [165, 100],
                "primary_12v": [165, 100],
                "primary_eglo": [165, 20],
                "primary_hue": [180, 100],
                "secondary": [210, 100],
                "secondary_hue": [210, 97]
              },
              "Halloween": {
                "primary": [30, 100],
                "primary_12v": [40, 100],
                "primary_eglo": [50, 20],
                "primary_hue": [25, 100],
                "secondary": [274, 100],
                "secondary_hue": [263, 100]
              },
              "Christmas": {
                "primary": [0, 100],
                "primary_12v": [0, 100],
                "primary_eglo": [0, 20],
                "primary_hue": [0, 100],
                "secondary": [120, 100],
                "secondary_hue": [140, 100]
              },
              "Little": {
                "primary": [300, 70],
                "primary_12v": [300, 70],
                "primary_eglo": [300, 15],
                "primary_hue": [285, 90],
                "secondary": [220, 70],
                "secondary_hue": [225, 70]
              },
              "Portal": {
                "primary": [30, 100],
                "primary_12v": [40, 100],
                "primary_eglo": [50, 20],
                "primary_hue": [26, 100],
                "secondary": [220, 100],
                "secondary_hue": [240, 100]
              },
              "Portal Inverted": {
                "primary": [220, 100],
                "primary_12v": [220, 100],
                "primary_eglo": [220, 20],
                "primary_hue": [240, 100],
                "secondary": [30, 100],
                "secondary_hue": [26, 100]
              },
              "Dragon": {
                "primary": [274, 100],
                "primary_12v": [274, 100],
                "primary_eglo": [274, 20],
                "primary_hue": [263, 100],
                "secondary": [120, 100],
                "secondary_hue": [140, 100]
              },
              "Demon": {
                "primary": [0, 100],
                "primary_12v": [0, 100],
                "primary_eglo": [0, 20],
                "primary_hue": [0, 100],
                "secondary": [274, 100],
                "secondary_hue": [263, 100]
              },
              "Red and Blue": {
                "primary": [0, 100],
                "primary_12v": [0, 100],
                "primary_eglo": [0, 20],
                "primary_hue": [0, 100],
                "secondary": [240, 100],
                "secondary_hue": [255, 100]
              },
              "Yellow and Green": {
                "primary": [53, 100],
                "primary_12v": [53, 100],
                "primary_eglo": [53, 20],
                "primary_hue": [45, 100],
                "secondary": [120, 100],
                "secondary_hue": [140, 100]
              },
              "Gold and Pink": {
                "primary": [45, 100],
                "primary_12v": [50, 100],
                "primary_eglo": [50, 20],
                "primary_hue": [45, 100],
                "secondary": [300, 100],
                "secondary_hue": [285, 90]
              },
              "Screaming Pink": {
                "primary": [315, 100],
                "primary_12v": [315, 100],
                "primary_eglo": [315, 20],
                "primary_hue": [330, 100],
                "secondary": [315, 100],
                "secondary_hue": [330, 100]
              },
              "Red": {
                "primary": [0, 100],
                "primary_12v": [0, 100],
                "primary_eglo": [0, 20],
                "primary_hue": [0, 100],
                "secondary": [0, 100],
                "secondary_hue": [0, 100]
              },
              "Green": {
                "primary": [105, 100],
                "primary_12v": [105, 100],
                "primary_eglo": [105, 20],
                "primary_hue": [125, 100],
                "secondary": [120, 100],
                "secondary_hue": [140, 100]
              },
              "Blue": {
                "primary": [240, 100],
                "primary_12v": [240, 100],
                "primary_eglo": [240, 20],
                "primary_hue": [255, 100],
                "secondary": [220, 100],
                "secondary_hue": [240, 100]
              },
              "Yellow": {
                "primary": [53, 100],
                "primary_12v": [53, 100],
                "primary_eglo": [53, 20],
                "primary_hue": [45, 100],
                "secondary": [44, 100],
                "secondary_hue": [44, 81]
              },
              "Purple": {
                "primary": [274, 100],
                "primary_12v": [274, 100],
                "primary_eglo": [274, 20],
                "primary_hue": [263, 100],
                "secondary": [263, 100],
                "secondary_hue": [263, 100]
              },
              "Orange": {
                "primary": [30, 100],
                "primary_12v": [40, 100],
                "primary_eglo": [50, 20],
                "primary_hue": [24, 100],
                "secondary": [29, 100],
                "secondary_hue": [30, 100]
              },
              "Spring Blossom": {
                "primary": [335, 40],
                "primary_12v": [325, 60],
                "primary_eglo": [325, 10],
                "primary_hue": [339, 58],
                "secondary": [350, 20],
                "secondary_hue": [327, 9]
              },
              "Slava Ukraini": {
                "primary": [240, 100],
                "primary_12v": [240, 100],
                "primary_eglo": [240, 20],
                "primary_hue": [255, 100],
                "secondary": [44, 100],
                "secondary_hue": [44, 81]
              },
              "Party": {
                "primary": [30, 100],
                "primary_12v": [40, 100],
                "primary_eglo": [50, 20],
                "primary_hue": [26, 100],
                "secondary": [220, 100],
                "secondary_hue": [240, 100]
              },
              "New Years": {
                "primary": [30, 100],
                "primary_12v": [40, 100],
                "primary_eglo": [50, 20],
                "primary_hue": [26, 100],
                "secondary": [220, 100],
                "secondary_hue": [240, 100]
              }
            } | tojson }}
      - name: Inactive Light Profile
        state: >
          {% set profile = states('input_select.light_profile') %}
          {% set profiles = state_attr('input_select.light_profile', 'options') %}
          {{ profiles[profiles.index(profile)+1] or 'Off' }}

scene:
  - name: Bright
    entities:
      script.activate_bright_scene:
        state: "on"
  - name: Default
    entities:
      script.activate_default_scene:
        state: "on"
  - name: Dimmed
    entities:
      script.activate_dimmed_scene:
        state: "on"
  - name: Ambient
    entities:
      script.activate_ambient_scene:
        state: "on"
  - name: Night
    entities:
      script.activate_night_scene:
        state: "on"
  - name: "Off"
    entities:
      script.activate_off_scene:
        state: "on"

script:
  dim_light_profile:
    sequence:
      event: decrease_light_profile
  brighten_light_profile:
    sequence:
      event: increase_light_profile
  activate_bright_scene:
    sequence:
      event: set_light_profile
      event_data:
        profile: Bright
  activate_default_scene:
    sequence:
      event: set_light_profile
      event_data:
        profile: Default
  activate_dimmed_scene:
    sequence:
      event: set_light_profile
      event_data:
        profile: Dimmed
  activate_ambient_scene:
    sequence:
      event: set_light_profile
      event_data:
        profile: Ambient
  activate_night_scene:
    sequence:
      event: set_light_profile
      event_data:
        profile: Night
  activate_off_scene:
    sequence:
      event: set_light_profile
      event_data:
        profile: "Off"

  toggle_light_profile:
    description: Switch between light profiles. If the selected profile is already active, the light will be turned off.
    fields:
      room:
        description: The room to toggle the light profile in (optional)
        example: "stue"
      profile:
        description: The profile to toggle to
        example: "Bright"
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ is_state('sensor.'+room+'_light_profile', profile) if room else is_state('input_select.light_profile', profile) }}"
            sequence:
              event: set_light_profile
              event_data:
                room: "{{ room if room else '' }}"
                profile: "Off"
        default:
          event: set_light_profile
          event_data:
            room: "{{ room if room else '' }}"
            profile: "{{ profile }}"

  select_new_years_theme:
    alias: Select New Years Theme
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.theme
          option: New Years

  difficult_light:
    alias: Difficult light
    mode: parallel
    variables:
      previous_state: |
        {% if is_state(entity_id, 'off') %}
          off
        {% else %}
          on
        {% endif %}
      previous_brightness: "{{ (state_attr(entity_id, 'brightness') or 1) if previous_state != 'off' else 1 }}"
      new_mode: "{{ 'color' if hs_color else 'white' }}"
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ new_mode == 'white' }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ entity_id }}"
                data:
                  brightness: "{{ previous_brightness }}"
                  color_temp: "{{ color_temp }}"
                  transition: 0
              - delay: 0.5
              - service: light.turn_on
                target:
                  entity_id: "{{ entity_id }}"
                data:
                  brightness: "{{ brightness }}"
                  color_temp: "{{ color_temp }}"
                  transition: "{{ transition }}"
          - conditions:
              - condition: template
                value_template: "{{ new_mode == 'color' }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ entity_id }}"
                data:
                  brightness: "{{ previous_brightness }}"
                  hs_color: "{{ hs_color }}"
                  transition: 0
              - delay: 0.5
              - service: light.turn_on
                target:
                  entity_id: "{{ entity_id }}"
                data:
                  brightness: "{{ brightness }}"
                  hs_color: "{{ hs_color }}"
                  transition: "{{ transition }}"

  hue_scene_or_light_profile:
    mode: parallel
    # Apply Hue Scene if available, otherwise apply fallback scene data
    alias: Hue Scene or Light Profile
    fields:
      room:
        description: The room to set the scene in
        example: "Stue"
      scene:
        description: The scene to check for
        example: "Party"
      fallback_scene:
        description: Fallback scene to apply, if the scene is not found
        example: >-
          {
            "transition": "0.5",
            "entities": {
              "light.spisebord": {
                "state": "on",
                "brightness": 128,
                "color_temp": 430,
                "effect": "None"
              }
            }
          }
    variables:
      room_entity: "{{ 'light.'+(room|lower|replace(' ','_')|replace('Ã¦','ae'))+'_room' }}"
      hue_scene_states: >-
        {
        {% for id in fallback_scene.entities %}
          {% set entity = fallback_scene.entities[id] %}
            "{{id}}": {
              "state": {{entity.state}}
              {% if entity.state %}
              ,"brightness": {{entity.brightness}}
              {% endif %}
            }{{ ',' if not loop.last }}
        {% endfor %}
        }
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states(room_entity) != 'unknown' and scene in state_attr(room_entity, 'hue_scenes') }}"
            sequence:
              - service: hue.hue_activate_scene
                data:
                  group_name: "{{ room }}"
                  scene_name: "{{ scene }}"
                  dynamic: true
              - delay:
                  seconds: 1
              - service: scene.apply
                data:
                  entities: "{{ hue_scene_states }}"
        default:
          - service: scene.apply
            data:
              transition: "{{ fallback_scene.transition }}"
              entities: "{{ fallback_scene.entities }}"

  wled_preset_or_light_profile:
    mode: parallel
    # Apply WLED Preset if available, otherwise apply fallback scene data
    alias: WLED Preset or Light Profile
    fields:
      preset:
        description: The preset to check for
        example: "Party"
      entities:
        description: Fallback scene to apply, if the preset is not found
        example: >-
          {
            "light.stue_gardinstang": {
              "state": True,
              "brightness": 128,
              "color_temp": 430,
              "effect": "None"
            }
          }
    variables:
      preset_entities: >-
        {% set ns = namespace(ret={}) %}
        {% for entity in entities.keys()|list %}
          {% set device_id = device_id(entity) %}
          {% set device_entities = device_entities(device_id) %}
          {% set preset_select_entity = namespace(entity_id='') %}
          {% for entity_id in device_entities %}
            {% if entity_id.startswith('select.') and entity_id.endswith('_preset') %}
              {% set preset_select_entity.entity_id = entity_id %}
              {% break %}
            {% endif %}
          {% endfor %}
          {% if preset_select_entity.entity_id and preset in state_attr(preset_select_entity.entity_id, 'options') %}
            {% if preset_select_entity.entity_id in ns.ret.keys()|list %}
              {% set ns.ret = dict(ns.ret, **{preset_select_entity.entity_id: (ns.ret[preset_select_entity.entity_id]+[entity])}) %}
            {% else %}
              {% set ns.ret = dict(ns.ret, **{preset_select_entity.entity_id: [entity]}) %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ ns.ret }}
      scene_entities: >-
        [
        {% for entity in entities.keys()|list -%}
          {% set device_id = device_id(entity) %}
          {% set device_entities = device_entities(device_id) %}
          {% set preset_select_entity = namespace(entity_id='') %}
          {% for entity_id in device_entities %}
            {% if entity_id.startswith('select.') and entity_id.endswith('_preset') %}
              {% set preset_select_entity.entity_id = entity_id %}
              {% break %}
            {% endif %}
          {% endfor %}
          {%- if preset_select_entity.entity_id and preset not in state_attr(preset_select_entity.entity_id, 'options') -%}
          "{{ entity }}",
          {%- endif%}
        {% endfor %}
        ]
    sequence:
      - repeat:
          for_each: "{{ preset_entities.keys()|unique|list }}"
          sequence:
            - service: script.turn_on
              target:
                entity_id: script.wled_preset
              data:
                variables:
                  preset: "{{ preset }}"
                  preset_select_entity: "{{ repeat.item }}"
                  entities: >-
                    {
                      {% for entity_id in preset_entities[repeat.item]|unique|list %}
                        {% set scene = entities[entity_id] %}
                        "{{ entity_id }}": {
                          {% for item in scene %}
                            {% set value = scene[item] %}
                            "{{ item }}": {{ '"' if value is string }}{{ value }}{{ '"' if value is string }}{{ ',' if not loop.last }}
                          {% endfor %}
                        }{{ ',' if not loop.last }}
                      {% endfor %}
                    }
      - service: scene.apply
        data:
          transition: "{{ (states('input_number.scene_transition_time') | float or 0.5) }}"
          entities: >-
            {
              {% for entity_id in scene_entities|unique|list %}
                {% set scene = entities[entity_id] %}
                "{{ entity_id }}": {{scene}}{{ ',' if not loop.last }}
              {% endfor %}
            }

  wled_preset:
    mode: parallel
    # Apply WLED Preset
    fields:
      preset:
        description: The preset to check for
        example: "Party"
      preset_select_entity:
        description: The preset select entity to set
        example: "input_select.stue_gardinstang_preset"
      entities:
        description: Scene to apply on top of preset
        example: >-
          light.tv_mobel: {
            "state": True,
            "brightness": 128,
            "color_temp": 430,
            "effect": "None"
          }
    sequence:
      - service: select.select_option
        data:
          entity_id: "{{ preset_select_entity }}"
          option: "{{ preset }}"
      - delay:
          seconds: 1
      - service: scene.apply
        data:
          transition: "{{ (states('input_number.scene_transition_time') | float or 0.5) }}"
          entities: >-
            {
              {% for entity_id in entities|unique|list %}
                {% set scene = entities[entity_id] %}
                "{{ entity_id }}": {
                  "state": {{ scene.state }}
                  {% if scene.state %}
                  ,"brightness": {{ scene.brightness }}
                  {% endif %}
                }{{ ',' if not loop.last }}
              {% endfor %}
            }

automation:
  - alias: Reset Scene Transition Time
    id: reset_scene_transition_time
    initial_state: true
    trigger:
      platform: template
      value_template: "{% if as_timestamp(now()) - as_timestamp(states.input_number.scene_transition_time.last_updated) > 60 %}true{% endif %}"
    action:
      - service: input_number.set_value
        data:
          entity_id: "input_number.scene_transition_time"
          value: 0.5

  - alias: Refresh Light Profile Event On Theme Change
    id: refresh_light_profile_event_on_theme_change
    initial_state: true
    trigger:
      - platform: state
        entity_id: input_select.theme
    action:
      - event: refresh_light_profile

  - alias: Apartment light level initializer
    id: apartment_light_level_initializer
    initial_state: true
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: light.turn_on
        data:
          entity_id: light.apartment_light_level
          brightness: 127
      - delay:
          seconds: 2
      - event: refresh_light_profile

  - alias: Apartment light level setter
    id: apartment_light_level_setter
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: light.apartment_light_level
        value_template: "{{ state.attributes.brightness }}"
        below: 120
      - platform: numeric_state
        entity_id: light.apartment_light_level
        value_template: "{{ state.attributes.brightness }}"
        above: 135
    action:
      - event: "{{ 'decrease' if states.light.apartment_light_level.attributes.brightness | int < 120 else 'increase' }}_light_profile"
      - service: light.turn_on
        data:
          entity_id: light.apartment_light_level
          brightness: 127

  # Room States and light profile #
  # bathroom
  # bedroom
  # hallway
  # kitchen
  # living_room
  # office
  # workshop
  # balcony

  - alias: Set Light Profile
    id: set_light_profile
    initial_state: true
    mode: queued
    trigger:
      - platform: event
        event_type: set_light_profile
    variables:
      room: "{{ trigger.event.data.room }}"
      profile: "{{ trigger.event.data.profile }}"
      room_separate: "{{ not not room and is_state('input_boolean.'+room+'_separate_light_profile', 'on') }}"
      light_profile_entity: >
        {%- if room_separate -%}
          input_select.{{ room }}_light_profile
        {%- else -%}
          input_select.light_profile
        {%- endif -%}
    action:
      - service: input_select.select_option
        data:
          entity_id: "{{ light_profile_entity }}"
          option: "{{ profile }}"
      - event: debug
        event_data:
          room: "{{ room }}"
          profile: "{{ profile }}"
          room_separate: "{{ room_separate }}"

  - alias: Increase Light Profile
    id: increase_light_profile
    initial_state: true
    mode: queued
    trigger:
      - platform: event
        event_type: increase_light_profile
    variables:
      room: "{{ trigger.event.data.room }}"
      room_separate: "{{ not not room and is_state('input_boolean.'+room+'_separate_light_profile', 'on') }}"
      current_light_profile: "{{ states('sensor.' + room + '_light_profile' if room_separate else 'input_select.light_profile') }}"
      light_profile_entity: >
        {%- if room_separate -%}
          input_select.{{ room }}_light_profile
        {%- else -%}
          input_select.light_profile
        {%- endif -%}
    condition:
      - condition: template
        value_template: "{{ current_light_profile != 'Bright' }}"
    action:
      - service: input_select.select_previous
        data:
          entity_id: "{{ light_profile_entity }}"

  - alias: Decrease Light Profile
    id: decrease_light_profile
    initial_state: true
    mode: queued
    trigger:
      - platform: event
        event_type: decrease_light_profile
    variables:
      room: "{{ trigger.event.data.room }}"
      room_separate: "{{ not not room and is_state('input_boolean.'+room+'_separate_light_profile', 'on') }}"
      current_light_profile: "{{ states('sensor.' + room + '_light_profile' if room_separate else 'input_select.light_profile') }}"
      light_profile_entity: >
        {%- if room_separate -%}
          input_select.{{ room }}_light_profile
        {%- else -%}
          input_select.light_profile
        {%- endif -%}
    condition:
      - condition: template
        value_template: "{{ current_light_profile != 'Off' }}"
    action:
      - service: input_select.select_next
        data:
          entity_id: "{{ light_profile_entity }}"

  - alias: Cycle Light Profile
    id: cycle_light_profile
    initial_state: true
    mode: queued
    trigger:
      - platform: event
        event_type: cycle_light_profile
    variables:
      room: "{{ trigger.event.data.room }}"
      room_separate: "{{ not not room and is_state('input_boolean.'+room+'_separate_light_profile', 'on') }}"
      current_light_profile: "{{ states('sensor.' + room + '_light_profile' if room_separate else 'input_select.light_profile') }}"
      light_profile_entity: >
        {%- if room_separate -%}
          input_select.{{ room }}_light_profile
        {%- else -%}
          input_select.light_profile
        {%- endif -%}
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ current_light_profile == 'Bright' }}"
            sequence:
              - service: input_select.select_option
                data:
                  option: Night
                  entity_id: "{{ light_profile_entity }}"
          - conditions:
              - condition: template
                value_template: "{{ current_light_profile == 'Off' }}"
            sequence:
              - service: input_select.select_option
                data:
                  option: Default
                  entity_id: "{{ light_profile_entity }}"
        default:
          - service: input_select.select_previous
            data:
              entity_id: "{{ light_profile_entity }}"

  - alias: Room activity override on
    id: room_activity_override_on
    initial_state: true
    mode: parallel
    trigger:
      platform: state
      entity_id:
        - input_boolean.bathroom_activity_override
        - input_boolean.bedroom_activity_override
        - input_boolean.hallway_activity_override
        - input_boolean.kitchen_activity_override
        - input_boolean.living_room_activity_override
        - input_boolean.office_activity_override
        - input_boolean.workshop_activity_override
        - input_boolean.balcony_activity_override
      to: "on"
    action:
      - service: input_select.select_option
        data:
          entity_id: "input_select.{{ trigger.entity_id.replace('input_boolean.', '').replace('_activity_override', '') }}_room_state"
          option: "active"

  - alias: Room Separate Light Profile
    id: room_separate_light_profile
    initial_state: true
    mode: parallel
    trigger:
      platform: state
      entity_id:
        - input_boolean.bathroom_separate_light_profile
        - input_boolean.bedroom_separate_light_profile
        - input_boolean.hallway_separate_light_profile
        - input_boolean.kitchen_separate_light_profile
        - input_boolean.living_room_separate_light_profile
        - input_boolean.office_separate_light_profile
        - input_boolean.workshop_separate_light_profile
        - input_boolean.balcony_separate_light_profile
    variables:
      room: "{{ trigger.entity_id.replace('input_boolean.', '').replace('_separate_light_profile', '') }}"
    action:
      - service: input_select.select_option
        data:
          entity_id: "input_select.{{ room }}_light_profile"
          option: "{{ states('input_select.light_profile') }}"

  - alias: Room State Active Trigger
    id: room_state_active_trigger
    initial_state: true
    mode: parallel
    trigger:
      platform: state
      entity_id:
        - binary_sensor.bathroom_activity
        - binary_sensor.bedroom_activity
        - binary_sensor.hallway_activity
        - binary_sensor.kitchen_activity
        - binary_sensor.living_room_activity
        - binary_sensor.office_activity
        - binary_sensor.workshop_activity
        - binary_sensor.balcony_activity
      to: "on"
    condition:
      condition: template
      value_template: "{{ 'True' if is_state('input_boolean.' + trigger.entity_id.replace('binary_sensor.', '').replace('_activity', '') + '_activity_override', 'off') }}"
    action:
      service: input_select.select_option
      data:
        entity_id: "input_select.{{ trigger.entity_id.replace('binary_sensor.', '').replace('_activity', '') }}_room_state"
        option: "active"

  - alias: Room State Inactive Trigger
    id: room_state_inactive_trigger
    initial_state: true
    mode: parallel
    trigger:
      - platform: state
        entity_id: binary_sensor.bathroom_activity
        to: "off"
        for:
          minutes: 5
      - platform: state
        entity_id: binary_sensor.bedroom_activity
        to: "off"
        for:
          minutes: 2
      - platform: state
        entity_id: binary_sensor.hallway_activity
        to: "off"
        for:
          minutes: 2
      - platform: state
        entity_id: binary_sensor.kitchen_activity
        to: "off"
        for:
          minutes: 2
      - platform: state
        entity_id: binary_sensor.living_room_activity
        to: "off"
        for:
          minutes: 2
      - platform: state
        entity_id: binary_sensor.office_activity
        to: "off"
        for:
          minutes: 2
      - platform: state
        entity_id: binary_sensor.workshop_activity
        to: "off"
        for:
          minutes: 2
      - platform: state
        entity_id: binary_sensor.balcony_activity
        to: "off"
        for:
          minutes: 2
    condition:
      condition: template
      value_template: "{{ 'True' if is_state('input_boolean.' + trigger.entity_id.replace('binary_sensor.', '').replace('_activity', '') + '_activity_override', 'off') }}"
    action:
      service: input_select.select_option
      data:
        entity_id: "input_select.{{ trigger.entity_id.replace('binary_sensor.', '').replace('_activity', '') }}_room_state"
        option: "inactive"

  - alias: Room State Off Trigger
    id: room_state_off_trigger
    initial_state: true
    mode: parallel
    trigger:
      - platform: state
        entity_id: binary_sensor.bathroom_activity
        to: "off"
        for:
          minutes: 10
      - platform: state
        entity_id: binary_sensor.bedroom_activity
        to: "off"
        for:
          minutes: 4
      - platform: state
        entity_id: binary_sensor.hallway_activity
        to: "off"
        for:
          minutes: 4
      - platform: state
        entity_id: binary_sensor.kitchen_activity
        to: "off"
        for:
          minutes: 4
      - platform: state
        entity_id: binary_sensor.living_room_activity
        to: "off"
        for:
          minutes: 4
      - platform: state
        entity_id: binary_sensor.office_activity
        to: "off"
        for:
          minutes: 4
      - platform: state
        entity_id: binary_sensor.workshop_activity
        to: "off"
        for:
          minutes: 4
      - platform: state
        entity_id: binary_sensor.balcony_activity
        to: "off"
        for:
          minutes: 4
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ 'True' if is_state('input_boolean.' + trigger.entity_id.replace('binary_sensor.', '').replace('_activity', '') + '_activity_override', 'off') else 'False' }}"
    action:
      service: input_select.select_option
      data:
        entity_id: "input_select.{{ trigger.entity_id.replace('binary_sensor.', '').replace('_activity', '') }}_room_state"
        option: "off"
