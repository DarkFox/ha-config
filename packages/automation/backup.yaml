sensor:
  - platform: command_line
    command: 'curl http://supervisor/backups -H "Authorization: Bearer $(printenv SUPERVISOR_TOKEN)"'
    name: Latest Backup
    value_template: >
      {% set backups = value_json.data.backups|sort(attribute='date', reverse=True) %}
      {{ backups[0].name }}
    scan_interval: 60

shell_command:
  prune_backups: cd /config/backups/ && ls -A1t | tail -n +8 | xargs rm -v

automation:
  - alias: Backup and Dropbox upload
    initial_state: true
    trigger:
      platform: time
      at: "03:00:00"
    condition:
      condition: time
      weekday:
        - sun
        - wed
    variables:
      name: "Automated Backup {{ now().strftime('%Y-%m-%d') }}"
    action:
      - service: persistent_notification.create
        data:
          message: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}: Starting backup"
          title: "{{ name }}"
      - service: hassio.backup_full
        data:
          name: "{{ name }}"
      - wait_template: "{{ states('sensor.latest_backup') == name }}"
        timeout: "02:00:00"
      - service: persistent_notification.create
        data:
          message: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}: Backup done. Syncing to Dropbox"
          title: "{{ name }}"
      - service: hassio.addon_stdin
        data:
          addon: 7be23ff5_dropbox_sync
          input: { "command": "upload" }
      - service: shell_command.prune_backups
