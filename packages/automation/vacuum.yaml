script:
  toggle_vacuum:
    alias: "Toggle Vacuum"
    sequence:
      - alias: "Start if docked, otherwise go back to dock"
        choose:
          - conditions:
              - alias: "Is vacuum docked"
                condition: state
                entity_id: vacuum.valetudo_roborocks5
                state: "docked"
            sequence:
              - alias: "Start cleaning"
                action: vacuum.start
                target:
                  entity_id: vacuum.valetudo_roborocks5
        default:
          - alias: "Back to dock"
            action: vacuum.return_to_base
            target:
              entity_id: vacuum.valetudo_roborocks5

  send_vacuum_to_emptying_position:
    alias: "Send støvsuger til tømmeposition"
    sequence:
      - action: script.valetudo_go_to_target
        data:
          x_coord: 2710
          y_coord: 2449
      - alias: "update last empty count"
        action: input_text.set_value
        data:
          entity_id: input_text.vacuum_last_empty
          value: "{{ (states('sensor.valetudo_roborocks5_total_statistics_area')|float)/10000 }}"

  valetudo_go_to_target:
    alias: "Valetudo go to target"
    fields:
      x_coord:
        name: X coordinate
      y_coord:
        name: Y coordinate
    sequence:
      action: script.valetudo_send_vacuum_command
      data:
        mqtt_payload: |-
          {
            "coordinates": {
              "x": {{ x_coord }},
              "y": {{ y_coord }}
            }
          }
        mqtt_topic: GoToLocationCapability/go/set

input_boolean:
  vacuum_show_card:
    name: Vis Støvsuger Menu
    icon: mdi:menu

input_text:
  vacuum_last_empty:
    name: Vacuum Last Empty
    icon: mdi:delete

input_datetime:
  vacuum_last_clean:
    name: Vacuum Last Clean
    has_date: true
    has_time: true
    icon: mdi:calendar

input_number:
  vacuum_m2_before_empty:
    name: Vacuum m2 before empty
    icon: mdi:delete
    min: 50
    max: 500
    step: 10

template:
  - sensor:
      - name: Vaccum Area Cleaned Since Last Empty
        unique_id: a826e687-2c46-42d0-8d7f-3f4ab7e44e8d
        state: "{{ ((states('sensor.valetudo_roborocks5_total_statistics_area')|float/10000) - (states('input_text.vacuum_last_empty')|float)) | round(1) }}"
        unit_of_measurement: "m2"

      - name: Vacuum Current Room
        unique_id: a62cc7c9-3942-4de2-8919-a270bcd00309
        state: "{{ (state_attr('camera.valetudo_s5_camera', 'vacuum_position') or {}).get('in_room', 'unknown') }}"

      - name: "Valetudo segments mapping"
        unique_id: 0eff51a2-7e39-4eb2-b744-33323d128e3e
        state: "OK"
        attributes:
          segments: >-
            {% set rooms = state_attr('camera.valetudo_s5_camera', 'rooms') or [] %}
            {% set icons = {
              "Værksted": "mdi:hand-saw",
              "Kontor": "mdi:desktop-tower-monitor",
              "Soveværelse": "mdi:bed",
              "Gang": "mdi:door",
              "Køkken": "mdi:food-fork-drink",
              "Stue": "mdi:sofa"
            } %}
            [
              {% for room_id in rooms %}
                {% set room = rooms[room_id] %}
                {
                  "id": {{ room_id }},
                  "outline": {{ room.outline }},
                  "label": {
                    "text": "{{ room.name }}",
                    "x": {{ room.x }},
                    "y": {{ room.y }},
                    "offset_y": 30
                  },
                  "icon": {
                    "name": "{{ icons[room.name] }}",
                    "x": {{ room.x }},
                    "y": {{ room.y }}
                  }
                },
              {% endfor %}
            ]

  - trigger:
      trigger: state
      entity_id: sensor.valetudo_roborocks5_error
    sensor:
      - name: Vacuum Errors
        unique_id: 8a645f9a-8dcb-43ee-a1d3-c0c400ff1583
        state: "{{ state_attr('sensor.vacuum_errors', 'errors') | default([]) | length }}"
        unit_of_measurement: "errors"
        attributes:
          errors: >-
            {% set state = trigger.to_state.state %}
            {% if state|lower in ['no error', 'unknown', 'unavailable'] %}
              {{ [] }}
            {% else %}
              {% set errors = (state_attr('sensor.vacuum_errors', 'errors') | default([])) + [state] %}
              {{ ns.errors | unique | list }}
            {% endif %}

automation:
  - id: update_vacuum_last_clean
    alias: Update Vacuum Last Clean
    initial_state: true
    triggers:
      - trigger: state
        entity_id: vacuum.valetudo_roborocks5
        from: cleaning
    actions:
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.vacuum_last_clean
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

  - id: vacuum_show_menu_when_undocked
    alias: Vacuum Show Menu When Undocked
    initial_state: true
    triggers:
      - trigger: state
        entity_id: vacuum.valetudo_roborocks5
        to:
          - cleaning
          - paused
          - idle
          - returning
          - error
    actions:
      - action: input_boolean.turn_on
        target:
          entity_id: input_boolean.vacuum_show_card

  - id: vacuum_hide_menu_when_docked
    alias: Vacuum Hide Menu When Docked
    initial_state: true
    triggers:
      - trigger: state
        entity_id: vacuum.valetudo_roborocks5
        to: "docked"
    actions:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.vacuum_show_card

  - id: vacuum_while_away
    alias: Vacuum While Away
    initial_state: true
    triggers:
      - trigger: time_pattern
        hours: "11"
        minutes: "/5"
        seconds: "0"
      - trigger: time_pattern
        hours: "15"
        minutes: "/5"
        seconds: "0"
    conditions:
      - condition: state
        entity_id:
          - calendar.helligdage
          - input_boolean.guests
        state: "off"
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
      - condition: state
        entity_id: vacuum.valetudo_roborocks5
        state: "docked"
      - condition: state
        entity_id: binary_sensor.martin_presence_delayed
        state: "off"
      - condition: template
        alias: "At least 8 hours since last clean"
        value_template: >-
          {{ states('input_datetime.vacuum_last_clean')|as_timestamp < now()|as_timestamp - 8*60*60 }}
    actions:
      - action: vacuum.start
        target:
          entity_id: vacuum.valetudo_roborocks5

  - id: vacuum_stop_before_coming_home
    alias: Vacuum Stop Before Coming Home
    initial_state: true
    triggers:
      - trigger: state
        entity_id: binary_sensor.martin_home_soon
        from: "off"
        to: "on"
        for:
          minutes: 5
      - trigger: state
        entity_id: binary_sensor.martin_presence
        from: "off"
        to: "on"
        for:
          minutes: 1
    actions:
      - alias: "Go to empty position if more than 120m2 since last empty"
        choose:
          - conditions:
              - condition: template
                value_template: "{{ states('sensor.vacuum_area_cleaned_since_last_empty')|int > states('input_number.vacuum_m2_before_empty')|int }}"
            sequence:
              - action: script.send_vacuum_to_emptying_position
        default:
          # Go to dock if not going to empty, and not docked already
          - condition: template
            value_template: "{{ not is_state('vacuum.valetudo_roborocks5', 'docked') }}"
          - action: vacuum.return_to_base

  - id: vacuum_error_notification
    alias: Vacuum Error Notification
    initial_state: true
    triggers:
      - trigger: numeric_state
        entity_id: sensor.vacuum_errors
        above: 0
        for:
          seconds: 10
    variables:
      errors: "{{ state_attr('sensor.vacuum_errors', 'errors') }}"
      t: "{{ state_attr('sensor.translation_cache', 'translations') | default({}) }}"
    actions:
      - repeat:
          for_each: "{{ errors }}"
          sequence:
            - action: script.translate
              data:
                message: "{{ repeat.item }}"
      - delay:
          seconds: 1
      - action: script.notify_everywhere
        data:
          message: |-
            Støvsuger fejl:
            {% for error in errors %}
              - {{ t.get(error, error) }}
            {% endfor %}
