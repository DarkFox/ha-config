input_text:
  active_media_player:
  active_media_type:
  work_phone_caller:
    initial: ""

input_boolean:
  work_phone_ringing:
  work_phone_picked_up:

template:
  - trigger:
      platform: event
      event_type:
        - work_call_received
        - work_call_ended
    sensor:
      - name: "Current Work Call"
        state: "{{ trigger.event.data.phone_number if trigger.event.event_type == 'work_call_received' }}"
        attributes:
          phone_number: "{{ trigger.event.data.phone_number if trigger.event.event_type == 'work_call_received' }}"
          formatted_phone: "{{ trigger.event.data.phone_number | string | regex_findall(find='..') | join(' ') if trigger.event.event_type == 'work_call_received' }}"
          caller_info: "{{ trigger.event.data.caller_info if trigger.event.event_type == 'work_call_received' }}"
          line: "{{ trigger.event.data.line if trigger.event.event_type == 'work_call_received' }}"
          start: "{{ as_timestamp(now()) | timestamp_custom('%Y-%m-%d %H:%M:%S', true) if trigger.event.event_type == 'work_call_received' }}"

  - trigger:
      platform: event
      event_type:
        - work_call_ended
        - clear_work_call_log
    sensor:
      - name: "Work Call Log"
        state: >
          {% if trigger.event.event_type == 'clear_work_call_log' %}
            0
          {% else %}
            {% if trigger.event.data.get('call_info', {}).get('phone_number', '')|string != '' %}
              {{ ((state_attr('sensor.work_call_log', 'call_log') or {})|length)+1 }}
            {% else %}
              {{ state_attr('sensor.work_call_log', 'call_log')|length }}
            {% endif %}
          {% endif %}
        attributes:
          call_log: |
            {% from 'datediff.jinja' import datetime_diff %}
            {% if trigger.event.event_type == 'clear_work_call_log' %}
              {}
            {% else %}
              {% set old_call_log = state_attr('sensor.work_call_log', 'call_log') or {} %}
              {% set current_call = trigger.event.data.get('call_info', {}) %}
              {% if current_call.get('phone_number', '')|string != '' %}
                {% set caller_info = current_call['caller_info'] or {} %}
                {% set start = current_call.get('start', now()) %}
                {% set start_ts = start | as_timestamp | int  %}
                {% set end_ts = as_timestamp(now()) | int %}
                {% set end = end_ts | timestamp_custom('%Y-%m-%d %H:%M:%S', true) %}
                {% set duration = end_ts - start_ts %}
                {% set diff = start+' > '+datetime_diff(start, end) %}
                {% set new_caller = {
                  'phone_number': current_call.get('phone_number', ''),
                  'formatted_phone': current_call.get('formatted_phone', ''),
                  'name': caller_info.get('name', ''),
                  'title': caller_info.get('title', ''),
                  'organization': caller_info.get('organization', ''),
                  'email': caller_info.get('email', ''),
                  'line': current_call.get('line', ''),
                  'start': current_call.get('start', ''),
                  'end': end,
                  'duration': duration,
                  'diff':diff,
                  'picked_up': ('Ja' if current_call.get('picked_up', False) else 'Nej')
                } %}
                {
                  {% for key, value in old_call_log.items() %}
                    "{{key}}": {{ value | tojson }},
                  {% endfor %}
                  "{{ new_caller['start'] }}": {{ new_caller | tojson }}
                }
              {% else %}
                {{ old_call_log | tojson }}
              {% endif %}
            {% endif %}

  - sensor:
      - name: "Reverse Work Call Log"
        state: "{{ state_attr('sensor.work_call_log', 'call_log')|length if state_attr('sensor.work_call_log', 'call_log') else 0 }}"
        attributes:
          call_log: |
            {% set call_log = state_attr('sensor.work_call_log', 'call_log') or {} %}
            {% set call_log_keys = call_log.keys() | list %}
            {
              {% for key in call_log_keys | reverse %}
                "{{ key }}": {{ call_log[key] | replace('>', '&shy;>') }}
                {{ ',' if not loop.last}}
              {% endfor %}
            }

automation:
  - alias: Pause Media On Phone Call
    id: pause_media_on_phone_call
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - sensor.arbejdstelefon_phone_state
          - sensor.darkphone_phone_state
        to:
          - ringing
          - offhook
        from: idle
    condition:
      - condition: state
        entity_id: binary_sensor.martin_presence
        state: "on"
    action:
      - service: script.turn_on
        entity_id: script.pause_all_media

  - alias: Unpause On Phone Call Finished
    id: unpause_media_on_phone_call_finished
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - sensor.arbejdstelefon_phone_state
          - sensor.darkphone_phone_state
        to: idle
    condition:
      - condition: state
        entity_id: binary_sensor.martin_presence
        state: "on"
    action:
      - service: script.turn_on
        entity_id: script.resume_all_media

  - alias: On Call Ringing While Sleeping
    id: on_call_ringing_while_sleeping
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.arbejdstelefon_phone_state
        to: ringing
    condition:
      - condition: state
        entity_id: binary_sensor.martin_presence
        state: "on"
      - condition: state
        entity_id: binary_sensor.on_call
        state: "on"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_select.sleep_state
                state:
                  - "sleeping"
                  - "smart wake"
            sequence:
              - service: input_select.select_option
                data:
                  entity_id: input_select.sleep_state
                  option: paused
              - event: set_light_profile
                event_data:
                  room: bedroom
                  profile: Night

  - alias: On Call Picked Up
    id: on_call_picked_up
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.arbejdstelefon_phone_state
        to: offhook
    condition:
      - condition: state
        entity_id: binary_sensor.martin_presence
        state: "on"
      - condition: state
        entity_id: binary_sensor.on_call
        state: "on"
      - condition: state
        entity_id: input_select.sleep_state
        state:
          - "sleeping"
          - "smart wake"
          - "paused"
    action:
      - event: set_light_profile
        event_data:
          room: bedroom
          profile: Ambient
      - delay:
          seconds: 30
      - condition: state
        entity_id: sensor.arbejdstelefon_phone_state
        state: offhook
      - event: set_light_profile
        event_data:
          room: bedroom
          profile: Dimmed

  - alias: On Call Done
    id: on_call_done
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.arbejdstelefon_phone_state
        from: "offhook"
        to: "idle"
        for:
          minutes: 2
      - platform: state
        entity_id: device_tracker.pc074805
        to: "not_home"
        for:
          seconds: 30
    condition:
      - condition: state
        entity_id: binary_sensor.martin_presence
        state: "on"
      - condition: state
        entity_id: binary_sensor.on_call
        state: "on"
      - condition: state
        entity_id: device_tracker.pc074805
        state: "not_home"
      - condition: state
        entity_id: sensor.arbejdstelefon_phone_state
        state: "idle"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_select.sleep_state
                state:
                  - "paused"
            sequence:
              - event: set_light_profile
                event_data:
                  room: bedroom
                  profile: "Off"
              - service: input_select.select_option
                data:
                  entity_id: input_select.sleep_state
                  option: sleeping

  - alias: On Call Not Picked Up
    id: on_call_not_picked_up
    initial_state: true
    trigger:
      - platform: state
        entity_id: input_boolean.work_phone_ringing
        to: "off"
        for:
          seconds: 5
    condition:
      - condition: state
        entity_id: sensor.arbejdstelefon_phone_state
        state: "idle"
      - condition: state
        entity_id: binary_sensor.martin_presence
        state: "on"
      - condition: state
        entity_id: binary_sensor.on_call
        state: "on"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_select.sleep_state
                state:
                  - "paused"
            sequence:
              - event: set_light_profile
                event_data:
                  room: bedroom
                  profile: "Off"
              - service: input_select.select_option
                data:
                  entity_id: input_select.sleep_state
                  option: sleeping

  - alias: Work phone caller lookup
    id: work_phone_caller_lookup
    initial_state: true
    trigger:
      - platform: state
        entity_id: input_text.work_phone_caller
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state not in ['', 'unavailable', 'unknown'] }}"
      - condition: state
        entity_id: sensor.arbejdstelefon_phone_state
        state:
          - "ringing"
          - "offhook"
    action:
      - variables:
          phone_number: "{{ states('input_text.work_phone_caller')[-8:] }}"
      - service: script.puzzel_lookup_caller
        response_variable: caller
        data:
          phone_number: "{{ phone_number }}"

      - service: script.puzzel_get_current_request
        response_variable: puzzel_request

      - variables:
          current_request: "{{ puzzel_request or {} }}"
          actual_phone_number: "{{ current_request.get('phone_number', '') or phone_number }}"
          actual_caller: "{{ current_request.get('caller', {}) or caller }}"
          line: "{{ caller.get('caller', {}).get('name', '') if current_request.get('phone_number') else ''}}"

      - event: work_call_received
        event_data:
          phone_number: "{{ actual_phone_number }}"
          caller_info: "{{ actual_caller }}"
          line: "{{ line }}"

  - alias: Work call picked up
    id: work_call_picked_up
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.arbejdstelefon_phone_state
        to: offhook
    action:
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.work_phone_picked_up

  - alias: Work call ended
    id: work_call_ended
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.arbejdstelefon_phone_state
        to: idle
        from:
          - ringing
          - offhook
    action:
      - event: work_call_ended
        event_data:
          call_info:
            phone_number: "{{ states('sensor.current_work_call') }}"
            formatted_phone: "{{ state_attr('sensor.current_work_call', 'formatted_phone') }}"
            caller_info: "{{ state_attr('sensor.current_work_call', 'caller_info') }}"
            line: "{{ state_attr('sensor.current_work_call', 'line') }}"
            start: "{{ state_attr('sensor.current_work_call', 'start') }}"
            picked_up: "{{ is_state('input_boolean.work_phone_picked_up', 'on') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.work_phone_caller
          value: ""
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.work_phone_picked_up

  - alias: Notify Work Call
    id: notify_work_call
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.current_work_call
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state not in ['unknown', 'unavailable', ''] }}"
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.attributes.caller_info is not none and trigger.to_state.attributes.caller_info != {} }}"
            sequence:
              - variables:
                  caller: "{{ trigger.to_state.attributes.caller_info }}"
                  name: "{{ caller.name }}"
                  title: "{{ caller.title }}"
                  email: "{{ caller.email }}"
                  organization: "{{ caller.organization }}"
                  formatted_phone: "{{ trigger.to_state.attributes.formatted_phone }}"
                  line: "{{ trigger.to_state.attributes.line }}"

              - service: notify.mobile_app_arbejdstelefon
                data:
                  title: "{{ name }}"
                  message: |
                    {{ title }} hos {{ organization }}.
                    Tlf: {{ formatted_phone }}
                    Email: {{ email }}
                    {{ 'Linje: ' + line if line != '' }}
                  data:
                    tag: "puzzel_caller"
                    channel: "Puzzel Caller"
                    importance: high
                    ttl: 0
                    priority: high
                    persistent: false
                    clickAction: noAction
                    notification_icon: mdi:phone-classic
              - service: notify.telegram_darkfox
                data:
                  message: |
                    Arbejdspkald fra {{ name }}
                    {{ title }} hos {{ organization }}.
                    Tlf: {{ formatted_phone }}
                    Email: {{ email }}
                    {{ 'Linje: ' + line if line != '' }}

        default:
          - service: notify.telegram_darkfox
            data:
              message: >-
                Arbejdsopkald fra ukendt nummer: {{ trigger.to_state.attributes.formatted_phone }}

script:
  notify_unknown_caller:
    alias: "Notify Unknown Caller"
    fields:
      phone_number:
        description: "The phone number of the unknown caller"
    sequence:
      - service: notify.telegram_darkfox
        data:
          message: >-
            Arbejdsopkald fra ukendt nummer: {{ phone_number | string | regex_findall(find='..') | join(' ') }}

  notify_caller_info:
    alias: "Notify Caller Info"
    fields:
      caller:
        description: "The caller object"
    sequence:
      - condition: template
        value_template: "{{ caller is not none and caller != {} }}"

      - variables:
          name: "{{ caller.firstName|trim }} {{ caller.lastName|trim }}"
          title: "{{ caller.title|trim }}"
          organization: "{{ caller.organizationName|trim }}"
          phone: "{{ caller.communicationPoints | selectattr('communicationType', 'equalto', 'Cell') | map(attribute='remoteAddress') | first }}"
          email: "{{ caller.communicationPoints | selectattr('communicationType', 'equalto', 'EMail') | map(attribute='remoteAddress') | first }}"

      - variables:
          formatted_phone: "{{ phone | string | regex_findall(find='..') | join(' ') }}"

      - service: notify.mobile_app_arbejdstelefon
        data:
          title: "{{ name }}"
          message: |
            {{ title }} hos {{ organization }}.
            Tlf: {{ formatted_phone }}
            Email: {{ email }}
          data:
            tag: "puzzel_caller"
            channel: "Puzzel Caller"
            importance: high
            ttl: 0
            priority: high
            persistent: false
            clickAction: noAction
            notification_icon: mdi:phone-classic
      - service: notify.telegram_darkfox
        data:
          message: |
            Arbejdspkald fra {{ name }}
            {{ title }} hos {{ organization }}.
            Tlf: {{ formatted_phone }}
            Email: {{ email }}

  clear_work_call_log:
    alias: "Clear Work Call Log"
    sequence:
      - alias: "Clears the work call log"
        event: clear_work_call_log

  pause_all_media:
    alias: "Sæt afspilning på pause"
    sequence:
      - service: input_text.set_value
        data:
          entity_id: input_text.active_media_player
          value: "{{ states('sensor.active_media_player') }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.active_media_type
          value: "{{ 'file' if state_attr(states('sensor.active_media_player'), 'media_duration') else 'stream' }}"
      - choose:
          - conditions:
              - condition: state
                entity_id: input_text.active_media_type
                state: "file"
            sequence:
              - service: "media_player.media_pause"
                data:
                  entity_id: "{{ states('input_text.active_media_player') }}"
          - conditions:
              - condition: state
                entity_id: input_text.active_media_type
                state: "stream"
            sequence:
              - service: "media_player.volume_mute"
                data:
                  entity_id: "{{ states('input_text.active_media_player') }}"
                  is_volume_muted: true

  resume_all_media:
    alias: "Genoptag afspilning"
    sequence:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_text.active_media_type
                state: "file"
            sequence:
              - service: "media_player.media_play"
                data:
                  entity_id: "{{ states('input_text.active_media_player') }}"
          - conditions:
              - condition: state
                entity_id: input_text.active_media_type
                state: "stream"
            sequence:
              - service: "media_player.volume_mute"
                data:
                  entity_id: "{{ states('input_text.active_media_player') }}"
                  is_volume_muted: false
