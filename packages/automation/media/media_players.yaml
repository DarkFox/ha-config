script:
  group_mute_toggle:
    fields:
      group:
        description: Group to mute or unmute
        example: "stue"
    variables:
      group_members: "{{ state_attr('media_player.'+group, 'group_members') }}"
      mute_states: >-
        {% set group_members = state_attr('media_player.'+group, 'group_members') %}
        [
        {% for member in group_members %}
          {{ state_attr(member, 'is_volume_muted') }}{{ ',' if not loop.last }}
        {% endfor %}
        ]
      any_muted: "{{ mute_states | select('equalto', true) | list | length > 0 }}"
    sequence:
      - service: media_player.volume_mute
        target:
          entity_id: "{{ group_members }}"
        data:
          is_volume_muted: "{{ not any_muted }}"

  join_unjoin_sonos_group:
    fields:
      entity_id:
        description: Media Player that will be joined or unjoined
        example: media_player.media_room
    variables:
      group_leader_entity: "{{ states('sensor.sonos_group_leader') }}"
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ (state_attr(entity_id, 'group_members')|length) > 1 }}"
            sequence:
              - service: media_player.unjoin
                target:
                  entity_id: "{{ entity_id }}"
          - conditions:
              - condition: template
                value_template: "{{ not not group_leader_entity }}"
            sequence:
              - service: media_player.join
                target:
                  entity_id: "{{ group_leader_entity }}"
                data:
                  group_members: >-
                    {{ [entity_id] + state_attr(group_leader_entity, 'group_members') }}

  toggle_mute:
    fields:
      entity_id:
        description: Media Player that will be mute or unmuted
        example: media_player.media_room
    sequence:
      - service: media_player.volume_mute
        target:
          entity_id: "{{ entity_id }}"
        data:
          is_volume_muted: "{{ not state_attr(entity_id , 'is_volume_muted') }}"

  briefing_announcement:
    alias: Briefing Announcement
    fields:
      entity_id:
        description: Media Player that will play the announcement
        example: media_player.media_room
      volume_level:
        description: Volume level
        example: 0.5
    sequence:
      - service: conversation.process
        data:
          text: >-
            {{ state_attr('sensor.gpt_briefing_prompt', 'prompt') | regex_replace("  +", ' ') }}
          language: DA
          agent_id: 4e0a875b09f8a19a405e1bf3e5c4adac
        response_variable: agent
      - service: script.tts_speak
        data:
          cache: false
          entity_id: "{{ entity_id }}"
          volume_level: "{{ volume_level | default(0.5) }}"
          message: >-
            {{ agent.response.speech.plain.speech }}

  mass_briefing_playlist:
    alias: MASS Briefing playlist
    sequence:
      - service: script.briefing_announcement
        data:
          entity_id: "{{ announcement_entities | default(entity_id|replace('_mass','')) }}"
          volume_level: "{{ volume_level | default(0.5) }}"
      - delay:
          seconds: 10
      - service: script.mass_playlist
        data:
          entity_id: "{{ entity_id }}"
          repeat: "off"
          shuffle: false
          playlist: "{{ playlist }}"

  mass_playlist:
    alias: MASS Playlist
    fields:
      entity_id:
        description: Media Player that will play the playlist
        example: media_player.media_room
      repeat:
        description: Repeat mode
        example: "off"
      shuffle:
        description: Shuffle mode
        example: false
      playlist:
        description: Playlist URIs
        example: "library://radio/1"
    sequence:
      - service: media_player.repeat_set
        target:
          entity_id: "{{ entity_id }}"
        data:
          repeat: "{{ repeat | default('off') }}"
      - service: media_player.shuffle_set
        target:
          entity_id: "{{ entity_id }}"
        data:
          shuffle: "{{ shuffle | default(false) }}"
      - service: mass.play_media
        target:
          entity_id: "{{ entity_id }}"
        data:
          enqueue: replace
          media_id: "{{ playlist }}"

  play_dr_p3:
    alias: Play DR P3
    sequence:
      - service: script.mass_playlist
        data:
          entity_id: "{{ entity_id }}"
          playlist:
            - library://radio/1

  play_chillhop_playlist:
    alias: Play Chillhop Playlist
    sequence:
      - service: script.mass_playlist
        data:
          entity_id: "{{ entity_id }}"
          shuffle: true
          playlist:
            - library://playlist/13

  play_hardstyle_playlist:
    alias: Play Hardstyle Playlist
    sequence:
      - service: script.mass_playlist
        data:
          entity_id: "{{ entity_id }}"
          shuffle: true
          playlist:
            - library://playlist/8

  play_seasonal_playlist:
    alias: Play Seasonal Playlist
    sequence:
      # TODO: Script to select playlist based on season
      # Should have music for: Winter, Spring, Summer, Autumn, Halloween, Christmas, New Years
      - variables:
          # Winter: 2. Januar - 31. Marts, 1. November - 30. November
          # Spring: 1. April - 30. Juni
          # Summer: 1. Juli - 30. September
          # Autumn: 1. Oktober - 26. Oktober
          # Halloween: 27. Oktober - 31. Oktober
          # Christmas: 1. December - 27. December
          # New Years: 28. December - 1. Januar
          playlist: >-
            {% set month = now().month %}
            {% set day = now().day %}
            {% if (month == 1 and day < 1) or month == 2 or month == 3 or month == 11 or (month == 10 and day < 27) %}
              {# winter #}
              
            {% elif month == 4 or month == 5 or month == 6 %}
              {# spring #}

            {% elif month == 7 or month == 8 or month == 9 %}
              {# summer #}

            {% elif month == 10 and day >= 27 %}
              {# halloween #}

            {% elif (month == 12 and day >= 28) or month == 1 %}
              {# new_years #}
              library://playlist/65
            {% else %}
              {# christmas #}
              library://playlist/5
            {% endif %}
      - service: script.mass_playlist
        data:
          entity_id: "{{ entity_id }}"
          shuffle: true
          playlist: "{{ playlist }}"

  playlist_play_media:
    fields:
      entity_id:
        description: Media Player that will play the playlist
        example: media_player.media_room
      url:
        description: URL to play
        example: "https://www.youtube.com/watch?v=5qap5aO4i9A"
    sequence:
      - service: media_player.play_media
        data:
          entity_id: "{{ entity_id }}"
          media_content_id: >
            {%- if 'youtube' in url -%}
              {% set param_str = url.split('?')[1] %}
              {% set ns = namespace(params={}) %}
              {% for p in param_str.split('&') %}
                {% set param = p.split('=') %}
                {% set ns.params = dict(ns.params, **{param[0]: param[1]}) %}
              {% endfor %}
              { "app_name": "youtube", "media_id": "{{ ns.params['v'] }}" }
            {%- else -%}
              {{ url }}
            {%- endif -%}
          media_content_type: >
            {%- if 'youtube' in url -%}
              cast
            {%- else -%}
              EPISODE
            {%- endif -%}

  play_plex:
    alias: "Play the requested media from Plex"
    fields:
      entity_id:
        description: Media Player that will play the media
        example: media_player.media_room
      query:
        description: Query to search for
        example: "The Office"
    sequence:
      - service: media_player.play_media
        continue_on_error: true
        target:
          entity_id: "{{entity_id}}"
        data:
          media_content_type: tvshow
          media_content_id: >-
            plex://{
              "library_name": "TV Shows",
              "show.title": "{{ query }}",
              "episode.unwatched": true,
              "allow_multiple": 1
            }
      - wait_template: "{{ is_state(entity_id, 'playing') }}"
        timeout: 00:00:10
        continue_on_timeout: true
      - if:
          - "{{ not wait.completed }}"
        then:
          - service: media_player.play_media
            continue_on_error: true
            target:
              entity_id: "{{entity_id}}"
            data:
              media_content_type: movie
              media_content_id: >-
                plex://{
                  "library_name": "Movies",
                  "movie.title": "{{ query }}"
                }

  weather_report:
    alias: Vejrudsigt
    sequence:
      - service: script.tts_speak
        data:
          cache: false
          entity_id: "{{ entity_id }}"
          message: "{{ states('sensor.dmi_vejr_tts') }} {{ state_attr('sensor.dmi_vejr_tts', 'text') }}"

  briefing:
    alias: Rapport
    sequence:
      - service: conversation.process
        data:
          text: >-
            {{ state_attr('sensor.gpt_briefing_prompt', 'prompt') | regex_replace("  +", ' ') }}
          language: DA
          agent_id: 4e0a875b09f8a19a405e1bf3e5c4adac
        response_variable: agent
      - service: script.tts_speak
        data:
          cache: false
          entity_id: "{{ entity_id }}"
          message: >-
            {{ agent.response.speech.plain.speech }}

automation:
  - id: adjust_speaker_group_volume
    alias: Adjust Speaker Group Volume
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - input_number.stue_group_volume
          - input_number.kokken_group_volume
          - input_number.kontor_group_volume
          - input_number.sovevaerelse_group_volume
          - input_number.badevaerelse_group_volume
          - input_number.roam_group_volume
    action:
      repeat:
        for_each: "{{ state_attr((trigger.entity_id|replace('input_number','media_player')|replace('_group_volume', '')), 'group_members') }}"
        sequence:
          - service: media_player.volume_set
            target:
              entity_id: "{{ repeat.item }}"
            data:
              volume_level: "{{ trigger.to_state.state|int/100 }}"

input_number:
  stue_group_volume:
    name: Stue Gruppe Lydstyrke
    min: 0
    max: 100
    step: 1
  kokken_group_volume:
    name: Køkken Gruppe Lydstyrke
    min: 0
    max: 100
    step: 1
  kontor_group_volume:
    name: Kontor Gruppe Lydstyrke
    min: 0
    max: 100
    step: 1
  sovevaerelse_group_volume:
    name: Sovevaerelse Gruppe Lydstyrke
    min: 0
    max: 100
    step: 1
  badevaerelse_group_volume:
    name: Badevaerelse Gruppe Lydstyrke
    min: 0
    max: 100
    step: 1
  roam_group_volume:
    name: Roam Gruppe Lydstyrke
    min: 0
    max: 100
    step: 1

template:
  - binary_sensor:
      - name: Stue Group Leader
        state: >-
          {% set entity = 'media_player.stue' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {% if (group_members|length) > 1 %}
            {{ group_members[0] == entity }}
          {% else %}
            {{ is_state(entity, 'playing') }}
          {% endif %}

      - name: Køkken Group Leader
        state: >-
          {% set entity = 'media_player.kokken' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {% if (group_members|length) > 1 %}
            {{ group_members[0] == entity }}
          {% else %}
            {{ is_state(entity, 'playing') }}
          {% endif %}

      - name: Kontor Group Leader
        state: >-
          {% set entity = 'media_player.kontor' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {% if (group_members|length) > 1 %}
            {{ group_members[0] == entity }}
          {% else %}
            {{ is_state(entity, 'playing') }}
          {% endif %}

      - name: Sovevaerelse Group Leader
        state: >-
          {% set entity = 'media_player.sovevaerelse' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {% if (group_members|length) > 1 %}
            {{ group_members[0] == entity }}
          {% else %}
            {{ is_state(entity, 'playing') }}
          {% endif %}

      - name: Badevaerelse Group Leader
        state: >-
          {% set entity = 'media_player.badevaerelse' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {% if (group_members|length) > 1 %}
            {{ group_members[0] == entity }}
          {% else %}
            {{ is_state(entity, 'playing') }}
          {% endif %}

      - name: Roam Group Leader
        state: >-
          {% set entity = 'media_player.roam' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {% if (group_members|length) > 1 %}
            {{ group_members[0] == entity }}
          {% else %}
            {{ is_state(entity, 'playing') }}
          {% endif %}

  - sensor:
      - name: Sonos Group Leader
        state: >-
          {% set entity = 'group.sonos_group_leaders' %}
          {% set group_members = state_attr(entity, 'entity_id') %}
          {% set ns = namespace(grouped=[],playing=[]) %}
          {% for entity_id in group_members %}
            {% set media_player_entity_id = 'media_player.'+entity_id|replace('binary_sensor.', '')|replace('_group_leader','') %}
            {% if is_state(entity_id, 'on') %}
              {% set ns.grouped = ns.grouped + [media_player_entity_id] %}
            {% endif %}
          {% endfor %}
          {% for media_player_entity_id in ns.grouped %}
            {% if is_state(media_player_entity_id, 'playing') %}
              {% set ns.playing = ns.playing + [media_player_entity_id] %}
            {% endif %}
          {% endfor %}
          {{ ns.playing[0] if (ns.playing|length) > 0 else ns.grouped[0] }}

      - name: Stue Speaker Lead By
        state: >-
          {% set entity = 'media_player.stue' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {{ group_members[0] }}

      - name: Køkken Speaker Lead By
        state: >-
          {% set entity = 'media_player.kokken' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {{ group_members[0] }}

      - name: Kontor Speaker Lead By
        state: >-
          {% set entity = 'media_player.kontor' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {{ group_members[0] }}

      - name: Sovevaerelse Speaker Lead By
        state: >-
          {% set entity = 'media_player.sovevaerelse' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {{ group_members[0] }}

      - name: Badevaerelse Speaker Lead By
        state: >-
          {% set entity = 'media_player.badevaerelse' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {{ group_members[0] }}

      - name: Roam Speaker Lead By
        state: >-
          {% set entity = 'media_player.roam' %}
          {% set group_members = state_attr(entity, 'group_members') %}
          {{ group_members[0] }}

      - name: Active Media Player
        state: >
          {% set dev = namespace(active_player='') %}
          {% for item in states.group.all_media.attributes.entity_id if is_state(item, 'playing') %}
            {% if dev.active_player == '' %}
              {% set dev.active_player = item %}
            {% endif %}
          {%- endfor %}

          {{ dev.active_player }}

group:
  kitchen_speakers:
    - media_player.kokken
  bathroom_speakers:
    - media_player.badevaerelse
  bedroom_speakers:
    - media_player.sovevaerelse
  living_room_speakers:
    - media_player.stue
  office_speakers:
    - media_player.kontor
  hallway_speakers:
    - media_player.roam
  balcony_speakers:
    - media_player.roam
  workshop_speakers:
    - media_player.roam

  sonos_group_leaders:
    entities:
      - binary_sensor.badevaerelse_group_leader
      - binary_sensor.kokken_group_leader
      - binary_sensor.kontor_group_leader
      - binary_sensor.roam_group_leader
      - binary_sensor.sovevaerelse_group_leader
      - binary_sensor.stue_group_leader
  sonos:
    name: Sonos Højttalere
    entities:
      - media_player.badevaerelse
      - media_player.kokken
      - media_player.kontor
      - media_player.roam
      - media_player.sovevaerelse
      - media_player.stue
  all_media:
    name: All Media
    entities:
      - media_player.badevaerelse
      - media_player.kokken
      - media_player.kontor
      - media_player.roam
      - media_player.sovevaerelse
      - media_player.stue

      - media_player.stue_shield
      - media_player.kontor_shield
      - media_player.sovevaerelse_chromecast

      - media_player.sovevaerelse_tv_dlna
