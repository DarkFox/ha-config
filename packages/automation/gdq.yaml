group:
  gdq_automations:
    name: "GDQ Automations"
    all: true
    entities:
      - automation.notify_gdq_run_coming_up
      - automation.watchlisted_gdq_game_now_streaming
      - automation.refresh_gdq_tracker
      - automation.update_gdq_calendar

  gdq_watchlists:
    name: GDQ Watchlists
    entities: &watchlist_entities
      - todo.gdq_runs
      - todo.gdq_games
      - todo.gdq_runners
      - todo.gdq_commentators
      - todo.gdq_hosts
      - todo.gdq_categories

template:
  - trigger:
      trigger: event
      event_type: gdq_runs_updated
      event_data:
        watchlist: "todo.gdq_games"
    sensor:
      - name: GDQ Games Watchlist
        unique_id: 66b9fd22-7f37-4803-88ad-bfa26d943eaf
        state: >-
          {% from 'gdq.jinja' import get_todo_list_items %}
          {{ get_todo_list_items('todo.gdq_games', trigger)|from_json| length }}
        attributes:
          items: >-
            {% from 'gdq.jinja' import get_todo_list_items %}
            {{ get_todo_list_items('todo.gdq_games', trigger)|from_json }}
          regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_games', trigger)|from_json %}
            {{ regex_from_list(todo_terms) }}

  - trigger:
      trigger: event
      event_type: gdq_runs_updated
      event_data:
        watchlist: "todo.gdq_runners"
    sensor:
      - name: GDQ Runners Watchlist
        unique_id: 79b7daec-a26a-4bb8-8eeb-1df150ef8c36
        state: >-
          {% from 'gdq.jinja' import get_todo_list_items %}
          {{ get_todo_list_items('todo.gdq_runners', trigger)|from_json| length }}
        attributes:
          items: >-
            {% from 'gdq.jinja' import get_todo_list_items %}
            {{ get_todo_list_items('todo.gdq_runners', trigger)|from_json }}
          regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_runners', trigger)|from_json %}
            {{ regex_from_list(todo_terms) }}
          games: >-
            {% from 'gdq.jinja' import get_todo_list_items, games_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_runners', trigger)|from_json %}
            {% set events     = state_attr('binary_sensor.gdq_calendar', 'events') or [] %}
            {{ games_from_list('runner', todo_terms, events) }}
          games_regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, games_regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_runners', trigger)|from_json %}
            {% set events     = state_attr('binary_sensor.gdq_calendar', 'events') or [] %}
            {{ games_regex_from_list('runner', todo_terms, events) }}

  - trigger:
      trigger: event
      event_type: gdq_runs_updated
      event_data:
        watchlist: "todo.gdq_commentators"
    sensor:
      - name: GDQ Commentators Watchlist
        unique_id: 5b7d63c0-f773-445e-b56a-e9aebc57de58
        state: >-
          {% from 'gdq.jinja' import get_todo_list_items %}
          {{ get_todo_list_items('todo.gdq_commentators', trigger)|from_json| length }}
        attributes:
          items: >-
            {% from 'gdq.jinja' import get_todo_list_items %}
            {{ get_todo_list_items('todo.gdq_commentators', trigger)|from_json }}
          regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_commentators', trigger)|from_json %}
            {{ regex_from_list(todo_terms) }}
          games: >-
            {% from 'gdq.jinja' import get_todo_list_items, games_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_commentators', trigger)|from_json %}
            {% set events     = state_attr('binary_sensor.gdq_calendar', 'events') or [] %}
            {{ games_from_list('commentators', todo_terms, events) }}
          games_regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, games_regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_commentators', trigger)|from_json %}
            {% set events     = state_attr('binary_sensor.gdq_calendar', 'events') or [] %}
            {{ games_regex_from_list('commentators', todo_terms, events) }}

  - trigger:
      trigger: event
      event_type: gdq_runs_updated
      event_data:
        watchlist: "todo.gdq_hosts"
    sensor:
      - name: GDQ Hosts Watchlist
        unique_id: c8f60f98-b850-4f7e-91e2-139c46a4057c
        state: >-
          {% from 'gdq.jinja' import get_todo_list_items %}
          {{ get_todo_list_items('todo.gdq_hosts', trigger)|from_json| length }}
        attributes:
          items: >-
            {% from 'gdq.jinja' import get_todo_list_items %}
            {{ get_todo_list_items('todo.gdq_hosts', trigger)|from_json }}
          regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_hosts', trigger)|from_json %}
            {{ regex_from_list(todo_terms) }}
          games: >-
            {% from 'gdq.jinja' import get_todo_list_items, games_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_hosts', trigger)|from_json %}
            {% set events     = state_attr('binary_sensor.gdq_calendar', 'events') or [] %}
            {{ games_from_list('host', todo_terms, events) }}
          games_regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, games_regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_hosts', trigger)|from_json %}
            {% set events     = state_attr('binary_sensor.gdq_calendar', 'events') or [] %}
            {{ games_regex_from_list('host', todo_terms, events) }}

  - trigger:
      trigger: event
      event_type: gdq_runs_updated
      event_data:
        watchlist: "todo.gdq_categories"
    sensor:
      - name: GDQ Categories Watchlist
        unique_id: 05776a71-be3c-4cb4-80e2-fbc3418803ec
        state: >-
          {% from 'gdq.jinja' import get_todo_list_items %}
          {{ get_todo_list_items('todo.gdq_categories', trigger)|from_json| length }}
        attributes:
          items: >-
            {% from 'gdq.jinja' import get_todo_list_items %}
            {{ get_todo_list_items('todo.gdq_categories', trigger)|from_json }}
          regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_categories', trigger)|from_json %}
            {{ regex_from_list(todo_terms) }}
          games: >-
            {% from 'gdq.jinja' import get_todo_list_items, games_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_categories', trigger)|from_json %}
            {% set events     = state_attr('binary_sensor.gdq_calendar', 'events') or [] %}
            {{ games_from_list('category', todo_terms, events) }}
          games_regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, games_regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_categories', trigger)|from_json %}
            {% set events     = state_attr('binary_sensor.gdq_calendar', 'events') or [] %}
            {{ games_regex_from_list('category', todo_terms, events) }}

  - trigger:
      trigger: event
      event_type: gdq_runs_updated
      event_data:
        watchlist: "todo.gdq_tags"
    sensor:
      - name: GDQ Tags Watchlist
        unique_id: 04d213d5-6705-467c-8bcc-00343cae4208
        state: >-
          {% from 'gdq.jinja' import get_todo_list_items %}
          {{ get_todo_list_items('todo.gdq_tags', trigger)|from_json| length }}
        attributes:
          items: >-
            {% from 'gdq.jinja' import get_todo_list_items %}
            {{ get_todo_list_items('todo.gdq_tags', trigger)|from_json }}
          regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_tags', trigger)|from_json %}
            {{ regex_from_list(todo_terms) }}
          games: >-
            {% from 'gdq.jinja' import get_todo_list_items, games_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_tags', trigger)|from_json %}
            {% set events     = state_attr('binary_sensor.gdq_calendar', 'events') or [] %}
            {{ games_from_list('tags', todo_terms, events) }}
          games_regex: >-
            {% from 'gdq.jinja' import get_todo_list_items, games_regex_from_list %}
            {% set todo_terms = get_todo_list_items('todo.gdq_tags', trigger)|from_json %}
            {% set events     = state_attr('binary_sensor.gdq_calendar', 'events') or [] %}
            {{ games_regex_from_list('tags', todo_terms, events) }}

  - sensor:
      - name: GDQ Runs Regex
        unique_id: 94acaf70-d3d2-4af1-9730-806adddeb712
        state: "{{ (state_attr('sensor.gdq_runs_regex', 'games') or []) | length }}"
        attributes:
          games: >-
            {% set games_games = state_attr('sensor.gdq_games_watchlist', 'items') or [] %}
            {% set runners_games = state_attr('sensor.gdq_runners_watchlist', 'games') or [] %}
            {% set commentators_games = state_attr('sensor.gdq_commentators_watchlist', 'games') or [] %}
            {% set hosts_games = state_attr('sensor.gdq_hosts_watchlist', 'games') or [] %}
            {% set categories_games = state_attr('sensor.gdq_categories_watchlist', 'games') or [] %}
            {% set tags_games = state_attr('sensor.gdq_tags_watchlist', 'games') or [] %}
            {{
              (
                games_games
                + runners_games
                + commentators_games
                + hosts_games
                + categories_games
                + tags_games
              ) | unique | list
            }}
          regex: >-
            {% from 'gdq.jinja' import regex_from_list %}
            {{ regex_from_list(state_attr('sensor.gdq_runs_regex', 'games') or []) }}

  - trigger:
      trigger: event
      event_type: gdq_event
    sensor:
      - name: GDQ Event
        unique_id: c6a9e222-7520-46f9-ba36-f06e3a259335
        state: "{{ trigger.event.data.event.get('name', '') }}"
        attributes:
          id: "{{ trigger.event.data.event.get('id', '') }}"
          url: "{{ trigger.event.data.event.get('url', '') }}"
          donation_url: >-
            {%- set id = trigger.event.data.event.get('id') -%}
            {{ "https://tracker.gamesdonequick.com/tracker/ui/donate/" + id if id else none }}
          prizes_url: >-
            {%- set id = trigger.event.data.event.get('id') -%}
            {{ "https://tracker.gamesdonequick.com/tracker/ui/events/"+id+"/prizes" if id else none }}
          start_time: "{{ trigger.event.data.event.get('start_time', '') | as_datetime | as_local }}"
          start_date: >-
            {%- set datetime = trigger.event.data.event.get('start_time', '') | as_datetime | as_local -%}
            {%- set month = state_attr('sensor.month_name_short', 'month_names_short')[datetime.month-1] -%}
            {{ datetime.day }}. {{ month }}
          end_time: "{{ trigger.event.data.event.get('end_time', '') | as_datetime | as_local }}"
          end_date: >-
            {%- set datetime = trigger.event.data.event.get('end_time', '') | as_datetime | as_local -%}
            {%- set month = state_attr('sensor.month_name_short', 'month_names_short')[datetime.month-1] -%}
            {{ datetime.day }}. {{ month }}

  - binary_sensor:
      - name: GDQ Event Active
        unique_id: 0546ee5c-bc1b-4a64-a272-b2cf535f9363
        state: >-
          {%- from 'utils.jinja' import attr_has_value -%}
          {% if has_value('sensor.gdq_event') and attr_has_value('sensor.gdq_event', 'start_time') %}
            {% set start_time = state_attr('sensor.gdq_event', 'start_time') | as_datetime %}
            {% set end_time = state_attr('sensor.gdq_event', 'end_time') | as_datetime %}
            {{ 'on' if start_time <= now() <= end_time else 'off' }}
          {% else %}
            {{ None }}
          {% endif %}

      - name: GDQ Currently Streaming Watchlist Game
        unique_id: 6e4d4629-f87b-4397-956b-2fc8ad3519bb
        icon: mdi:gamepad-right
        state: >-
          {% if is_state('sensor.gamesdonequick', 'streaming') %}
            {% set streaming_game = state_attr('sensor.gamesdonequick', 'game') %}
            {% set games = state_attr('binary_sensor.gdq_calendar', 'events') | selectattr('watch') | map(attribute='game') | list %}
            {% if streaming_game in games %}
              on
            {% else %}
              off
            {% endif %}
          {% else %}
            off
          {% endif %}

      - name: TV Currently streaming GDQ
        unique_id: 51a6eeaa-f5ff-484a-abbb-8f07c53dab7e
        icon: mdi:television
        state: >-
          {% set tvs = [
            'media_player.stue_shield_adb',
            'media_player.kontor_shield_adb',
            'media_player.sovevaerelse_chromecast'
          ] %}
          {% for tv in tvs %}
            {% if is_state(tv, 'playing') and (state_attr(tv, 'app_id') | lower) in ['s0und', 'twitch'] %}
              on
              {% break %}
            {% endif %}
          {% else %}
            off
          {% endfor %}

  - trigger:
      trigger: event
      event_type: gdq_donation_stats
    sensor:
      - name: GDQ Donation Total
        unique_id: 626ea760-4cb6-4eb9-b6d2-2c95cf765463
        state: "{{ trigger.event.data.stats.get('total', 0) }}"
        unit_of_measurement: "USD"
        device_class: "monetary"
        attributes:
          formatted_total: "${{ '{:,}'.format(trigger.event.data.stats.get('total', 0) | int) | replace(',', '.') }}"
          count: "{{ trigger.event.data.stats.get('count', 0) }}"
          max: "{{ trigger.event.data.stats.get('max', 0) }}"
          average: "{{ trigger.event.data.stats.get('average', 0) }}"
          median: "{{ trigger.event.data.stats.get('median', 0) }}"

  - trigger:
      trigger: event
      event_type: gdq_bids
    sensor:
      - name: GDQ Bids
        unique_id: 38be3c41-5735-4e7d-9f77-7d134a119bd4
        state: >-
          {% set games = state_attr('binary_sensor.gdq_calendar', 'events') | map(attribute='game') | list %}
          {{ trigger.event.data.bids | selectattr('run', 'in', games) | list | length }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          challenges: >-
            {% from 'utils.jinja' import sort_list_by_attr %}
            {% set games = state_attr('binary_sensor.gdq_calendar', 'events') | map(attribute='game') | list %}
            {% set challenges = trigger.event.data.bids | selectattr('goal', 'defined') | selectattr('run', 'in', games) | list %}
            {{ sort_list_by_attr(challenges, 'run', games) }}
          bid_wars: >-
            {% from 'utils.jinja' import sort_list_by_attr %}
            {% set games = state_attr('binary_sensor.gdq_calendar', 'events') | map(attribute='game') | list %}
            {% set bid_wars = trigger.event.data.bids | selectattr('options', 'defined') | selectattr('run', 'in', games) | list %}
            {{ sort_list_by_attr(bid_wars, 'run', games) }}

  - trigger:
      trigger: event
      event_type: gdq_milestones
    sensor:
      - name: GDQ Milestones
        unique_id: 2d6248da-86dc-4640-a0a5-d5ffadb20927
        state: >-
          {% from 'utils.jinja' import sort_list_by_attr %}
          {% from 'gdq.jinja' import regex_from_list %}
          {% set games = state_attr('binary_sensor.gdq_calendar', 'events') | map(attribute='game') | list %}
          {% set games_regex = regex_from_list(games) %}
          {% set game_milestones = trigger.event.data.milestones | selectattr('name', 'match', games_regex) | list %}
          {% set non_game_milestones = trigger.event.data.milestones | rejectattr('name', 'match', games_regex) | selectattr('percent', 'lt', 110.0) | list %}
          {% set current_milestones = game_milestones + non_game_milestones %}
          {{ current_milestones | length }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          milestones: >-
            {% from 'utils.jinja' import sort_list_by_attr %}
            {% from 'gdq.jinja' import regex_from_list %}
            {% set games = state_attr('binary_sensor.gdq_calendar', 'events') | map(attribute='game') | list %}
            {% set games_regex = regex_from_list(games) %}
            {% set game_milestones = trigger.event.data.milestones | selectattr('name', 'match', games_regex) | list %}
            {% set non_game_milestones = trigger.event.data.milestones | rejectattr('name', 'match', games_regex) | selectattr('percent', 'lt', 110.0) | list %}
            {% set current_milestones = game_milestones + non_game_milestones %}
            {{ current_milestones }}

  - trigger:
      trigger: event
      event_type: gdq_calendar_updated
    binary_sensor:
      - name: GDQ Calendar
        unique_id: f89b1456-6a0f-4683-b318-3349e063f9d6
        state: >-
          {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
          {{ 'on' if trigger.event.data.get('events', []) | selectattr('start', 'le', time) | selectattr('end', 'gt', time) | list else 'off' }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          current: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('start', 'le', time) | selectattr('end', 'gt', time) | list }}
          next: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('start', 'gt', time) | list | first }}
          events: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('end', 'gt', time) | list }}

      - name: GDQ Calendar Watch Runs
        unique_id: adf4a108-56d8-4fad-a9a8-d85de4e60bde
        state: >-
          {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
          {{ 'on' if trigger.event.data.get('events', []) | selectattr('watch', 'true') | selectattr('start', 'le', time) | selectattr('end', 'gt', time) | list else 'off' }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          current: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('watch', 'true') | selectattr('start', 'le', time) | selectattr('end', 'gt', time) | list }}
          next: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('watch', 'true') | selectattr('start', 'gt', time) | list | first }}
          events: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('watch', 'true') | selectattr('end', 'gt', time) | list }}

  - sensor:
      - name: GDQ On Deck
        unique_id: 359fc2c0-7e2a-4836-bacf-90f7abbe3856
        unit_of_measurement: "min"
        state: >-
          {% set current_runs = state_attr('binary_sensor.gdq_calendar', 'current') %}
          {% set current = current_runs | first if current_runs else none %}
          {% set on_deck = (current or state_attr('binary_sensor.gdq_calendar', 'next')) %}
          {{ ((on_deck.get('start') |as_datetime|as_local - now()).total_seconds() / 60) | int if on_deck else none }}
        attributes:
          icon: mdi:gamepad-right
          on_deck: >-
            {% set current_runs = state_attr('binary_sensor.gdq_calendar', 'current') %}
            {% set current = current_runs | first if current_runs else none %}
            {{ (current or state_attr('binary_sensor.gdq_calendar', 'next')) }}
          on_deck_formatted_time: >-
            {% from 'gdq.jinja' import friendly_time %}
            {{ friendly_time(state_attr('sensor.gdq_on_deck', 'on_deck'), False, 'Ingen lige nu') }}
          on_deck_compact_time: >-
            {% from 'gdq.jinja' import friendly_time %}
            {{ friendly_time(state_attr('sensor.gdq_on_deck', 'on_deck'), True, 'Ingen lige nu') }}
          up_next: >-
            {{ state_attr('binary_sensor.gdq_calendar', 'next') }}
          up_next_formatted_time: >-
            {% from 'gdq.jinja' import friendly_time %}
            {{ friendly_time(state_attr('binary_sensor.gdq_calendar', 'next')) }}
          up_next_compact_time: >-
            {% from 'gdq.jinja' import friendly_time %}
            {{ friendly_time(state_attr('binary_sensor.gdq_calendar', 'next'), True) }}

      - name: GDQ Next Watch Run
        unique_id: 2d756300-cc24-45f6-be99-faef83cf5034
        unit_of_measurement: "min"
        state: >-
          {% set next_run = state_attr('binary_sensor.gdq_calendar_watch_runs', 'next') %}
          {{ ((next_run.get('start') |as_datetime|as_local - now()).total_seconds() / 60) | int if next_run else none }}
        attributes:
          icon: mdi:gamepad-right
          next_run: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ (state_attr('binary_sensor.gdq_calendar_watch_runs', 'next') or {} ) }}
          formatted_time: >-
            {% from 'gdq.jinja' import friendly_time %}
            {{ friendly_time(state_attr('binary_sensor.gdq_calendar_watch_runs', 'next')) }}
          compact_time: >-
            {% from 'gdq.jinja' import friendly_time %}
            {{ friendly_time(state_attr('binary_sensor.gdq_calendar_watch_runs', 'next'), True) }}

script:
  refresh_gdq_data:
    alias: "Refresh GDQ Data"
    icon: mdi:calendar-refresh
    sequence:
      - parallel:
          - action: homeassistant.update_entity
            target:
              entity_id: sensor.gamesdonequick
          - action: automation.trigger
            target:
              entity_id: automation.update_gdq_calendar
          - action: script.run_pyscript
            data:
              action: pyscript.gdq_get_donation_stats

automation:
  - alias: "Toggle GDQ on event state"
    id: 5d6fc4e6-291f-43f0-b555-831251da9ac5
    initial_state: true
    triggers:
      - trigger: state
        entity_id: binary_sensor.gdq_event_active
        to:
          - "on"
          - "off"
        for:
          minutes: 1
    condition:
      - condition: template
        value_template: >-
          {{ not is_state('group.gdq_automations', states('binary_sensor.gdq_event_active')) }}
    actions:
      - action: "homeassistant.turn_{{ states('binary_sensor.gdq_event_active') }}"
        target:
          entity_id: group.gdq_automations

  - alias: "Slow update GDQ"
    id: dc222bee-ba1b-49b4-80cf-7dee61761268
    initial_state: true
    triggers:
      - trigger: time_pattern
        hours: "0"
        minutes: "0"
        seconds: "0"
    actions:
      - action: pyscript.get_gdq_event

  - alias: "Refresh GDQ Tracker"
    id: refresh_gdq_tracker
    mode: single
    triggers:
      - trigger: time_pattern
        hours: "*"
        minutes: "/1"
        seconds: "0"
    actions:
      - action: script.refresh_gdq_data

  - alias: "Notify GDQ Run Coming Up"
    id: notify_gdq_run_coming_up
    triggers:
      - trigger: numeric_state
        entity_id: sensor.gdq_next_watch_run
        below: 30
      - trigger: numeric_state
        entity_id: sensor.gdq_next_watch_run
        below: 15
      - trigger: numeric_state
        entity_id: sensor.gdq_next_watch_run
        below: 5
    variables:
      release_year: "{{ state_attr('sensor.gdq_next_watch_run', 'next_run').release_year }}"
      game: "{{ state_attr('sensor.gdq_next_watch_run', 'next_run').summary | replace(' ('+(release_year|string)+')', '') }}"
      runner: "{{ state_attr('sensor.gdq_next_watch_run', 'next_run').runner }}"
      time: >-
        {% from 'easy_time.jinja' import custom_relative_time %}
        {{ custom_relative_time(
          state_attr('sensor.gdq_next_watch_run', 'next_run').get('start', ''),
          'day, hour, minute'
        ) }}
      playing_gdq: "{{ is_state('binary_sensor.tv_currently_streaming_gdq', 'on') }}"
    actions:
      - action: script.notify_everywhere
        data:
          severity: "{{ -1 if playing_gdq else 1 }}"
          message:
            - tts: "Næste GDQ spil: "
              language: da-DK
              offset: -500
            - tts: "{{ game }} — Run by {{ runner }},"
              language: en-US
              voice: SteffanNeural
              offset: -900
            - tts: " starter {{ time }}"
              language: da-DK
              offset: -900

  - alias: "Watchlisted GDQ game now streaming"
    id: e8acab09-6c30-4d0c-9c1a-3301013a34c6
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.gdq_currently_streaming_watchlist_game
        to: "on"
    variables:
      game: "{{ state_attr('sensor.gamesdonequick', 'game') }}"
      runner: >-
        {% set run = state_attr('binary_sensor.gdq_calendar', 'events')
                    | selectattr('summary', 'eq', game) | list | first %}
        {% if run %}
          {{ run.runner }}
        {% else %}
          {{ None }}
        {% endif %}
      playing_gdq: "{{ is_state('binary_sensor.tv_currently_streaming_gdq', 'on') }}"
    actions:
      - action: script.notify_everywhere
        data:
          severity: "{{ 0 if playing_gdq else 1 }}"
          message:
            - tts: "GDQ streamer nu: "
              language: da-DK
              offset: -500
            - tts: "{{ game }} — Run by {{ runner }},"
              language: en-US
              voice: SteffanNeural
              offset: -900

  - alias: "Refresh GDQ Runs Regex"
    id: refresh_gdq_runs_regex
    initial_state: true
    mode: restart
    triggers:
      - trigger: state
        entity_id: *watchlist_entities
      - trigger: state
        entity_id: group.gdq_automations
        to: "on"
    actions:
      - repeat:
          for_each: *watchlist_entities
          sequence:
            - action: todo.get_items
              data:
                status: needs_action
              target:
                entity_id: "{{ repeat.item }}"
              response_variable: todo_items
            - event: gdq_runs_updated
              event_data:
                watchlist: "{{ repeat.item }}"
                todo_items: "{{ todo_items }}"

  - alias: "Update GDQ Bids After Calendar Update"
    id: 680e332d-e89a-4170-b2b3-e997cbd830d3
    mode: single
    triggers:
      - trigger: event
        event_type: gdq_calendar_updated
    actions:
      - action: script.run_pyscript
        data:
          action: pyscript.gdq_get_bids

  - alias: "Update GDQ Milestones After Donation Stats"
    id: bc6dbbf8-d7fd-44d6-921d-9e31b0564302
    mode: single
    triggers:
      - trigger: event
        event_type: gdq_donation_stats
    actions:
      - action: script.run_pyscript
        data:
          action: pyscript.gdq_get_milestones

  - id: update_gdq_calendar
    alias: Update GDQ Calendar
    mode: single
    triggers:
      - trigger: state
        entity_id: calendar.gdq_schedule
      - trigger: state
        entity_id: binary_sensor.home_assistant_loaded
        to: "on"
    variables:
      days: 10
      regexes: "{{ states.sensor.calendar_regexes.attributes }}"
      attrs:
        # Remove the "BONUS GAME X - " prefix from the game name if it exists.
        # Example with separator: "BONUS GAME 4 - Mario Kart World"
        # Example without separator: "Super Mario Odyssey"
        game: >-
          {{ 
            {
              'regex': '^(?:BONUS GAME \d+ - )?(.+)$',
              'fields': ['summary']
            }
          }}
        category: "(.+) — .+ — .+"
        platform: ".+ — (.+) — .+"
        release_year: ".+ — .+ — (.+)"
        runner: "Run by (.+)"
        host: "Hosted by (.+)"
        commentators: "Commentary by (.+)"
        tags: "Tagged (.+)"
      bool_attrs:
        watch: >-
          {{ [{
            'regex': (state_attr('sensor.gdq_runs_regex', 'regex') or 'xxxxxxxx'),
            'fields': ['summary']
          }] }}
        watch_game: >-
          {{ [{
            'regex': (state_attr('sensor.gdq_games_watchlist', 'regex') or 'xxxxxxxx'),
            'fields': ['summary']
          }] }}
        watch_runner: >-
          {{ [{
            'regex': (state_attr('sensor.gdq_runners_watchlist', 'regex') or 'xxxxxxxx'),
            'fields': ['runner']
          }] }}
        watch_host: >-
          {{ [{
            'regex': (state_attr('sensor.gdq_hosts_watchlist', 'regex') or 'xxxxxxxx'),
            'fields': ['host']
          }] }}
        watch_commentators: >-
          {{ [{
            'regex': (state_attr('sensor.gdq_commentators_watchlist', 'regex') or 'xxxxxxxx'),
            'fields': ['commentators']
          }] }}
        watch_category: >-
          {{ [{
            'regex': (state_attr('sensor.gdq_categories_watchlist', 'regex') or 'xxxxxxxx'),
            'fields': ['category']
          }] }}
        watch_tags: >-
          {{ [{
            'regex': (state_attr('sensor.gdq_tags_watchlist', 'regex') or 'xxxxxxxx'),
            'fields': ['tags']
          }] }}
    actions:
      - action: homeassistant.update_entity
        target:
          entity_id: calendar.gdq_schedule
      - delay:
          seconds: 5
      - action: calendar.get_events
        data:
          start_date_time: "{{ (now() + timedelta(days=-1)).strftime('%Y-%m-%d') }} 00:00:00"
          end_date_time: "{{ (now() + timedelta(days=days)).strftime('%Y-%m-%d') }} 23:59:59"
        target:
          entity_id: calendar.gdq_schedule
        response_variable: all_events
      - variables:
          agenda_events: >-
            {% from 'agenda.jinja' import agenda_event %}
            {% set ns = namespace(ret=[]) %}
            {% for event in all_events['calendar.gdq_schedule'].events | sort(attribute='start') | list -%}
              {% set ns.ret = ns.ret + [agenda_event("GDQ Kalender", dict(event, location=none), regexes, bool_attrs, attrs)|from_json] %}
            {%- endfor -%}
            {{ ns.ret }}
      - event: gdq_calendar_updated
        event_data:
          events: "{{ agenda_events }}"
