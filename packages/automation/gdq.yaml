input_boolean:
  gdq_enable:
    name: "Enable GDQ"
    icon: mdi:gamepad-right

template:
  - trigger:
      platform: event
      event_type: gdq_runs_updated
    sensor:
      - name: GDQ Runs Regex
        unique_id: 94acaf70-d3d2-4af1-9730-806adddeb712
        state: "{{ trigger.event.data.todo_items.get('todo.gdq_runs', {}).get('items', []) | length }}"
        attributes:
          regex: >-
            {% from 'utils.jinja' import regex_escape %}
            {% set runs = trigger.event.data.todo_items.get("todo.gdq_runs", {}).get("items", []) | map(attribute='summary') | list %}
            {% set ns = namespace(escaped_runs=[]) %}
            {% for run in runs %}
              {% set ns.escaped_runs = ns.escaped_runs + [regex_escape(run)] %}
            {% endfor %}
            .*({{ ns.escaped_runs | join('|') }}).*

  - trigger:
      platform: event
      event_type: gdq_event
    sensor:
      - name: GDQ Event
        unique_id: c6a9e222-7520-46f9-ba36-f06e3a259335
        state: "{{ trigger.event.data.event.get('name', '') }}"
        attributes:
          id: "{{ trigger.event.data.event.get('id', '') }}"
          url: "{{ trigger.event.data.event.get('url', '') }}"
          donation_url: >-
            {%- set id = trigger.event.data.event.get('id') -%}
            {{ "https://tracker.gamesdonequick.com/tracker/ui/donate/" + id if id else none }}
          prizes_url: >-
            {%- set id = trigger.event.data.event.get('id') -%}
            {{ "https://tracker.gamesdonequick.com/tracker/ui/events/"+id+"/prizes" if id else none }}
          start_time: "{{ trigger.event.data.event.get('start_time', '') | as_datetime | as_local }}"
          start_date: >-
            {%- set datetime = trigger.event.data.event.get('start_time', '') | as_datetime | as_local -%}
            {%- set month = state_attr('sensor.month_name_short', 'month_names_short')[datetime.month-1] -%}
            {{ datetime.day }}. {{ month }}
          end_time: "{{ trigger.event.data.event.get('end_time', '') | as_datetime | as_local }}"
          end_date: >-
            {%- set datetime = trigger.event.data.event.get('end_time', '') | as_datetime | as_local -%}
            {%- set month = state_attr('sensor.month_name_short', 'month_names_short')[datetime.month-1] -%}
            {{ datetime.day }}. {{ month }}

  - binary_sensor:
      - name: GDQ Event Active
        unique_id: 0546ee5c-bc1b-4a64-a272-b2cf535f9363
        state: >-
          {% set start_time = state_attr('sensor.gdq_event', 'start_time') | as_datetime %}
          {% set end_time = state_attr('sensor.gdq_event', 'end_time') | as_datetime %}
          {{ 'on' if start_time <= now() <= end_time else 'off' }}

  - trigger:
      platform: event
      event_type: gdq_donation_stats
    sensor:
      - name: GDQ Donation Total
        unique_id: 626ea760-4cb6-4eb9-b6d2-2c95cf765463
        state: "{{ trigger.event.data.stats.get('total', 0) }}"
        unit_of_measurement: "USD"
        device_class: "monetary"
        attributes:
          formatted_total: "{{ '{:,}'.format(trigger.event.data.stats.get('total', 0) | int) | replace(',', '.') }}"
          count: "{{ trigger.event.data.stats.get('count', 0) }}"
          max: "{{ trigger.event.data.stats.get('max', 0) }}"
          average: "{{ trigger.event.data.stats.get('average', 0) }}"
          median: "{{ trigger.event.data.stats.get('median', 0) }}"

  - trigger:
      platform: event
      event_type: gdq_bids
    sensor:
      - name: GDQ Bids
        unique_id: 38be3c41-5735-4e7d-9f77-7d134a119bd4
        state: >-
          {% set games = state_attr('binary_sensor.gdq_calendar', 'events') | map(attribute='summary') | list %}
          {{ trigger.event.data.bids | selectattr('run', 'in', games) | list | length }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          challenges: >-
            {% from 'utils.jinja' import sort_list_by_attr %}
            {% set games = state_attr('binary_sensor.gdq_calendar', 'events') | map(attribute='summary') | list %}
            {% set challenges = trigger.event.data.bids | selectattr('goal', 'defined') | selectattr('run', 'in', games) | list %}
            {{ sort_list_by_attr(challenges, 'run', games) }}
          bid_wars: >-
            {% from 'utils.jinja' import sort_list_by_attr %}
            {% set games = state_attr('binary_sensor.gdq_calendar', 'events') | map(attribute='summary') | list %}
            {% set bid_wars = trigger.event.data.bids | selectattr('options', 'defined') | selectattr('run', 'in', games) | list %}
            {{ sort_list_by_attr(bid_wars, 'run', games) }}

  - trigger:
      platform: event
      event_type: gdq_calendar_updated
    binary_sensor:
      - name: GDQ Calendar
        unique_id: f89b1456-6a0f-4683-b318-3349e063f9d6
        state: >-
          {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
          {{ 'on' if trigger.event.data.get('events', []) | selectattr('start', 'le', time) | selectattr('end', 'gt', time) | list else 'off' }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          current: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('start', 'le', time) | selectattr('end', 'gt', time) | list }}
          next: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('start', 'gt', time) | list | first }}
          events: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('end', 'gt', time) | list }}

      - name: GDQ Calendar Watch Runs
        unique_id: adf4a108-56d8-4fad-a9a8-d85de4e60bde
        state: >-
          {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
          {{ 'on' if trigger.event.data.get('events', []) | selectattr('watch', 'true') | selectattr('start', 'le', time) | selectattr('end', 'gt', time) | list else 'off' }}
        attributes:
          last_updated: "{{ now().isoformat() }}"
          current: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('watch', 'true') | selectattr('start', 'le', time) | selectattr('end', 'gt', time) | list }}
          next: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('watch', 'true') | selectattr('start', 'gt', time) | list | first }}
          events: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ trigger.event.data.get('events', []) | selectattr('watch', 'true') | selectattr('end', 'gt', time) | list }}

  - sensor:
      - name: GDQ On Deck
        unique_id: 359fc2c0-7e2a-4836-bacf-90f7abbe3856
        unit_of_measurement: "min"
        state: >-
          {% set current_runs = state_attr('binary_sensor.gdq_calendar', 'current') %}
          {% set current = current_runs | first if current_runs else none %}
          {% set on_deck = (current or state_attr('binary_sensor.gdq_calendar', 'next')) %}
          {{ ((on_deck.get('start') |as_datetime|as_local - now()).total_seconds() / 60) | int if on_deck else none }}
        attributes:
          icon: mdi:gamepad-right
          on_deck: >-
            {% set current_runs = state_attr('binary_sensor.gdq_calendar', 'current') %}
            {% set current = current_runs | first if current_runs else none %}
            {{ (current or state_attr('binary_sensor.gdq_calendar', 'next')) }}
          on_deck_formatted_time: >-
            {% from 'datediff.jinja' import relative_start_end_time %}
            {% set event = state_attr('sensor.gdq_on_deck', 'on_deck') %}
            {% if event %}
              {{ relative_start_end_time(event.start, event.end, est='~') }}
            {% else %}
              Ingen lige nu
            {% endif %}
          on_deck_compact_time: >-
            {% from 'datediff.jinja' import relative_start_end_time %}
            {% set event = state_attr('sensor.gdq_on_deck', 'on_deck') %}
            {% if event %}
              {{ relative_start_end_time(event.start, event.end, '', ' <> ', '', '', est='~') }}
            {% else %}
              Ingen kommende
            {% endif %}
          up_next: >-
            {{ state_attr('binary_sensor.gdq_calendar', 'next') }}
          up_next_formatted_time: >-
            {% from 'datediff.jinja' import relative_start_end_time %}
            {% set event = state_attr('binary_sensor.gdq_calendar', 'next') %}
            {% if event %}
              {{ relative_start_end_time(event.start, event.end, est='~') }}
            {% else %}
              Ingen kommende
            {% endif %}
          up_next_compact_time: >-
            {% from 'datediff.jinja' import relative_start_end_time %}
            {% set event = state_attr('binary_sensor.gdq_calendar', 'next') %}
            {% if event %}
              {{ relative_start_end_time(event.start, event.end, '', ' <> ', '', '', est='~') }}
            {% else %}
              Ingen kommende
            {% endif %}

      - name: GDQ Next Watch Run
        unique_id: 2d756300-cc24-45f6-be99-faef83cf5034
        unit_of_measurement: "min"
        state: >-
          {% set next_run = state_attr('binary_sensor.gdq_calendar_watch_runs', 'next') %}
          {{ ((next_run.get('start') |as_datetime|as_local - now()).total_seconds() / 60) | int if next_run else none }}
        attributes:
          icon: mdi:gamepad-right
          next_run: >-
            {% set time = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ (state_attr('binary_sensor.gdq_calendar_watch_runs', 'next') or {} ) }}
          formatted_time: >-
            {% from 'datediff.jinja' import relative_start_end_time %}
            {% set event = state_attr('binary_sensor.gdq_calendar_watch_runs', 'next') %}
            {% if event %}
              {{ relative_start_end_time(event.start, event.end, est='~') }}
            {% else %}
              Ingen kommende
            {% endif %}
          compact_time: >-
            {% from 'datediff.jinja' import relative_start_end_time %}
            {% set event = state_attr('binary_sensor.gdq_calendar_watch_runs', 'next') %}
            {% if event %}
              {{ relative_start_end_time(event.start, event.end, '', ' <> ', '', '', est='~') }}
            {% else %}
              Ingen kommende
            {% endif %}

script:
  refresh_gdq_agenda:
    alias: Refresh GDQ Agenda
    icon: mdi:calendar-refresh
    sequence:
      - service: homeassistant.update_entity
        target:
          entity_id:
            - calendar.gdq_schedule
      - delay:
          seconds: 5
      - service: automation.trigger
        target:
          entity_id:
            - automation.refresh_gdq_bids

automation:
  - alias: "Toggle GDQ on event state"
    id: 5d6fc4e6-291f-43f0-b555-831251da9ac5
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.gdq_event_active
        to:
          - "on"
          - "off"
    action:
      - service: "input_boolean.turn_{{ states('binary_sensor.gdq_event_active') }}"
        target:
          entity_id: input_boolean.gdq_enable

  - alias: "Turn on GDQ"
    id: turn_on_gdq
    initial_state: true
    trigger:
      - platform: state
        entity_id: input_boolean.gdq_enable
        to:
          - "on"
          - "off"
    action:
      - service: "homeassistant.turn_{{ states('input_boolean.gdq_enable') }}"
        target:
          entity_id: group.gdq_automations
      - condition: state
        entity_id: input_boolean.gdq_enable
        state: "on"
      - service: automation.trigger
        target:
          entity_id:
            - automation.refresh_gdq_runs_regex

  - alias: "Slow update GDQ"
    id: dc222bee-ba1b-49b4-80cf-7dee61761268
    initial_state: true
    trigger:
      - platform: time_pattern
        hours: "0"
        minutes: "0"
        seconds: "0"
    action:
      - parallel:
          - service: pyscript.get_gdq_event
          - service: script.refresh_gdq_agenda

  - alias: "Fast update GDQ"
    id: 57c88a86-3264-4163-b3ca-3839707bbf05
    trigger:
      - platform: time_pattern
        minutes: "/5"
    action:
      - service: script.refresh_gdq_agenda

  - alias: "Notify GDQ Run Coming Up"
    id: notify_gdq_run_coming_up
    trigger:
      - platform: numeric_state
        entity_id: sensor.gdq_next_watch_run
        below: 30
      - platform: numeric_state
        entity_id: sensor.gdq_next_watch_run
        below: 15
      - platform: numeric_state
        entity_id: sensor.gdq_next_watch_run
        below: 5
    variables:
      game: "{{ state_attr('sensor.gdq_next_watch_run', 'next_run').summary }}"
      category: "{{ (state_attr('sensor.gdq_next_watch_run', 'next_run').description.split('\n')|first|default('unknown - unknown')).split(' — ')|first }}"
      time: >-
        {% from 'easy_time.jinja' import custom_relative_time %}
        {{ custom_relative_time(state_attr('sensor.gdq_next_watch_run', 'next_run').get('start', ''), 'day, hour, minute') }}
    action:
      - service: script.notify_everywhere
        data:
          message:
            - tts: "Næste GDQ spil: "
              language: da-DK
              offset: -500
            - tts: "{{ game }} — {{ category }},"
              language: en-US
              voice: SteffanNeural
              offset: -900
            - tts: " starter {{ time }}"
              language: da-DK
              offset: -900

  - alias: "Refresh GDQ Bids"
    id: refresh_gdq_bids
    mode: single
    trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "/1"
        seconds: "0"
    action:
      - condition: template
        # Pyscript is slow to load the services, so we need to check if it's missing using watchman
        value_template: >-
          {{
            'entities' in states.sensor.watchman_missing_services.attributes
            and state_attr('sensor.watchman_missing_services', 'entities') | selectattr('id', 'eq', 'pyscript.gdq_get_bids') | list | length == 0
          }}
      - parallel:
          - service: pyscript.gdq_get_bids
          - service: pyscript.gdq_get_donation_stats

  - alias: "Refresh GDQ Runs Regex"
    id: refresh_gdq_runs_regex
    initial_state: true
    mode: restart
    trigger:
      - platform: state
        entity_id: todo.gdq_runs
    action:
      - service: todo.get_items
        data:
          status: needs_action
        target:
          entity_id: todo.gdq_runs
        response_variable: todo_items
      - event: gdq_runs_updated
        event_data:
          todo_items: "{{ todo_items }}"
      - delay:
          seconds: 5
      - service: script.refresh_gdq_agenda

  - id: update_gdq_calendar
    alias: Update GDQ Calendar
    mode: restart
    trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "/1"
        seconds: "0"
      - platform: state
        entity_id: calendar.gdq_schedule
      - platform: state
        entity_id: binary_sensor.home_assistant_loaded
        to: "on"
    variables:
      days: 10
      regexes: "{{ states.sensor.calendar_regexes.attributes }}"
      bool_attrs:
        watch: "{{ [(state_attr('sensor.gdq_runs_regex', 'regex') or '')] }}"
    action:
      - service: homeassistant.update_entity
        target:
          entity_id: calendar.gdq_schedule
      - delay:
          seconds: 5
      - service: calendar.get_events
        data:
          start_date_time: "{{ (now() + timedelta(days=-1)).strftime('%Y-%m-%d') }} 00:00:00"
          end_date_time: "{{ (now() + timedelta(days=days)).strftime('%Y-%m-%d') }} 23:59:59"
        target:
          entity_id: calendar.gdq_schedule
        response_variable: all_events
      - variables:
          agenda_events: >-
            {% from 'agenda.jinja' import agenda_event %}
            {% set ns = namespace(ret=[]) %}
            {% for event in all_events['calendar.gdq_schedule'].events | sort(attribute='start') | list -%}
              {% set ns.ret = ns.ret + [agenda_event("GDQ Kalender", dict(event, location=none), regexes, bool_attrs)|from_json] %}
            {%- endfor -%}
            {{ ns.ret }}
      - event: gdq_calendar_updated
        event_data:
          events: "{{ agenda_events }}"

group:
  gdq_automations:
    name: "GDQ Automations"
    entities:
      - automation.notify_gdq_run_coming_up
      - automation.fast_update_gdq
      - automation.refresh_gdq_bids
      - automation.update_gdq_calendar
