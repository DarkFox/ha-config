input_boolean:
  gdq_enable:
    name: "Enable GDQ"
    icon: mdi:gamepad-right

ics_calendar:
  calendars:
    - name: "SGDQ 2024 ICS"
      url: "https://aldaviva.com/docs/gdq.ics"
      days: 10
      download_interval: 5

template:
  - trigger:
      platform: event
      event_type: gdq_runs_updated
    sensor:
      - name: GDQ Runs Regex
        unique_id: gdq_runs_regex
        state: "{{ trigger.event.data.todo_items.get('todo.gdq_runs', {}).get('items', []) | length }}"
        attributes:
          regex: >-
            {% from 'utils.jinja' import regex_escape %}
            {% set runs = trigger.event.data.todo_items.get("todo.gdq_runs", {}).get("items", [])| map(attribute='summary') | list %}
            {% set ns = namespace(escaped_runs=[]) %}
            {% for run in runs %}
              {% set ns.escaped_runs = ns.escaped_runs + [regex_escape(run)] %}
            {% endfor %}
            .*({{ ns.escaped_runs | join('|') }}).*

  - sensor:
      - name: Upcoming GDQ Runs
        unique_id: upcoming_gdq_runs
        state: >-
          {% set start = now().strftime('%Y-%m-%d %H:%M:%S') %}
          {{ (
            (state_attr('sensor.gdq_agenda', 'agenda') or [])
          + (state_attr('sensor.gdq_agenda', 'tomorrow') or [])
          )|sort(attribute='start') | selectattr('watch', 'true') | selectattr('start', 'ge', start) | list | length }}
        attributes:
          all_runs: >-
            {% set start = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ (
              (state_attr('sensor.gdq_agenda', 'agenda') or [])
            + (state_attr('sensor.gdq_agenda', 'tomorrow') or [])
            )|sort(attribute='start') | selectattr('start', 'ge', start) | list }}
          watch_runs: >-
            {% set start = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {{ (
              (state_attr('sensor.gdq_agenda', 'agenda') or [])
            + (state_attr('sensor.gdq_agenda', 'tomorrow') or [])
            )|sort(attribute='start') | selectattr('watch', 'true') | selectattr('start', 'ge', start) | list }}

      - name: GDQ On Deck
        unique_id: gdq_on_deck
        unit_of_measurement: "min"
        state: >-
          {% set start = now().strftime('%Y-%m-%d %H:%M:%S') %}
          {% set runs = (
            (state_attr('sensor.gdq_agenda', 'agenda') or [])
          + (state_attr('sensor.gdq_agenda', 'tomorrow') or [])
          )|sort(attribute='start') %}
          {% set on_deck = (runs | selectattr('start', 'le', start) | list | last) or (runs | selectattr('start', 'ge', start) | list | first)  %}
          {{  ((on_deck.get('start')|as_datetime|as_local - now()).total_seconds() / 60)|int if on_deck else none }}
        attributes:
          icon: mdi:gamepad-right
          on_deck: >-
            {% set start = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {% set runs = (
              (state_attr('sensor.gdq_agenda', 'agenda') or [])
            + (state_attr('sensor.gdq_agenda', 'tomorrow') or [])
            )|sort(attribute='start') %}
            {{ (runs | selectattr('start', 'le', start) | list | last) or (runs | selectattr('start', 'ge', start) | list | first)  }}

      - name: GDQ Next Watch Run
        unique_id: gdq_next_watch_run
        unit_of_measurement: "min"
        state: >-
          {% set next_run = (
              (state_attr('sensor.upcoming_gdq_runs', 'watch_runs') or [])
            | sort(attribute='start')
            | first or {}
            ) %}
          {{  ((next_run.get('start')|as_datetime|as_local - now()).total_seconds() / 60)|int if next_run else none }}
        attributes:
          icon: mdi:gamepad-right
          next_run: >-
            {{ (
              (state_attr('sensor.upcoming_gdq_runs', 'watch_runs') or [])
            | sort(attribute='start')
            | first or {}
            ) }}

      - name: "Next GDQ Run Starts In"
        unique_id: next_gdq_run_starts_in
        unit_of_measurement: "min"
        state: >-
          {% set next_run_start = state_attr('sensor.gdq_next_watch_run', 'next_run').get('start', false) %}
          {{  ((next_run_start|as_datetime|as_local - now()).total_seconds() / 60)|int if next_run_start else none }}
        attributes:
          icon: mdi:calendar-clock

script:
  refresh_gdq_agenda:
    alias: Refresh GDQ Agenda
    icon: mdi:calendar-refresh
    sequence:
      - service: homeassistant.update_entity
        target:
          entity_id: calendar.sgdq_2024_ics
      - delay:
          seconds: 5
      - service: automation.trigger
        target:
          entity_id: automation.update_gdq_agenda

automation:
  - alias: "Turn on GDQ"
    id: turn_on_gdq
    initial_state: true
    trigger:
      - platform: state
        entity_id: input_boolean.gdq_enable
        to:
          - "on"
          - "off"
    action:
      - service: "automation.turn_{{ states('input_boolean.gdq_enable') }}"
        target:
          entity_id:
            - automation.update_gdq_agenda
            - automation.update_gdq_agenda_state
            - automation.refresh_gdq_runs_regex
            - automation.notify_gdq_run_coming_up
      - condition: state
        entity_id: input_boolean.gdq_enable
        state: "on"
      - service: automation.trigger
        target:
          entity_id:
            - automation.refresh_gdq_runs_regex

  - alias: "Notify GDQ Run Coming Up"
    id: notify_gdq_run_coming_up
    trigger:
      - platform: numeric_state
        entity_id: sensor.next_gdq_run_starts_in
        below: 30
      - platform: numeric_state
        entity_id: sensor.next_gdq_run_starts_in
        below: 15
      - platform: numeric_state
        entity_id: sensor.next_gdq_run_starts_in
        below: 5
    action:
      - service: script.notify_everywhere
        data:
          message: "NÃ¦ste GDQ spil: {{ state_attr('sensor.gdq_next_watch_run', 'next_run').summary }} starter om {{ states('sensor.next_gdq_run_starts_in') }} minutter."

  - alias: "Refresh GDQ Runs Regex"
    id: refresh_gdq_runs_regex
    mode: restart
    trigger:
      - platform: state
        entity_id: todo.gdq_runs
    action:
      - service: todo.get_items
        data:
          status: needs_action
        target:
          entity_id: todo.gdq_runs
        response_variable: todo_items
      - event: gdq_runs_updated
        event_data:
          todo_items: "{{ todo_items }}"
      - delay:
          seconds: 30
      - service: script.refresh_gdq_agenda

  - id: update_gdq_agenda
    alias: Update GDQ Agenda
    trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "/15"
        seconds: "0"
      - platform: state
        entity_id: calendar.sgdq_2024_ics
      - platform: state
        entity_id: binary_sensor.home_assistant_loaded
        to: "on"
    action:
      - service: calendar.get_events
        data:
          start_date_time: "{{ (now() + timedelta(days=-1)).strftime('%Y-%m-%d') }} 00:00:00"
          end_date_time: "{{ (now() + timedelta(days=1)).strftime('%Y-%m-%d') }} 23:59:59"
        target:
          entity_id: calendar.sgdq_2024_ics
        response_variable: all_events
      - variables:
          split_time: "{{ ((now().strftime('%Y-%m-%d') + ' 23:59:59')|as_datetime|as_local).isoformat() }}"
          agenda: "{{ all_events['calendar.sgdq_2024_ics'].events | selectattr('start', 'lt', split_time) | list }}"
          tomorrow: "{{ all_events['calendar.sgdq_2024_ics'].events | selectattr('start', 'ge', split_time) | list }}"
      - service: mqtt.publish
        data:
          topic: virtual/agenda/gdq/events
          retain: true
          payload: >
            {% from 'agenda.jinja' import agenda_event %}
            {%- set regexes = states.sensor.calendar_regexes.attributes -%}
            {%- set bool_attrs = {
              'watch': [(state_attr('sensor.gdq_runs_regex', 'regex') or '')]
            } -%}
            {
              "agenda": [
                {% for event in agenda|sort(attribute='start') | list -%}
                  {{ agenda_event("GDQ Kalender", event, regexes, bool_attrs) }}{%- if not loop.last %},{% endif %}
                {%- endfor -%}
              ],
              "tomorrow": [
                {% for event in tomorrow|sort(attribute='start') | list -%}
                  {{ agenda_event("GDQ Kalender", event, regexes, bool_attrs) }}{%- if not loop.last %},{% endif %}
                {%- endfor -%}
              ]
            }

  - id: update_gdq_agenda_state
    alias: Update GDQ Agenda State
    trigger:
      - platform: mqtt
        topic: virtual/agenda/gdq/events
    action:
      - service: mqtt.publish
        data:
          topic: virtual/agenda/gdq/state
          retain: true
          payload: "{{ trigger.payload_json.agenda | length }}"

mqtt:
  sensor:
    - name: GDQ Agenda
      state_topic: virtual/agenda/gdq/state
      json_attributes_topic: virtual/agenda/gdq/events
      unit_of_measurement: "events"
