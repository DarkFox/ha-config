automation:
  - alias: Send upcoming travel location to car
    id: 295f96ad-137a-4096-9bed-f2c2762fbc8c
    initial_state: true
    triggers:
      - trigger: numeric_state
        entity_id: sensor.next_scheduled_leave_in
        below: 30
    conditions:
      - condition: state
        entity_id: sensor.upcoming_travel_location
        attribute: mode
        state: "driving"
      - condition: state
        entity_id: binary_sensor.car_at_destination
        state: "off"
    actions:
      - action: script.send_entity_destination_to_car
        data:
          entity_id: sensor.upcoming_travel_location

  - alias: Send home destination to car
    id: 5f90a704-bfc1-4f60-a525-6af990b697ed
    initial_state: true
    triggers:
      - trigger: state
        entity_id: binary_sensor.upcoming_drive
        to: "on"
    conditions:
      - condition: numeric_state
        entity_id: sensor.next_scheduled_leave_in
        above: 60
      - condition: not
        conditions:
          - condition: state
            entity_id: device_tracker.id_3_pro_position
            state: "home"
    actions:
      - action: script.send_home_destination
        data:
          entity_id: zone.home

script:
  send_destination_to_car:
    alias: Send destination to car
    fields:
      name:
        description: Name of destination
        example: "Anders And"
        selector:
          text:
      destination:
        description: Destination to send to car
        example: "Paradisæblevej 111, 1234 Andeby"
        selector:
          text:
    sequence:
      - condition: template
        alias: "Ensure either destination or name is set"
        value_template: "{{ not not ((destination is defined and destination) or (name is defined and name)) }}"
      - action: script.osm_geocoding_lookup
        response_variable: geocoded_data
        data:
          query: "{{ destination or name }}"
      - variables:
          destination: >-
            {%- from 'osm.jinja' import geocodejson_to_vw -%}
            {{ geocodejson_to_vw(geocoded_data.location, name if name is defined else None) if geocoded_data.get('location', None) else {} }}
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ bool(destination.get('geoCoordinate', {}).get('latitude', False)) }}"
            sequence:
              - action: script.id_3_pro_send_destinations
                data:
                  destinations: "{{ destination }}"
        default:
          - action: notify.telegram_darkfox
            data:
              message: "Could not find coordinates for destination '{{ destination or name }}'"

  send_entity_destination_to_car:
    alias: Send entity destination to car
    fields:
      entity_id:
        description: Source entity for destination
        example: zone.home
        required: true
    variables:
      query: "{{ states(entity_id) }}"
      start_time: >-
        {{
          state_attr(entity_id, 'start_time')
          or state_attr(entity_id, 'start')
          or none
        }}
      latitude: "{{ state_attr(entity_id, 'latitude') or None }}"
      longitude: "{{ state_attr(entity_id, 'longitude') or None }}"
      address: "{{ state_attr(entity_id, 'address') or None }}"
      location_name: "{{ state_attr(entity_id, 'location_name') or None }}"
    sequence:
      - choose:
          - alias: Entity without coordinates
            conditions:
              - condition: template
                value_template: "{{ not latitude or not longitude }}"
            sequence:
              - action: script.osm_geocoding_lookup
                response_variable: geocoded_data
                data:
                  query: "{{ query }}"
              - variables:
                  destination: >-
                    {%- from 'osm.jinja' import geocodejson_to_vw -%}
                    {{ geocodejson_to_vw(geocoded_data.location) if geocoded_data.get('location', None) else {} }}
              - variables:
                  latitude: "{{ destination.geoCoordinate.latitude }}"
                  longitude: "{{ destination.geoCoordinate.longitude }}"
                  location_name: "{{ destination.name }}"
                  address: "{{ destination.address }}"
          - alias: Entity without address but with coordinates
            conditions:
              - condition: template
                value_template: "{{ not address and latitude != None and longitude != None }}"
            sequence:
              - action: script.osm_reverse_lookup
                response_variable: geocoded_data
                data:
                  latitude: "{{ latitude }}"
                  longitude: "{{ longitude }}"
              - variables:
                  destination: >-
                    {%- from 'osm.jinja' import geocodejson_to_vw -%}
                    {{ geocodejson_to_vw(geocoded_data.location) if geocoded_data.get('location', None) else {} }}
              - variables:
                  latitude: "{{ destination.geoCoordinate.latitude if destination.get('geoCoordinate', None) else latitude }}"
                  longitude: "{{ destination.geoCoordinate.longitude if destination.get('geoCoordinate', None) else longitude }}"
                  location_name: "{{ destination.name if destination.get('name', None) else location_name }}"
                  address: "{{ destination.address if destination.get('address', None) else address }}"
      - condition: template
        value_template: "{{ latitude != None and longitude != None }}"
      - variables:
          name: >-
            {{
              (start_time|as_datetime|as_local).strftime('%H:%M')~':' if start_time
              else ''
            }}
            {{
              state_attr(entity_id, 'summary')
              or state_attr(entity_id, 'name')
              or state_attr(entity_id, 'location_name')
              or location_name
              or state_attr(entity_id, 'friendly_name')
              or None
            }}
      - action: script.id_3_pro_send_destinations
        data:
          destinations:
            - name: "{{ name }}"
              address: "{{ address }}"
              geoCoordinate:
                latitude: "{{ latitude }}"
                longitude: "{{ longitude }}"

  send_home_destination:
    alias: Send home destination to car
    sequence:
      - action: script.send_entity_destination_to_car
        data:
          entity_id: zone.home

  send_rsh_destination:
    alias: Send RSH destination to car
    sequence:
      - action: script.send_entity_destination_to_car
        data:
          entity_id: zone.rsh

  send_rsr_destination:
    alias: Send RSR destination to car
    sequence:
      - action: script.send_entity_destination_to_car
        data:
          entity_id: zone.rsr

  send_foraeldre_destination:
    alias: Send Forældre destination to car
    sequence:
      - action: script.send_entity_destination_to_car
        data:
          entity_id: zone.foraeldre

  send_upcoming_travel_location:
    alias: Send upcoming travel location to car
    sequence:
      - action: script.send_entity_destination_to_car
        data:
          entity_id: sensor.upcoming_travel_location
