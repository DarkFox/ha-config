template:
  - sensor:
      - name: Room Announcement Speakers
        state: "{{ (state_attr('sensor.room_announcement_speakers', 'entities') or []) | length }}"
        attributes:
          entities: >-
            {%- if state_attr('sensor.active_rooms', 'entities') -%}
              {%- set ns = namespace(ret=[]) %}
              {%- for entity in state_attr('sensor.active_rooms', 'entities') -%}
                {%- set speaker_group = 'group.'+entity.replace('binary_sensor.','').replace('_activity','')+'_speakers' -%}
                {%- if state_attr(speaker_group, 'entity_id') -%}
                  {%- set ns.ret = ns.ret + (state_attr(speaker_group, 'entity_id')|list) -%}
                {%- endif -%}
              {%- endfor %}
              {{ ns.ret | unique | list }}
            {%- else -%}
              []
            {%- endif -%}

script:
  notify_everywhere:
    alias: Send notification everywhere
    mode: queued
    fields:
      message_title:
        description: The title of the message
        example: "Warning"
        selector:
          text:
      message:
        description: The message to send (Can be a chime_tts segments list)
        example: "Hello, this is a test"
        selector:
          text:
      severity:
        description: The severity of the message (0=low_priority, 1=info, 2=warning, 3=critical) (default=1)
        example: "2"
        selector:
          number:
            min: 0
            max: 3
            step: 1
      data:
        description: Additional data to send with the message
        example: "{'inline_keyboard': {'text': 'Click me', 'url': 'https://www.home-assistant.io'}}"
        selector:
          object:
    sequence:
      - variables:
          # If the message is a chime_tts segments list, extract the tts attribute of each segment
          message_text: |
            {%- if message is list and message[0] is mapping and message | selectattr('tts', 'defined') | list | length > 0 -%}
              {{ message | map(attribute='tts') | map('trim') | list | join(' ') }}
            {%- else -%}
              {{ message }}
            {%- endif -%}
      - parallel:
          - action: notify.telegram_darkfox
            data:
              title: "{{ message_title if message_title is defined and message_title }}"
              message: "{{ message_text }}"
              data: "{{ data if data is defined and data else {} }}"
          - action: script.popup_notification
            data:
              message_title: "{{ message_title if message_title is defined and message_title }}"
              message: "{{ message_text }}"
              severity: "{{ severity | default(1) | int }}"
          - action: script.voice_broadcast
            data:
              message_title: "{{ message_title if message_title is defined and message_title }}"
              message: "{{ message }}"
              severity: "{{ severity | default(1) | int }}"
          - action: script.darkphone_tts
            data:
              message_title: "{{ message_title if message_title is defined and message_title }}"
              message: "{{ message_text }}"
              severity: "{{ severity | default(1) | int }}"
          - action: notify.stue_tv
            data:
              message: |
                {{ message_title if message_title is defined and message_title else '' }}
                {{ message_text }}
          - action: notify.kontor_tv
            data:
              message: |
                {{ message_title if message_title is defined and message_title else '' }}
                {{ message_text }}
          - action: notify.martin_pc
            data:
              title: "{{ message_title if message_title is defined and message_title }}"
              message: "{{ message_text }}"

  notify_darkphone:
    alias: Send notification to Darkphone TTS and Telegram
    mode: queued
    fields:
      message_title:
        description: The title of the message
        example: "Warning"
        selector:
          text:
      message:
        description: The message to send
        example: "Hello, this is a test"
        selector:
          text:
      severity:
        description: The severity of the message (0=low_priority, 1=info, 2=warning, 3=critical) (default=1)
        example: "2"
        selector:
          number:
            min: 0
            max: 3
            step: 1
      data:
        description: Additional data to send with the message
        example: "{'inline_keyboard': {'text': 'Click me', 'url': 'https://www.home-assistant.io'}}"
        selector:
          object:
    variables:
      data: |
        {% set input_data = data if data is defined and data else {} %}
        {% if severity is defined and severity == 0 %}
          {{ dict(input_data, **{ 'disable_notification': True}) }}
        {% else %}
          {{ input_data }}
        {% endif %}
    sequence:
      - parallel:
          - action: script.darkphone_tts
            data:
              message_title: "{{ message_title if message_title is defined and message_title }}"
              message: "{{ message }}"
              severity: "{{ severity | default(1) | int }}"
          - action: notify.telegram_darkfox
            data:
              title: "{{ message_title if message_title is defined and message_title }}"
              message: "{{ message }}"
              data: "{{ data if data is defined and data else {} }}"

  darkphone_tts:
    alias: Read message on Darkphone if headset connected (Low priority messages are not read)
    mode: queued
    fields:
      message_title:
        description: The title of the message
        example: "Warning"
        selector:
          text:
      message:
        description: The message to read
        example: "Hello, this is a test"
        selector:
          text:
      severity:
        description: The severity of the message (0=low_priority, 1=info, 2=warning, 3=critical) (default=1)
        example: "2"
        selector:
          number:
            min: 0
            max: 3
            step: 1
    sequence:
      - variables:
          severity: "{{ severity | default(1) | int }}"
          media_stream: >
            {% if severity == 3 %}
              alarm_stream_max
            {% else %}
              system_stream
            {% endif %}
      - condition: template
        value_template: "{{ severity > 0 }}"
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.darkphone_headphones
            state: "on"
          - condition: state
            entity_id: binary_sensor.darkphone_bluetooth_headphones_connected
            state: "on"
          - condition: state
            entity_id: binary_sensor.darkphone_android_auto
            state: "on"
      - action: notify.mobile_app_darkphone
        data:
          message: "TTS"
          data:
            media_stream: "{{ media_stream }}"
            tts_text: "{{ message_title + ' - ' if message_title is defined and message_title }}{{ message }}"
            ttl: 0
            priority: high

  voice_broadcast:
    alias: Broadcast message on all speakers if home
    mode: queued
    fields:
      message_title:
        description: The title of the message
        example: "Warning"
        selector:
          text:
      message:
        description: The message to broadcast
        example: "Hello, this is a test"
        selector:
          text:
      entity_id:
        description: The entity_id of the speaker(s) to broadcast to (defaults to all speakers in active rooms)
        example: "media_player.kokken"
        selector:
          entity:
            filter:
              - domain: media_player
      volume_level:
        description: The volume level to use for the broadcast (optional)
        example: "0.5"
        selector:
          number:
            step: 0.01
            min: 0
            max: 1
      severity:
        description: The severity of the message (0=low_priority, 1=info, 2=warning, 3=critical) (default=1)
        example: "2"
        selector:
          number:
            min: 0
            max: 3
            step: 1
    variables:
      severity: >-
        {{
          severity|int
          if severity is defined
          and severity
          and (severity|replace('-','')).isdigit()
          else 1
        }}
      entity_id: >-
        {% if severity > 1 %}
          {{ state_attr('group.all_speakers', 'entity_id') }}
        {% else %}
          {{ entity_id | default(state_attr('sensor.room_announcement_speakers', 'entities')) }}
        {% endif %}
      default_volume: >-
        {% if severity == 3 %}
          0.75
        {% elif severity == 2 %}
          0.50
        {% else %}
          {{ 0.35 if states('input_select.sleep_state') in ['alarm', 'soozing', 'waking'] else 0.50 }}
        {% endif %}
      chime_path: >-
        {% if severity == 3 %}
          /media/Notifications/Facility Siren.mp3
        {% elif severity == 2 %}
          /config/custom_components/chime_tts/mp3s/error.mp3
        {% else %}
          {{ none }}
        {% endif %}
    sequence:
      - condition: state
        entity_id: binary_sensor.martin_presence
        state: "on"
      - condition: "{{ states('input_select.sleep_state') not in ['sleeping', 'paused', 'smart wake'] }}"
      - action: script.tts_speak
        data:
          entity_id: "{{ entity_id }}"
          volume_level: "{{ volume_level | default(default_volume) }}"
          chime_path: "{{ chime_path }}"
          message: |
            {%- if message is list and message | selectattr('tts', 'defined') | list | length > 0 -%}
              {{ ([{"tts": message_title}] if message_title is defined and message_title else []) + message }}
            {%- else -%}
              {{ message }}
            {%- endif -%}

  popup_notification:
    alias: Popup Notification using Browser Mod
    mode: queued
    fields:
      message_title:
        description: The title of the message
        example: "Warning"
        selector:
          text:
      message:
        description: The message to display
        example: "Hello, this is a test"
        selector:
          text:
    sequence:
      - action: browser_mod.popup
        data:
          autoclose: true
          timeout: 30000
          size: wide
          title: "{{ message_title if message_title is defined and message_title }}"
          content: |
            <div style="font-size: 32pt; line-height: 32pt; font-weight: bold; text-align: center; padding: 24pt 0 20pt;">
              {{ message }}
            </div>

automation:
  - alias: Cold water leak warning
    id: cold_water_leak_warning
    initial_state: true
    triggers:
      - trigger: numeric_state
        entity_id: sensor.koldt_vand_forbrug
        above: 200
        for:
          minutes: 10
    actions:
      - action: script.notify_everywhere
        data:
          message: "Koldt vand løber!"
          severity: 2

  - alias: Warm water leak warning
    id: warm_water_leak_warning
    initial_state: true
    triggers:
      - trigger: numeric_state
        entity_id: sensor.varmt_vand_forbrug
        above: 200
        for:
          minutes: 10
    actions:
      - action: script.notify_everywhere
        data:
          message: "Varmt vand løber!"
          severity: 2

  - alias: Apartment Door Lock Notification
    id: apartment_door_lock_notification
    initial_state: true
    triggers:
      trigger: state
      entity_id: lock.hoveddor_las
      to: "unlocked"
      for:
        minutes: 3
    actions:
      - action: script.notify_everywhere
        data:
          message: "Hoveddøren er ikke låst!"
          severity: 2

  - alias: Freezer Door Open Notification
    id: freezer_door_open_notification
    initial_state: true
    triggers:
      trigger: state
      entity_id: binary_sensor.fryser_dor
      to: "on"
      for:
        minutes: 3
    actions:
      - action: script.notify_everywhere
        data:
          message: "Fryseren står åben!"
          severity: 2

  - alias: Fridge Door Open Notification
    id: fridge_door_open_notification
    initial_state: true
    triggers:
      trigger: state
      entity_id: binary_sensor.koleskab_dor
      to: "on"
      for:
        minutes: 3
    actions:
      - action: script.notify_everywhere
        data:
          message: "Køleskabet står åben!"
          severity: 2

  - alias: Smartwatch charged notification
    id: smartwatch_charged_notification
    initial_state: true
    triggers:
      trigger: numeric_state
      entity_id: sensor.darkwatch_battery_level
      above: 98
    actions:
      - action: script.notify_everywhere
        data:
          message: "Ur er fuldt opladet!"
