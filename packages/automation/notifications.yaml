template:
  - sensor:
      - name: Room Announcement Speakers
        state: "{{ (state_attr('sensor.room_announcement_speakers', 'entities') or []) | length }}"
        attributes:
          entities: >-
            {%- if state_attr('sensor.active_rooms', 'entities') -%}
              {%- set ns = namespace(ret=[]) %}
              {%- for entity in state_attr('sensor.active_rooms', 'entities') -%}
                {%- set speaker_group = 'group.'+entity.replace('binary_sensor.','').replace('_activity','')+'_speakers' -%}
                {%- if state_attr(speaker_group, 'entity_id') -%}
                  {%- set ns.ret = ns.ret + (state_attr(speaker_group, 'entity_id')|list) -%}
                {%- endif -%}
              {%- endfor %}
              {{ ns.ret | unique | list }}
            {%- else -%}
            []
            {%- endif -%}

script:
  notify_everywhere:
    alias: Send notification everywhere
    sequence:
      - service: notify.telegram_darkfox
        data:
          message: "{{ message }}"
      - service: script.popup_notification
        data:
          message: "{{ message }}"
      - service: script.voice_broadcast
        data:
          message: "{{ message }}"
      - service: script.darkphone_tts
        data:
          message: "{{ message }}"
      - service: notify.stue_tv
        data:
          message: "{{ message }}"
      - service: notify.kontor_tv
        data:
          message: "{{ message }}"

  darkphone_tts:
    alias: Read message on Darkphone if headset connected
    sequence:
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.darkphone_headphones
            state: "on"
          - condition: state
            entity_id: binary_sensor.darkphone_bluetooth_headphones_connected
            state: "on"
      - service: notify.mobile_app_darkphone
        data:
          message: "TTS"
          data:
            media_stream: "media_stream"
            tts_text: "{{ message }}"
            ttl: 0
            priority: high

  voice_broadcast:
    alias: Broadcast message on all speakers if home
    fields:
      message:
        description: The message to broadcast
        example: "Hello, this is a test"
      entity_id:
        description: The entity_id of the speaker(s) to broadcast to (defaults to all speakers in active rooms)
        example: "media_player.kitchen_speaker"
    variables:
      entity_id: "{{ entity_id | default(state_attr('sensor.room_announcement_speakers', 'entities')) }}"
    sequence:
      - condition: state
        entity_id: binary_sensor.martin_presence
        state: "on"
      - condition: "{{ states('input_select.sleep_state') not in ['sleeping', 'paused', 'smart wake'] }}"
      - service: script.tts_speak
        data:
          cache: false
          entity_id: "{{ entity_id }}"
          volume_level: "{{ 0.35 if states('input_select.sleep_state') in ['alarm', 'soozing', 'waking'] else 0.50 }}"
          message: >-
            {{ message }}

  popup_notification:
    alias: Popup Notification using Browser Mod
    sequence:
      - service: browser_mod.popup
        data:
          autoclose: true
          timeout: 30000
          size: wide
          card_mod:
            style:
              border-radius: 20px
              --ha-card-border-radius: 20px
              padding: 20px
          content:
            type: custom:html-card
            card_mod:
              style: >
                ha-card {
                  background-color: inherit;
                  font-size: 32pt;
                  line-height: 32pt;
                  font-weight: bold;
                  text-align: center;
                }
            content: "{{ message }}"

automation:
  - alias: Cold water leak warning
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.koldt_vand_forbrug
        above: 200
        for:
          minutes: 10
    action:
      - service: script.notify_everywhere
        data:
          message: "Koldt vand løber!"
          severity: 2

  - alias: Warm water leak warning
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.varmt_vand_forbrug
        above: 200
        for:
          minutes: 10
    action:
      - service: script.notify_everywhere
        data:
          message: "Varmt vand løber!"
          severity: 2

  - alias: Dishwasher leak warning
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.opvaskemaskine_laek
      to: "on"
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.opvaskemaskine
      - service: script.notify_everywhere
        data:
          message: "Vand under opvaskemaskinen!"

  - alias: Apartment Door Lock Notification
    initial_state: true
    trigger:
      platform: state
      entity_id: lock.hoveddor_las
      to: "unlocked"
      for:
        minutes: 3
    action:
      - service: script.notify_everywhere
        data:
          message: "Hoveddøren er ikke låst!"

  - alias: Freezer Door Open Notification
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.fryser_dor
      to: "on"
      for:
        minutes: 3
    action:
      - service: script.notify_everywhere
        data:
          message: "Fryseren står åben!"

  - alias: Fridge Door Open Notification
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.koleskab_dor
      to: "on"
      for:
        minutes: 3
    action:
      - service: script.notify_everywhere
        data:
          message: "Køleskabet står åben!"
