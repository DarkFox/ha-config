blueprint:
  name: Update Map Extractor camera
  description: "Controls update interval of a Map Extractor camera.\n\nThere are 4
    modes available:\n  - Two intervals - automation controls camera updates both
    when vacuum is cleaning or docked. To use with `auto_update: false` in camera's
    configuration.\n  - Turn off when docked - completely turns off vacuum updates
    when the vacuum is docked. Uses default interval when cleaning.\n  - Default when
    docked - automation controls camera updates when vacuum is cleaning, default interval
    is used when vacuum is docked. To use with long `scan_interval` set up in camera's
    configuration.\n  - Default when cleaning - automation controls camera updates
    when vacuum is docked, default interval is used when vacuum is cleaning. To use
    with short/default `scan_interval` set up in camera's configuration."
  domain: automation
  source_url: https://github.com/PiotrMachowski/Home-Assistant-custom-components-Xiaomi-Cloud-Map-Extractor/blob/master/blueprints/automation/update_map_extractor.yaml
  input:
    vacuum:
      name: Vacuum device
      selector:
        entity:
          domain:
          - vacuum
          multiple: false
    camera:
      name: Vacuum camera
      selector:
        entity:
          domain:
          - camera
          integration: xiaomi_cloud_map_extractor
          multiple: false
    mode_to_handle:
      name: Mode
      description: Desired mode camera's updates
      selector:
        select:
          options:
          - value: two_intervals
            label: Two intervals
          - value: turn_off_when_docked
            label: Turn off when docked
          - value: default_when_docked
            label: Default when docked
          - value: default_when_cleaning
            label: Default when cleaning
          multiple: false
          custom_value: false
    interval_docked:
      name: Interval docked
      description: 'Camera''s update interval that should be used when the vacuum
        is docked.

        Not used in `Turn off when docked` and `Default when docked` modes.'
      selector:
        number:
          max: 10000.0
          min: 1.0
          unit_of_measurement: s
          mode: slider
          step: 1.0
      default: 1800
    interval_cleaning:
      name: Interval cleaning
      description: 'Camera''s update interval that should be used when the vacuum
        is cleaning.

        Not used in `Turn off when docked` and `Default when cleaning` modes.'
      selector:
        number:
          max: 10000.0
          min: 1.0
          unit_of_measurement: s
          mode: slider
          step: 1.0
      default: 10
    update_once_after_docking:
      name: Update once after docking
      description: Update the camera image after the vacuum is docked for 10 seconds.
      selector:
        boolean: {}
      default: true
mode: single
variables:
  interval_docked: !input interval_docked
  interval_cleaning: !input interval_cleaning
  mode_to_handle: !input mode_to_handle
  update_once_after_docking: !input update_once_after_docking
  vacuum_entity: !input vacuum
  camera_entity: !input camera
  is_vacuum_docked: '{{ states(vacuum_entity) in [''unavailable'', ''unknown'', ''docked'']
    }}'
  is_interval_docked_trigger: "{{ \n  mode_to_handle in ['two_intervals', 'default_when_cleaning']
    \n  and trigger.id == 'time_pattern' \n  and (trigger.now | as_timestamp(0) |
    int(0) % interval_docked | int(0)) == 0\n  and is_vacuum_docked\n}}"
  is_interval_cleaning_trigger: "{{ \n  mode_to_handle in ['two_intervals', 'default_when_docked']\n
    \ and trigger.id == 'time_pattern' \n  and (trigger.now | as_timestamp(0) | int(0)
    % interval_cleaning | int(0)) == 0\n  and not is_vacuum_docked\n}}"
  is_vacuum_state_trigger: "{{\n  mode_to_handle in ['turn_off_when_docked', 'default_when_cleaning',
    'default_when_docked']\n  and trigger.id == 'vacuum_changed'\n}}"
  is_vacuum_docked_trigger: "{{\n  trigger.id == 'vacuum_docked' and update_once_after_docking\n}}"
trigger:
- platform: state
  entity_id: !input vacuum
  id: vacuum_changed
- platform: time_pattern
  seconds: /1
  id: time_pattern
- platform: state
  entity_id: !input vacuum
  to: docked
  for:
    seconds: 10
  id: vacuum_docked
condition:
- condition: or
  conditions:
  - condition: template
    value_template: '{{ is_interval_docked_trigger }}'
  - condition: template
    value_template: '{{ is_interval_cleaning_trigger }}'
  - condition: template
    value_template: '{{ is_vacuum_state_trigger }}'
  - condition: template
    value_template: '{{ is_vacuum_docked_trigger }}'
action:
- choose:
  - conditions: '{{ is_interval_docked_trigger or is_interval_cleaning_trigger or
      is_vacuum_docked_trigger }}'
    sequence:
    - service: homeassistant.update_entity
      entity_id: !input camera
  - conditions: '{{ is_vacuum_state_trigger }}'
    sequence:
    - choose:
      - conditions: "{{\n  mode_to_handle in ['turn_off_when_docked', 'default_when_cleaning']\n}}"
        sequence:
        - service: camera.{{ is_vacuum_docked | iif('turn_off', 'turn_on') }}
          entity_id: !input camera
      - conditions: "{{\n  mode_to_handle in ['default_when_docked']\n}}"
        sequence:
        - service: camera.{{ is_vacuum_docked | iif('turn_on', 'turn_off') }}
          entity_id: !input camera
