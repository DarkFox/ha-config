type: custom:config-template-card
entities:
  - sensor.energi_data_service
  - sensor.historic_energy_price_percentiles
config_templates: default
variables:
  max_price_threshold: |
    () => {
      return states['sensor.historic_energy_price_percentiles'].attributes['99th']
    }
  get_lime_threshold: |
    () => {
      return states['sensor.historic_energy_price_percentiles'].attributes['25th']
    }
  get_yellow_threshold: |
    () => {
      return states['sensor.historic_energy_price_percentiles'].attributes['50th']
    }
  get_orange_threshold: |
    () => {
      return states['sensor.historic_energy_price_percentiles'].attributes['75th']
    }
  get_darkred_threshold: |
    () => {
      return states['sensor.historic_energy_price_percentiles'].attributes['95th']
    }
card:
  type: custom:apexcharts-card
  graph_span: 132h
  span:
    start: hour
    offset: -2h
  apex_config:
    stroke:
      show: true
      curve: stepline
      lineCap: butt
    chart:
      height: 600px
    grid:
      show: true
      borderColor: rgb(158, 158, 158)
      strokeDashArray: 2
    annotations:
      position: back
      yaxis:
        - "y": 0
          y2: ${ get_lime_threshold() }
          fillColor: rgb(76, 175, 80)
          strokeDashArray: 0
          borderColor: "#00000000"
        - "y": ${ get_lime_threshold() }
          y2: ${ get_yellow_threshold() }
          fillColor: rgb(186, 255, 58)
          strokeDashArray: 0
          borderColor: "#00000000"
        - "y": ${ get_yellow_threshold() }
          y2: ${ get_orange_threshold() }
          fillColor: rgb(255, 193, 7)
          strokeDashArray: 0
          borderColor: "#00000000"
        - "y": ${ get_orange_threshold() }
          y2: ${ get_darkred_threshold() }
          fillColor: rgb(255, 152, 0)
          strokeDashArray: 0
          borderColor: "#00000000"
        - "y": ${ get_darkred_threshold() }
          y2: ${ max_price_threshold() }
          fillColor: rgb(244, 67, 54)
          strokeDashArray: 0
          borderColor: "#00000000"
        - "y": ${ max_price_threshold() }
          y2: 100
          fillColor: rgb(255, 0, 0)
          strokeDashArray: 0
          borderColor: "#00000000"
  header:
    show: false
    title: Elpriser pr. time (DKK/kWh)
    show_states: true
    colorize_states: true
  now:
    label: Nu
    show: true
    color: black
  yaxis:
    - min: "|-0.5|"
      max: "|+0.5|"
      apex_config:
        tickAmount: 4
        forceNiceScale: false
        decimalsInFloat: 1
  series:
    - name: Totalpris
      entity: sensor.el_priser
      stroke_width: 3
      float_precision: 3
      fill_raw: last
      type: line
      color: rgb(33, 150, 243)
      extend_to: false
      show:
        in_header: false
        extremas: true
        legend_value: false
      data_generator: |
        var prices = entity.attributes.prices.map((price, index) => {
          return [new Date(price["start"]).getTime(), price["value"]];
        });

        return prices

    - name: Spotpriser
      entity: sensor.el_spotpriser
      stroke_width: 3
      float_precision: 3
      fill_raw: last
      type: line
      color: rgb(35, 163, 21)
      extend_to: false
      show:
        in_header: false
        legend_value: false
      data_generator: |
        var prices = entity.attributes.prices.map((price, index) => {
          return [new Date(price["start"]).getTime(), price["value"]];
        });

        return prices;

    - name: 1 time minima
      entity: sensor.el_naeste_billige_1_time
      stroke_width: 0
      float_precision: 3
      type: area
      color: rgb(37, 243, 33)
      opacity: 0.3
      extend_to: false
      show:
        in_header: false
        datalabels: false
        legend_value: false
      data_generator: |
        var prices = entity.attributes.local_minima.map((price, index) => {
          return [
            [new Date(price["start"]).getTime(), price["value"]],
            [new Date(price["end"]).getTime(), 0]
          ];
        });

        return prices.flat();

    - name: 3 timer minima
      entity: sensor.el_naeste_billige_3_timer
      stroke_width: 0
      float_precision: 3
      type: area
      color: rgb(37, 243, 33)
      opacity: 0.2
      extend_to: false
      show:
        in_header: false
        datalabels: false
        legend_value: false
      data_generator: |
        var prices = entity.attributes.local_minima.map((price, index) => {
          return [
            [new Date(price["start"]).getTime(), price["value"]],
            [new Date(price["end"]).getTime(), 0]
          ];
        });

        return prices.flat();

    - name: 6 timer minima
      entity: sensor.el_naeste_billige_6_timer
      stroke_width: 0
      float_precision: 3
      type: area
      color: rgb(37, 243, 33)
      opacity: 0.1
      extend_to: false
      show:
        in_header: false
        datalabels: false
        legend_value: false
      data_generator: |
        var prices = entity.attributes.local_minima.map((price, index) => {
          return [
            [new Date(price["start"]).getTime(), price["value"]],
            [new Date(price["end"]).getTime(), 0]
          ];
        });

        return prices.flat();

    - name: 1 time maxima
      entity: sensor.el_naeste_dyre_1_time
      stroke_width: 0
      float_precision: 3
      type: area
      color: rgb(243, 33, 33)
      opacity: 0.3
      extend_to: false
      show:
        in_header: false
        datalabels: false
        legend_value: false
      data_generator: |
        var prices = entity.attributes.local_maxima.map((price, index) => {
          return [
            [new Date(price["start"]).getTime(), price["value"]],
            [new Date(price["end"]).getTime(), 0]
          ];
        });

        return prices.flat();

    - name: 3 timer maxima
      entity: sensor.el_naeste_dyre_3_timer
      stroke_width: 0
      float_precision: 3
      type: area
      color: rgb(243, 33, 33)
      opacity: 0.2
      extend_to: false
      show:
        in_header: false
        datalabels: false
        legend_value: false
      data_generator: |
        var prices = entity.attributes.local_maxima.map((price, index) => {
          return [
            [new Date(price["start"]).getTime(), price["value"]],
            [new Date(price["end"]).getTime(), 0]
          ];
        });

        return prices.flat();

    - name: 6 timer maxima
      entity: sensor.el_naeste_dyre_6_timer
      stroke_width: 0
      float_precision: 3
      type: area
      color: rgb(243, 33, 33)
      opacity: 0.1
      extend_to: false
      show:
        in_header: false
        datalabels: false
        legend_value: false
      data_generator: |
        var prices = entity.attributes.local_maxima.map((price, index) => {
          return [
            [new Date(price["start"]).getTime(), price["value"]],
            [new Date(price["end"]).getTime(), 0]
          ];
        });

        return prices.flat();
